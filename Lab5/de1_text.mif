DEPTH = 16384;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
00000000 : 00001217;   % 224:  	la 	tp, ExceptionHandling	# carrega em tp o endere�o base das rotinas do sistema ECALL %
00000001 : 05020213;   % 224:  %
00000002 : 00521073;   % 225:  	csrw 	tp, utvec 		# seta utvec para o endere�o tp %
00000003 : 0000e073;   % 226:  	csrsi 	ustatus, 1 		# seta o bit de habilita��o de interrup��o em ustatus (reg 0)																																																				 %
00000004 : 03000893;   % 77: li a7, 48               # Limpa Frame %
00000005 : 00000513;   % 78: li a0, 0                # Cor preta %
00000006 : 00000593;   % 80: li a1, 0                # ID do Frame %
00000007 : 00000073;   % 81: ecall                   # (48) Limpa Frame %
00000008 : 00100593;   % 83: li a1, 1               # ID do Frame %
00000009 : 00000073;   % 84: ecall                   # (48) Limpa Frame %
0000000a : 0ff00693;   % 86: li a3, 0xFF		# cor branca %
0000000b : 00000713;   % 87: li a4, 0		# frame 0 %
0000000c : 0fc10517;   % 88: la a0, dificuldade	# %
0000000d : 03f50513;   % 88:  %
0000000e : 07500593;   % 89: li a1, 117		# imprime a string "dificuldade" %
0000000f : 05900613;   % 90: li a2, 89		# no menu %
00000010 : 06800893;   % 91: li a7, 104		# %
00000011 : 00000073;   % 92: ecall			# %
00000012 : 0fc10517;   % 94: la a0, cor		# %
00000013 : 02350513;   % 94:  %
00000014 : 09500593;   % 95: li a1, 149		# imprime a string "cor" %
00000015 : 07900613;   % 96: li a2, 121		# no menu %
00000016 : 06800893;   % 97: li a7, 104		# %
00000017 : 00000073;   % 98: ecall			# %
00000018 : 6a8000ef;   % 101: jal key			# registra entrada do teclado %
00000019 : 00a00293;   % 102: li t0, 10		# t0 = Enter %
0000001a : 12550e63;   % 103: beq a0,t0, end_menu	# Enter comeca jogo %
0000001b : 0fc10597;   % 105: la a1, is_color		# %
0000001c : 03458593;   % 105:  %
0000001d : 0fc10617;   % 106: la a2, menu		# %
0000001e : 03060613;   % 106:  %
0000001f : 00c60693;   % 107: addi a3, a2, 12		#  itera menu %
00000020 : 0fc10717;   % 108: la a4, difficult	# %
00000021 : 01870713;   % 108:  %
00000022 : 5c8000ef;   % 110: jal iterate_menu	# %
00000023 : 0fc10297;   % 112: la t0, is_color		# %
00000024 : 01428293;   % 112:  %
00000025 : 0002a283;   % 113: lw t0,0(t0)		# caractere * no menu  %
00000026 : 02a00513;   % 115: li a0, 42		# %
00000027 : 00000693;   % 116: li a3, 0		# %
00000028 : 00000713;   % 117: li a4, 0		# %
00000029 : 06f00893;   % 118: li a7,111		# %
0000002a : 00029e63;   % 120: bne t0,zero,if_select	# %
0000002b : 08100593;   % 121: 	li a1, 129	# %
0000002c : 08900613;   % 122: 	li a2, 137	# %
0000002d : 00000073;   % 123: 	ecall 		# %
0000002e : 04500593;   % 125: 	li a1, 69	# %
0000002f : 06900613;   % 126: 	li a2, 105	# %
00000030 : 0180006f;   % 128: j end_select		# %
00000031 : 04500593;   % 130: 	li a1, 69	# %
00000032 : 06900613;   % 131: 	li a2, 105	# %
00000033 : 00000073;   % 132: 	ecall		# %
00000034 : 08100593;   % 134: 	li a1, 129	# %
00000035 : 08900613;   % 135: 	li a2, 137	# %
00000036 : 0ff00693;   % 139: 	li a3, 0xff	# %
00000037 : 00000073;   % 140: 	ecall		# %
00000038 : 0ff00693;   % 142: li a3, 0xFF		# %
00000039 : 00000713;   % 143: li a4, 0		# %
0000003a : 0fc10297;   % 145: la t0, menu		# imprime a string "facil"  %
0000003b : fbc28293;   % 145:  %
0000003c : 0fc10517;   % 147: la a0, facil		# %
0000003d : f8b50513;   % 147:  %
0000003e : 03300693;   % 148: li a3, 0x33		#  %
0000003f : 0002a303;   % 149: lw t1,0(t0)		#  %
00000040 : 006686b3;   % 150: add a3, a3, t1		# %
00000041 : 05500593;   % 151: <26> li a1, 85 %
00000042 : 06900613;   % 151: <27> li a2, 105 %
00000043 : 06800893;   % 151: <28> li a7, 104 %
00000044 : 00000073;   % 151: <29> ecall %
00000045 : 0fc10517;   % 154: la a0, medio		# %
00000046 : f6d50513;   % 154:  %
00000047 : 07700693;   % 155: li a3, 0x77		# imprime a string "medio"  %
00000048 : 0042a303;   % 156: lw t1,4(t0)		# com borda, se necessario %
00000049 : 006686b3;   % 157: add a3, a3, t1		# %
0000004a : 08500593;   % 158: <26> li a1, 133 %
0000004b : 06900613;   % 158: <27> li a2, 105 %
0000004c : 06800893;   % 158: <28> li a7, 104 %
0000004d : 00000073;   % 158: <29> ecall %
0000004e : 0fc10517;   % 161: la a0, dificil		# %
0000004f : f4f50513;   % 161:  %
00000050 : 00600693;   % 162: li a3, 0x6		# imprime a string "dificil" %
00000051 : 0082a303;   % 163: lw t1,8(t0)		# com borda, se necessario %
00000052 : 006686b3;   % 164: add a3, a3, t1		# %
00000053 : 0b500593;   % 165: <26> li a1, 181 %
00000054 : 06900613;   % 165: <27> li a2, 105 %
00000055 : 06800893;   % 165: <28> li a7, 104 %
00000056 : 00000073;   % 165: <29> ecall %
00000057 : 00c28293;   % 168: addi t0,t0,12	# %
00000058 : 00100513;   % 170: li a0, 1	# no menu %
00000059 : 09100593;   % 171: li a1, 145	# %
0000005a : 08900613;   % 172: li a2, 137	# %
0000005b : 00700693;   % 173: li a3, 7	# %
0000005c : 0002a303;   % 174: lw t1,0(t0)	# %
0000005d : 006686b3;   % 175: add a3, a3, t1	# %
0000005e : 06500893;   % 176: li a7, 101	# %
0000005f : 00000073;   % 177: ecall		# %
00000060 : 00200513;   % 179: li a0, 2	# %
00000061 : 0ac00593;   % 180: li a1, 172	# %
00000062 : 08900613;   % 181: li a2, 137	# %
00000063 : 0c000693;   % 182: li a3, 0xc0	# %
00000064 : 0042a303;   % 183: lw t1,4(t0)	# %
00000065 : 006686b3;   % 184: add a3, a3, t1	# %
00000066 : 06500893;   % 185: li a7, 101	# %
00000067 : 00000073;   % 186: ecall		# %
00000068 : ec1ff06f;   % 188: j menu_loop	# loop do menu %
00000069 : 0fc10297;   % 194: la t0, difficult		# %
0000006a : ef428293;   % 194:  %
0000006b : 0002a283;   % 195: lw t0,0(t0)			# imprime dificuldade no canto %
0000006c : 02029263;   % 197: bne t0,zero,top_not_easy	# %
0000006d : 0fc10517;   % 198: la a0, facil			# %
0000006e : ec750513;   % 198:  %
0000006f : 03300693;   % 199: li a3, 0x33			# %
00000070 : 08a00593;   % 200: <26> li a1, 138 %
00000071 : 01c00613;   % 200: <27> li a2, 28 %
00000072 : 06800893;   % 200: <28> li a7, 104 %
00000073 : 00000073;   % 200: <29> ecall %
00000074 : 0480006f;   % 201: j end_top_string		# %
00000075 : 00100313;   % 204: li t1, 1			# %
00000076 : 02629263;   % 206: bne t0, t1,top_hard	# %
00000077 : 0fc10517;   % 207: la a0, medio			# %
00000078 : ea550513;   % 207:  %
00000079 : 07700693;   % 208: li a3, 0x77			# %
0000007a : 08a00593;   % 209: <26> li a1, 138 %
0000007b : 01c00613;   % 209: <27> li a2, 28 %
0000007c : 06800893;   % 209: <28> li a7, 104 %
0000007d : 00000073;   % 209: <29> ecall %
0000007e : 0200006f;   % 210: j end_top_string		# %
0000007f : 0fc10517;   % 213: la a0, dificil			# %
00000080 : e8b50513;   % 213:  %
00000081 : 00600693;   % 214: li a3, 0x6			# %
00000082 : 08200593;   % 215: <26> li a1, 130 %
00000083 : 01c00613;   % 215: <27> li a2, 28 %
00000084 : 06800893;   % 215: <28> li a7, 104 %
00000085 : 00000073;   % 215: <29> ecall %
00000086 : 00000493;   % 218: li s1, 0  # turno %
00000087 : 05900513;   % 220: <15> li a0, 89 %
00000088 : 02500593;   % 220: <16> li a1, 37 %
00000089 : 02600613;   % 220: <17> li a2, 38 %
0000008a : 11900693;   % 220: <18> li a3, 281 %
0000008b : 0c800713;   % 220: <19> li a4, 200 %
0000008c : 574000ef;   % 220: <20> jal rectangle %
0000008d : 05900513;   % 222: <4> li a0, 89 %
0000008e : 01100593;   % 222: <5> li a1, 17 %
0000008f : 0c800613;   % 222: <6> li a2, 200 %
00000090 : 01500693;   % 222: <7> li a3, 21 %
00000091 : 4e4000ef;   % 222: <8> jal circle %
00000092 : 05900513;   % 223: <4> li a0, 89 %
00000093 : 10100593;   % 223: <5> li a1, 257 %
00000094 : 0c800613;   % 223: <6> li a2, 200 %
00000095 : 01500693;   % 223: <7> li a3, 21 %
00000096 : 4d0000ef;   % 223: <8> jal circle %
00000097 : 00000513;   % 224: <15> li a0, 0 %
00000098 : 02500593;   % 224: <16> li a1, 37 %
00000099 : 0c900613;   % 224: <17> li a2, 201 %
0000009a : 03c00693;   % 224: <18> li a3, 60 %
0000009b : 0f000713;   % 224: <19> li a4, 240 %
0000009c : 534000ef;   % 224: <20> jal rectangle %
0000009d : 00000513;   % 225: <15> li a0, 0 %
0000009e : 10200593;   % 225: <16> li a1, 258 %
0000009f : 0c900613;   % 225: <17> li a2, 201 %
000000a0 : 11800693;   % 225: <18> li a3, 280 %
000000a1 : 0f000713;   % 225: <19> li a4, 240 %
000000a2 : 51c000ef;   % 225: <20> jal rectangle %
000000a3 : 00000293;   % 229: li t0, 0	# %
000000a4 : 00800313;   % 230: li t1, 8	# imprime no jogo numeros de %
000000a5 : 03100513;   % 232: li a0, 49	# eh relativa a cada jogada %
000000a6 : 03200593;   % 233: li a1, 50	# %
000000a7 : 0cf00613;   % 234: li a2, 207	# %
000000a8 : 07700693;   % 235: li a3, 0x77	# %
000000a9 : 00000713;   % 236: li a4, 0	# %
000000aa : 06f00893;   % 237: li a7, 111	# %
000000ab : 00628c63;   % 238: key_tip: beq t0, t1, end_key_tip # %
000000ac : 00000073;   % 239: ecall		# %
000000ad : 01e58593;   % 240: addi a1, a1, 30	# %
000000ae : 00128293;   % 241: addi t0, t0, 1	# %
000000af : 00150513;   % 242: addi a0, a0, 1	# %
000000b0 : fedff06f;   % 243: j key_tip	# %
000000b1 : 0fc10517;   % 247: la a0, board		# imprime pecas no tabuleiro %
000000b2 : e0850513;   % 247:  %
000000b3 : 534000ef;   % 248: jal print_board		# %
000000b4 : 00048e63;   % 254: beq s1,zero,if_turn_circle	# %
000000b5 : 0c000513;   % 255: <4> li a0, 0xc0 %
000000b6 : 09600593;   % 255: <5> li a1, 150 %
000000b7 : 00700613;   % 255: <6> li a2, 7 %
000000b8 : 00600693;   % 255: <7> li a3, 6 %
000000b9 : 444000ef;   % 255: <8> jal circle %
000000ba : 0180006f;   % 256: j end_turn_circle		# circulo no canto superior do jogo %
000000bb : 00700513;   % 258: <4> li a0, 7 %
000000bc : 09600593;   % 258: <5> li a1, 150 %
000000bd : 00700613;   % 258: <6> li a2, 7 %
000000be : 00600693;   % 258: <7> li a3, 6 %
000000bf : 42c000ef;   % 258: <8> jal circle %
000000c0 : 0fc10297;   % 261: la t0, color		# %
000000c1 : d9c28293;   % 261:  %
000000c2 : 0002a283;   % 262: lw t0,0(t0)		# checa se eh vez do player ou ia %
000000c3 : 16548863;   % 263: beq s1, t0, get_key	# %
000000c4 : fe810113;   % 268: addi sp,sp,-24 %
000000c5 : 00812023;   % 269: sw s0,0(sp) %
000000c6 : 00912223;   % 270: sw s1,4(sp) %
000000c7 : 01212423;   % 271: sw s2,8(sp) %
000000c8 : 01312623;   % 272: sw s3,12(sp) %
000000c9 : 01412823;   % 273: sw s4,16(sp) %
000000ca : 01512a23;   % 274: sw s5,20(sp) %
000000cb : c0002473;   % 276: rdcycle s0 %
000000cc : c02024f3;   % 277: rdinstret s1 %
000000cd : c0102973;   % 278: rdtime s2 %
000000ce : 0fc10297;   % 282: la t0, difficult	# checa dificuldade %
000000cf : d6028293;   % 282:  %
000000d0 : 0002a283;   % 283: lw t0,0(t0)		# %
000000d1 : 00000313;   % 285: li t1, 0 %
000000d2 : 00628a63;   % 286: beq t0,t1, easy	        # Checa se esta no facil %
000000d3 : 00100313;   % 288: li t1, 1 %
000000d4 : 00628a63;   % 289: beq t0, t1,normal       # Checa se esta no dificil %
000000d5 : 00200313;   % 291: li t1, 2 %
000000d6 : 02628263;   % 292: beq t0, t1, hard %
000000d7 : 295000ef;   % 296: easy:   jal easy_mode		# Facil %
000000d8 : 0300006f;   % 297:         j end_ai_command	        # %
000000d9 : 0fc10517;   % 299: normal: la a0, board		# medio %
000000da : d6850513;   % 299:  %
000000db : 0fc10597;   % 300:         la a1, color		# %
000000dc : d3058593;   % 300:  %
000000dd : 34d000ef;   % 301:         jal normal_mode		# %
000000de : 0180006f;   % 302:         j end_ai_command	#	         %
000000df : 0fc10517;   % 304: hard:   la a0, board	        # Dificil %
000000e0 : d5050513;   % 304:  %
000000e1 : 0fc10597;   % 305:         la a1, color		# %
000000e2 : d1858593;   % 305:  %
000000e3 : 3c1000ef;   % 306:         jal hard_mode		# %
000000e4 : c0102af3;   % 313: rdtime s5 %
000000e5 : c0202a73;   % 314: rdinstret s4 %
000000e6 : c00029f3;   % 315: rdcycle s3 %
000000e7 : ff410113;   % 317: addi sp,sp,-12 %
000000e8 : 00a12023;   % 318: sw a0,0(sp) %
000000e9 : 00b12223;   % 319: sw a1,4(sp) %
000000ea : 00c12423;   % 320: sw a2,8(sp) %
000000eb : 40898433;   % 322: sub s0,s3,s0 %
000000ec : d0047053;   % 323: fcvt.s.w ft0,s0		# ciclos %
000000ed : 409a04b3;   % 324: sub s1,s4,s1 %
000000ee : d004f0d3;   % 325: fcvt.s.w ft1,s1		# instrucoes %
000000ef : 412a8933;   % 326: sub s2,s5,s2 %
000000f0 : d0097153;   % 327: fcvt.s.w ft2,s2	 	# tempo %
000000f1 : 0fc10517;   % 330: la a0,freq %
000000f2 : c8c50513;   % 330:  %
000000f3 : 00052507;   % 331: flw fa0,0(a0) %
000000f4 : 0fc10517;   % 332: la a0,FREQ %
000000f5 : c3050513;   % 332:  %
000000f6 : 00200593;   % 333: li a1,2 %
000000f7 : 18207553;   % 334: fdiv.s fa0,ft0,ft2	# Frequencia %
000000f8 : 20a501d3;   % 335: fmv.s ft3,fa0 %
000000f9 : 419000ef;   % 336: jal print_float %
000000fa : 0fc10517;   % 339: la a0,CICL %
000000fb : c2650513;   % 339:  %
000000fc : 00c00593;   % 340: li a1,12 %
000000fd : 00800633;   % 341: mv a2,s0	# Ciclos %
000000fe : 429000ef;   % 342: jal print_int %
000000ff : 0fc10517;   % 344: la a0,INST %
00000100 : c1c50513;   % 344:  %
00000101 : 01600593;   % 345: li a1,22 %
00000102 : 00900633;   % 346: mv a2,s1	# Instrucoes %
00000103 : 415000ef;   % 347: jal print_int %
00000104 : 0fc10517;   % 349: la a0,TEMED %
00000105 : c1650513;   % 349:  %
00000106 : 02000593;   % 350: li a1,32 %
00000107 : 20210553;   % 351: fmv.s fa0,ft2		# tempo exec exec em ms %
00000108 : 3dd000ef;   % 352: jal print_float %
00000109 : 0fc10517;   % 354: la a0,CPI %
0000010a : c1250513;   % 354:  %
0000010b : 02a00593;   % 355: li a1,42 %
0000010c : 18107553;   % 356: fdiv.s fa0,ft0,ft1	#CPI %
0000010d : 3c9000ef;   % 357: jal print_float %
0000010e : 0fc10517;   % 360: la a0,TECALC %
0000010f : c0550513;   % 360:  %
00000110 : 03400593;   % 361: li a1,52 %
00000111 : 18307553;   % 362: fdiv.s fa0,ft0,ft3	# tempo medido em ms %
00000112 : 3b5000ef;   % 363: jal print_float %
00000113 : 00012503;   % 365: lw a0,0(sp) %
00000114 : 00412583;   % 366: lw a1,4(sp) %
00000115 : 00812603;   % 367: lw a2,8(sp) %
00000116 : 00c10113;   % 368: addi sp,sp,12 %
00000117 : 00012403;   % 370: lw s0,0(sp) %
00000118 : 00412483;   % 371: lw s1,4(sp) %
00000119 : 00812903;   % 372: lw s2,8(sp) %
0000011a : 00c12983;   % 373: lw s3,12(sp) %
0000011b : 01012a03;   % 374: lw s4,16(sp) %
0000011c : 01412a83;   % 375: lw s5,20(sp) %
0000011d : 01810113;   % 376: addi sp,sp,24 %
0000011e : 0180006f;   % 383: j end_turn	# fim do turno da ia %
0000011f : 28c000ef;   % 386: 	jal key			# %
00000120 : 00a00433;   % 387: 	mv s0, a0		# input do jogador %
00000121 : fcf50513;   % 388:         addi    a0,a0,-49	# %
00000122 : 00700293;   % 389:         li      t0,7		# %
00000123 : fea2e8e3;   % 390:         bgtu    a0,t0,get_key	# %
00000124 : 0fc10297;   % 396: la t0, y	# salva y %
00000125 : c3028293;   % 396:  %
00000126 : 00a2a023;   % 397: sw a0,0(t0)	# %
00000127 : 00a005b3;   % 399: mv a1, a0		# %
00000128 : 0fc10517;   % 400: la a0,board		# %
00000129 : c2c50513;   % 400:  %
0000012a : 0fc10617;   % 401: la a2,current_color	# adiciona peca do tabuleiro %
0000012b : c1c60613;   % 401:  %
0000012c : 00062603;   % 402: lw a2,0(a2)		# %
0000012d : 524000ef;   % 404: jal add_element		# %
0000012e : 0fc10297;   % 406: la t0, x	# salva x %
0000012f : c0428293;   % 406:  %
00000130 : 00a2a023;   % 407: sw a0,0(t0)	# %
00000131 : 0fc10517;   % 409: la a0,board	# jogo empatado? %
00000132 : c0850513;   % 409:  %
00000133 : 5bc000ef;   % 410: jal game_draw	# %
00000134 : 0fc10597;   % 412: 	la a1, winner %
00000135 : bf858593;   % 412:  %
00000136 : 00050663;   % 413:         beq     a0,zero,if_game_draw # if (game_draw(board)){ %
00000137 : 0005a023;   % 414:         sw      zero,0(a1)	      #    winner = 0; %
00000138 : 0940006f;   % 415:         j end			      #	break;} %
00000139 : 0fc10517;   % 418: 	la a0, board	# %
0000013a : be850513;   % 418:  %
0000013b : 0fc10297;   % 420: 	la t0, x	# %
0000013c : bd028293;   % 420:  %
0000013d : 0002a583;   % 421: 	lw a1, 0(t0)	#  jogo ganho? %
0000013e : 0042a603;   % 423: 	lw a2, 4(t0)	# %
0000013f : 059000ef;   % 425: 	jal game_won	# %
00000140 : 0fc10597;   % 427: 	la a1, current_color		# %
00000141 : bc458593;   % 427:  %
00000142 : 0fc10617;   % 428: 	la a2, winner			# if (game_won(board, x, y)){ %
00000143 : bc060613;   % 428:  %
00000144 : 00050863;   % 429:         beq     a0,zero,if_game_won	#    winner = current_color; %
00000145 : 0005a283;   % 430:         lw      t0,0(a1)		#    break;} %
00000146 : 00562023;   % 431:         sw      t0,0(a2)		# %
00000147 : 0580006f;   % 432:         j end				# %
00000148 : 0fc10297;   % 435: 	la t0, x		# salva x %
00000149 : b9c28293;   % 435:  %
0000014a : 0002a503;   % 436: 	lw a0,0(t0)		# %
0000014b : 0fc10597;   % 438: 	la a1, current_color	# %
0000014c : b9858593;   % 438:  %
0000014d : fff00293;   % 439:         li      t0,-1		# %
0000014e : 02550063;   % 440:         beq     a0,t0,next_color # ajusta valores para fim de jogo %
0000014f : 0005a283;   % 441:         lw      t0,0(a1)	# %
00000150 : 01f2d313;   % 442:         srli    t1,t0,31	# %
00000151 : 006282b3;   % 443:         add     t0,t0,t1	# %
00000152 : 0012f293;   % 444:         andi    t0,t0,1		# %
00000153 : 406282b3;   % 445:         sub     t0,t0,t1	# %
00000154 : 00128293;   % 446:         addi    t0,t0,1		# %
00000155 : 0055a023;   % 447:         sw      t0,0(a1)	# %
00000156 : 0fc10297;   % 451: la t0, x		# %
00000157 : b6428293;   % 451:  %
00000158 : 0002a283;   % 452: lw t0,0(t0)		# se terminou o turno, muda de turno %
00000159 : fff00313;   % 453: li t1,-1		# e vai para o loop principal %
0000015a : d66284e3;   % 454: beq t0,t1,main_loop	# %
0000015b : 0014c493;   % 456: xori s1,s1, 1		# %
0000015c : d61ff06f;   % 457: j main_loop		# %
0000015d : 6d600513;   % 462: li a0, 1750	# %
0000015e : 02000893;   % 463: li a7, 32	# sleep de a0 segundos %
0000015f : 00000073;   % 464: ecall		# %
00000160 : 00000513;   % 466: <15> li a0, 0 %
00000161 : 00000593;   % 466: <16> li a1, 0 %
00000162 : 00000613;   % 466: <17> li a2, 0 %
00000163 : 14000693;   % 466: <18> li a3, 320 %
00000164 : 0f000713;   % 466: <19> li a4, 240 %
00000165 : 210000ef;   % 466: <20> jal rectangle %
00000166 : 0fc10517;   % 468: la a0, winner	# %
00000167 : b3050513;   % 468:  %
00000168 : 00052503;   % 469: lw a0, 0 (a0)	# a0 = ganhador %
00000169 : 00000713;   % 470: li a4, 0	# %
0000016a : 00a006b3;   % 472: mv a3,a0			# %
0000016b : 00100293;   % 473:         li      t0,1		# imprime mensagem de quem %
0000016c : 00d00333;   % 474:         mv      t1,a3		# ganhou o jogo/empate %
0000016d : 02568863;   % 475:         beq     a3,t0,colorL1	# %
0000016e : 00200293;   % 476:         li      t0,2		# %
0000016f : 0c000693;   % 477:         li      a3,0x00c0	# %
00000170 : 02530463;   % 478:         beq     t1,t0,colorL2	# %
00000171 : 0ff00693;   % 479:         li      a3,0x00ff	# %
00000172 : 08900593;   % 480:         li a1, 137		# %
00000173 : 07900613;   % 481: 	li a2, 121		# %
00000174 : 0fc10517;   % 482: 	la a0, draw		# %
00000175 : a8450513;   % 482:  %
00000176 : 06800893;   % 483: 	li a7, 104		# %
00000177 : 00000073;   % 484: 	ecall			# %
00000178 : 0440006f;   % 485:         j endColor		# %
00000179 : 00700693;   % 487:         li      a3,0x0007	# %
0000017a : 09d00593;   % 489: 	li a1, 157		# %
0000017b : 07900613;   % 490: 	li a2, 121		# %
0000017c : 06500893;   % 491: 	li a7, 101		# %
0000017d : 00000073;   % 492: 	ecall			# %
0000017e : 0fc10517;   % 494: 	la a0, player		# %
0000017f : a6350513;   % 494:  %
00000180 : 08500593;   % 495: 	li a1, 133		# %
00000181 : 07100613;   % 496: 	li a2, 113		# %
00000182 : 06800893;   % 497: 	li a7, 104		# %
00000183 : 00000073;   % 498: 	ecall			# %
00000184 : 0fc10517;   % 500: 	la a0, won		# %
00000185 : a5350513;   % 500:  %
00000186 : 08500593;   % 501: 	li a1, 133		# %
00000187 : 08100613;   % 502: 	li a2, 129		# %
00000188 : 00000073;   % 503: 	ecall			# %
00000189 : 0e4000ef;   % 508: jal key				# espera tecla para fechar jogo %
0000018a : 00051463;   % 509: bne a0, zero, end_loop_screen	# %
0000018b : ff9ff06f;   % 510: j loop_end_screen		# %
0000018c : 00000513;   % 514: <15> li a0, 0 %
0000018d : 08300593;   % 514: <16> li a1, 131 %
0000018e : 06f00613;   % 514: <17> li a2, 111 %
0000018f : 0bc00693;   % 514: <18> li a3, 188 %
00000190 : 08900713;   % 514: <19> li a4, 137 %
00000191 : 160000ef;   % 514: <20> jal rectangle %
00000192 : 00a00893;   % 515: li a7,10	# encerra programa %
00000193 : 00000073;   % 516: ecall		# %
00000194 : 06100793;   % 521:         li      a5,97		#  itera o menu %
00000195 : 06f50a63;   % 522:         beq     a0,a5,IM6	# %
00000196 : 06400793;   % 523:         li      a5,100		# %
00000197 : 00f50a63;   % 524:         beq     a0,a5,IM8	# %
00000198 : ffb57513;   % 525:         andi    a0,a0,-5	# %
00000199 : 07300793;   % 526:         li      a5,115		# %
0000019a : 04f50863;   % 527:         beq     a0,a5,IM9	# %
0000019b : 00008067;   % 528:         ret			# %
0000019c : 0005c583;   % 530:         lbu     a1,0(a1)	# %
0000019d : 00100793;   % 531:         li      a5,1		# %
0000019e : 04058e63;   % 532:         beq     a1,zero,IM4	# %
0000019f : 00472583;   % 534:         lw      a1,4(a4)	# %
000001a0 : 00158613;   % 535:         addi    a2,a1,1		# %
000001a1 : 01f65513;   % 536:         srli    a0,a2,31	# %
000001a2 : 00a607b3;   % 537:         add     a5,a2,a0	# %
000001a3 : 00259593;   % 538:         slli    a1,a1,2		# %
000001a4 : 00b68633;   % 539:         add     a2,a3,a1	# %
000001a5 : 0017f793;   % 540:         andi    a5,a5,1		# %
000001a6 : 00062583;   % 541:         lw      a1,0(a2)	# %
000001a7 : 40a787b3;   % 542:         sub     a5,a5,a0	# %
000001a8 : 00279513;   % 543:         slli    a0,a5,2		# %
000001a9 : 00a686b3;   % 544:         add     a3,a3,a0	# %
000001aa : 00b6a023;   % 545:         sw      a1,0(a3)	# %
000001ab : 00062023;   % 546:         sw      zero,0(a2)	# %
000001ac : 00f72223;   % 547:         sw      a5,4(a4)	# %
000001ad : 00008067;   % 548:         ret			# %
000001ae : 0005c783;   % 550:         lbu     a5,0(a1)	# %
000001af : 0017c793;   % 551:         xori    a5,a5,1		# %
000001b0 : 00f58023;   % 552:         sb      a5,0(a1)	# %
000001b1 : 00008067;   % 553:         ret			# %
000001b2 : 0005c583;   % 555:         lbu     a1,0(a1)	# %
000001b3 : 00200793;   % 556:         li      a5,2		# %
000001b4 : fa0596e3;   % 557:         bne     a1,zero,IM10	# %
000001b5 : 00072683;   % 559:         lw      a3,0(a4)	# %
000001b6 : 00300593;   % 560:         li      a1,3		# %
000001b7 : 00d787b3;   % 561:         add     a5,a5,a3	# %
000001b8 : 02b7e7b3;   % 562:         rem     a5,a5,a1	# %
000001b9 : 00269693;   % 563:         slli    a3,a3,2		# %
000001ba : 00d606b3;   % 564:         add     a3,a2,a3	# %
000001bb : 0006a583;   % 565:         lw      a1,0(a3)	# %
000001bc : 00279513;   % 566:         slli    a0,a5,2		# %
000001bd : 00a60633;   % 567:         add     a2,a2,a0	# %
000001be : 00b62023;   % 568:         sw      a1,0(a2)	# %
000001bf : 0006a023;   % 569:         sw      zero,0(a3)	# %
000001c0 : 00f72023;   % 570:         sw      a5,0(a4)	# %
000001c1 : 00008067;   % 571:         ret %
000001c2 : ff200337;   % 573: key:	li t1,0xFF200000		#  %
000001c3 : 00030313;   % 573:  %
000001c4 : 00032283;   % 574: 	lw t0,0(t1)			#  %
000001c5 : 0012f293;   % 575: 	andi t0,t0,0x0001		# Copiei do exemplo mesmo %
000001c6 : 00028663;   % 576:    	beq t0,zero,fim  	   	# pode denunciar %
000001c7 : 00432503;   % 577:   	lw a0,4(t1)  			#  %
000001c8 : 00a32623;   % 578: 	sw a0,12(t1)  			#  %
000001c9 : 00008067;   % 579: fim:	ret	 %
000001ca : 00169793;   % 582:         slli    a5,a3,1		##	   codigo original em c %
000001cb : 00f58f33;   % 583:         add     t5,a1,a5	## %
000001cc : 00b00333;   % 584:         mv      t1,a1		## void circle(int color, int x, %
000001cd : 06bf4663;   % 585:         bgt     a1,t5,.L1	##  int y, int r){ %
000001ce : 00f607b3;   % 586:         add     a5,a2,a5	## %
000001cf : 02d688b3;   % 587:         mul     a7,a3,a3	##    unsigned char *Frame, *aux; %
000001d0 : 06c7c063;   % 588:         bgt     a2,a5,.L1	##    Frame = (unsigned char *) VGA_ADDRESS; %
000001d1 : 00261e93;   % 589:         slli    t4,a2,2		## %
000001d2 : 00ce8eb3;   % 590:         add     t4,t4,a2	##     for (int i = x; i <= x+2*r; i++){ %
000001d3 : 006e9e93;   % 591:         slli    t4,t4,6		##        for (int j = y; j <= y+2*r; j++){ %
000001d4 : ff000737;   % 592:         li      a4,-16777216	##             if (((x+r-i)*(x+r-i) + (y+r-j)*(y+r-j)) < r*r){ %
000001d5 : 00070713;   % 592:  %
000001d6 : 001f0f13;   % 593:         addi    t5,t5,1		##                aux = Frame + (i + j*320); %
000001d7 : 00d58fb3;   % 594:         add     t6,a1,a3	## 	            *aux = color; %
000001d8 : 00ee8eb3;   % 595:         add     t4,t4,a4	##             } %
000001d9 : 40d78e33;   % 596:         sub     t3,a5,a3	##         } %
000001da : fff6c813;   % 597:         not     a6,a3		##     } %
000001db : 406f85b3;   % 599:         sub     a1,t6,t1	## %
000001dc : 02b585b3;   % 600:         mul     a1,a1,a1	## %
000001dd : 40ce07b3;   % 601:         sub     a5,t3,a2	## %
000001de : 006e86b3;   % 602:         add     a3,t4,t1	## %
000001df : 02f78733;   % 604:         mul     a4,a5,a5	## %
000001e0 : fff78793;   % 605:         addi    a5,a5,-1	## %
000001e1 : 00b70733;   % 606:         add     a4,a4,a1	## %
000001e2 : 01175463;   % 607:         bge     a4,a7,.L6	## %
000001e3 : 00a68023;   % 608:         sb      a0,0(a3)	## %
000001e4 : 14068693;   % 610:         addi    a3,a3,320	## %
000001e5 : ff0794e3;   % 611:         bne     a5,a6,.L4	## %
000001e6 : 00130313;   % 612:         addi    t1,t1,1		## %
000001e7 : fde318e3;   % 613:         bne     t1,t5,.L7	## %
000001e8 : 00008067;   % 615:         ret			## %
000001e9 : 04b6cc63;   % 618:         bgt     a1,a3,.L10	##	   codigo original em c %
000001ea : 04c74a63;   % 619:         bgt     a2,a4,.L10	## %
000001eb : 00261793;   % 620:         slli    a5,a2,2		## void rectangle(int color, int x_lower, %
000001ec : 00170893;   % 621:         addi    a7,a4,1		##  int y_lower, int x_upper, int y_upper){ %
000001ed : ff000337;   % 622:         li      t1,-16777216	## %
000001ee : 00030313;   % 622:  %
000001ef : 00c78633;   % 623:         add     a2,a5,a2	##    unsigned char *Frame, *aux; %
000001f0 : 00661613;   % 624:         slli    a2,a2,6		##    Frame = (unsigned char *) VGA_ADDRESS; %
000001f1 : 00130713;   % 625:         addi    a4,t1,1		## %
000001f2 : 00289813;   % 626:         slli    a6,a7,2		##    for (int i = x_lower; i <= x_upper; i++){ %
000001f3 : 00e60733;   % 627:         add     a4,a2,a4	##         for (int j = y_lower; j <= y_upper; j++){ %
000001f4 : 01180833;   % 628:         add     a6,a6,a7	##             aux = Frame + (i + j*320); %
000001f5 : 00d70733;   % 629:         add     a4,a4,a3	## 	        *aux = color; %
000001f6 : 00681813;   % 630:         slli    a6,a6,6		##        } %
000001f7 : 006586b3;   % 631:         add     a3,a1,t1	##     } %
000001f8 : 00c687b3;   % 633:         add     a5,a3,a2	## %
000001f9 : 00a78023;   % 635:         sb      a0,0(a5)	## %
000001fa : 00178793;   % 636:         addi    a5,a5,1		## %
000001fb : fee79ce3;   % 637:         bne     a5,a4,.L13	## %
000001fc : 14060613;   % 638:         addi    a2,a2,320	## %
000001fd : 14070713;   % 639:         addi    a4,a4,320	## %
000001fe : ff0614e3;   % 640:         bne     a2,a6,.L15	## %
000001ff : 00008067;   % 642:         ret			## %
00000200 : fd010113;   % 645:         addi    sp,sp,-48	##	   codigo original em c %
00000201 : 03212023;   % 646:         sw      s2,32(sp)	## %
00000202 : 01312e23;   % 647:         sw      s3,28(sp)	## void print_board(int board[8][8]){ %
00000203 : 01412c23;   % 648:         sw      s4,24(sp)	##     int x = 45, y = 43; %
00000204 : 01512a23;   % 649:         sw      s5,20(sp)	##     for (int i = 0; i < 8; i++){ %
00000205 : 01612823;   % 650:         sw      s6,16(sp)	##         for (int j = 0; j < 8; j++){ %
00000206 : 01712623;   % 651:         sw      s7,12(sp)	##             switch (board[i][j]){ %
00000207 : 02112623;   % 652:         sw      ra,44(sp)	##                  case 1: %
00000208 : 02812423;   % 653:         sw      s0,40(sp)	##                     circle(6, x+30*i, y+20*j, 8); %
00000209 : 02912223;   % 654:         sw      s1,36(sp)	##                     break; %
0000020a : 00a00b33;   % 655:         mv      s6,a0		##                 case 2: %
0000020b : 02d00913;   % 656:         li      s2,45		##                     circle(192, x+30*i, y+20*j, 8); %
0000020c : 00100a93;   % 657:         li      s5,1		##                     break; %
0000020d : 00200a13;   % 658:         li      s4,2		##                default: %
0000020e : 0cb00993;   % 659:         li      s3,203		##                   circle(0, x+30*i, y+20*j, 8); %
0000020f : 11d00b93;   % 660:         li      s7,285		##             } %
00000210 : 016004b3;   % 662:         mv      s1,s6		##     } %
00000211 : 02b00413;   % 663:         li      s0,43		## } %
00000212 : 0280006f;   % 664:         j       .L22		## %
00000213 : 0c000513;   % 666:         li      a0,192		## %
00000214 : 01478663;   % 667:         beq     a5,s4,.L28	## %
00000215 : 00800693;   % 668:         li      a3,8		## %
00000216 : 00000513;   % 669:         li      a0,0		## %
00000217 : 01440413;   % 671:         addi    s0,s0,20	## %
00000218 : 00000317;   % 672:         call    circle		## %
00000219 : ec8300e7;   % 672:  %
0000021a : 00448493;   % 673:         addi    s1,s1,4		## %
0000021b : 03340863;   % 674:         beq     s0,s3,.L29	## %
0000021c : 0004a783;   % 676:         lw      a5,0(s1)	## %
0000021d : 00800693;   % 677:         li      a3,8		## %
0000021e : 00800633;   % 678:         mv      a2,s0		## %
0000021f : 012005b3;   % 679:         mv      a1,s2		## %
00000220 : fd5796e3;   % 680:         bne     a5,s5,.L30	## %
00000221 : 00600513;   % 681:         li      a0,6		## %
00000222 : 01440413;   % 682:         addi    s0,s0,20	## %
00000223 : 00000317;   % 683:         call    circle		## %
00000224 : e9c300e7;   % 683:  %
00000225 : 00448493;   % 684:         addi    s1,s1,4		## %
00000226 : fd341ce3;   % 685:         bne     s0,s3,.L22	## %
00000227 : 01e90913;   % 687:         addi    s2,s2,30	## %
00000228 : 020b0b13;   % 688:         addi    s6,s6,32	## %
00000229 : f9791ee3;   % 689:         bne     s2,s7,.L23	## %
0000022a : 02c12083;   % 690:         lw      ra,44(sp)	## %
0000022b : 02812403;   % 691:         lw      s0,40(sp)	## %
0000022c : 02412483;   % 692:         lw      s1,36(sp)	## %
0000022d : 02012903;   % 693:         lw      s2,32(sp)	## %
0000022e : 01c12983;   % 694:         lw      s3,28(sp)	## %
0000022f : 01812a03;   % 695:         lw      s4,24(sp)	## %
00000230 : 01412a83;   % 696:         lw      s5,20(sp)	## %
00000231 : 01012b03;   % 697:         lw      s6,16(sp)	## %
00000232 : 00c12b83;   % 698:         lw      s7,12(sp)	## %
00000233 : 03010113;   % 699:         addi    sp,sp,48	## %
00000234 : 00008067;   % 700:         jr      ra		## %
00000235 : fe010113;   % 704:         addi    sp,sp,-32	##	   codigo original em c  %
00000236 : 01312623;   % 705:         sw      s3,12(sp)	## %
00000237 : 01412423;   % 706:         sw      s4,8(sp)	## int animation(int x, int y, int color){ %
00000238 : 00112e23;   % 707:         sw      ra,28(sp)	##	    int new_color; %
00000239 : 00812c23;   % 708:         sw      s0,24(sp)	##	    switch (color){ %
0000023a : 00912a23;   % 709:         sw      s1,20(sp)	##                 case 1:	 %
0000023b : 01212823;   % 710:         sw      s2,16(sp)	##                     new_color = 6; %
0000023c : 00100793;   % 711:         li      a5,1		##                    break; %
0000023d : 00b009b3;   % 712:         mv      s3,a1		##                 case 2: %
0000023e : 00600a13;   % 713:         li      s4,6		##                     new_color = 192; %
0000023f : 00f60a63;   % 714:         beq     a2,a5,.L11	##                     break; %
00000240 : 00200793;   % 715:         li      a5,2		##                 default: %
00000241 : 00000a13;   % 716:         li      s4,0		##                     new_color = 0; %
00000242 : 00f61463;   % 717:         bne     a2,a5,.L11	##     } %
00000243 : 0c000a13;   % 718:         li      s4,192		## %
00000244 : 00451913;   % 720:         slli    s2,a0,4		##         circle(new_color, 45+30*x, 43+20*i, 8); %
00000245 : 40a90933;   % 721:         sub     s2,s2,a0	##         sleep(100); %
00000246 : 00191913;   % 722:         slli    s2,s2,1		##         circle(0, 45+30*x, 43+20*i, 8); %
00000247 : 02d90913;   % 723:         addi    s2,s2,45	##     } %
00000248 : 02b00413;   % 724:         li      s0,43		##     circle(new_color, 45+30*x, 43+20*y, 8); %
00000249 : 00000493;   % 725:         li      s1,0		##     return 0; %
0000024a : 05305863;   % 726:         ble     s3,zero,.AL13	## } %
0000024b : 00800633;   % 728:         mv      a2,s0		## %
0000024c : 00800693;   % 729:         li      a3,8		## %
0000024d : 012005b3;   % 730:         mv      a1,s2		## %
0000024e : 01400533;   % 731:         mv      a0,s4		## %
0000024f : 00000317;   % 732:         call    circle		## %
00000250 : dec300e7;   % 732:  %
00000251 : 06400513;   % 733:         li      a0,100		## %
00000252 : 03200513;   % 734:         li      a0,50		## %
00000253 : 02000893;   % 735:         li a7,32		## %
00000254 : 00000073;   % 736:         ecall			## %
00000255 : 00800633;   % 737:         mv      a2,s0		## %
00000256 : 00800693;   % 738:         li      a3,8		## %
00000257 : 012005b3;   % 739:         mv      a1,s2		## %
00000258 : 00000513;   % 740:         li      a0,0		## %
00000259 : 00148493;   % 741:         addi    s1,s1,1		## %
0000025a : 00000317;   % 742:         call    circle		## %
0000025b : dc0300e7;   % 742:  %
0000025c : 01440413;   % 743:         addi    s0,s0,20	## %
0000025d : fa999ce3;   % 744:         bne     s3,s1,.L12	## %
0000025e : 00299613;   % 746:         slli    a2,s3,2		## %
0000025f : 01360633;   % 747:         add     a2,a2,s3	## %
00000260 : 00261613;   % 748:         slli    a2,a2,2		## %
00000261 : 01400533;   % 749:         mv      a0,s4		## %
00000262 : 012005b3;   % 750:         mv      a1,s2		## %
00000263 : 00800693;   % 751:         li      a3,8		## %
00000264 : 02b60613;   % 752:         addi    a2,a2,43	## %
00000265 : 00000317;   % 753:         call    circle		## %
00000266 : d94300e7;   % 753:  %
00000267 : 01c12083;   % 754:         lw      ra,28(sp)	## %
00000268 : 01812403;   % 755:         lw      s0,24(sp)	## %
00000269 : 01412483;   % 756:         lw      s1,20(sp)	## %
0000026a : 01012903;   % 757:         lw      s2,16(sp)	## %
0000026b : 00c12983;   % 758:         lw      s3,12(sp)	## %
0000026c : 00812a03;   % 759:         lw      s4,8(sp)	## %
0000026d : 00000513;   % 760:         li      a0,0		## %
0000026e : 02010113;   % 761:         addi    sp,sp,32	## %
0000026f : 03e00513;   % 763:         li a0, 62		## %
00000270 : 06400593;   % 764: 	li a1, 100		## %
00000271 : 07300613;   % 765: 	li a2, 115		## %
00000272 : 06400693;   % 766: 	li a3, 100		## %
00000273 : 01f00893;   % 767: 	li a7, 31		## %
00000274 : 00000073;   % 768: 	ecall			## %
00000275 : 00008067;   % 770:         jr      ra		## %
00000276 : 00559793;   % 773:         slli    a5,a1,5		##	   codigo original em c %
00000277 : ff010113;   % 774:         addi    sp,sp,-16	## %
00000278 : 00f50533;   % 775:         add     a0,a0,a5	## int add_element(int board[8][8], int index, int color){ %
00000279 : 00812423;   % 776:         sw      s0,8(sp)	## %
0000027a : 00052403;   % 777:         lw      s0,0(a0)	##     if (board[index][0]){ %
0000027b : 00112623;   % 778:         sw      ra,12(sp)	##         return -1; %
0000027c : 00912223;   % 779:         sw      s1,4(sp)	##    } %
0000027d : 08041663;   % 780:         bne     s0,zero,.L57	## %
0000027e : 00b00833;   % 781:         mv      a6,a1		##     for (int i = 0; i < 7; i++){ %
0000027f : 00450793;   % 782:         addi    a5,a0,4		##         if (board[index][i+1] != 0){ %
00000280 : 00700693;   % 783:         li      a3,7		##             board[index][i] = color; %
00000281 : 0007a703;   % 785:         lw      a4,0(a5)	##             return i;        %
00000282 : 008004b3;   % 786:         mv      s1,s0		##         } %
00000283 : 00140413;   % 787:         addi    s0,s0,1		##    } %
00000284 : 02071c63;   % 788:         bne     a4,zero,.L59	## %
00000285 : 00478793;   % 789:         addi    a5,a5,4		##     board[index][7] = color; %
00000286 : fed416e3;   % 790:         bne     s0,a3,.L54	##     animation(index, 7, color); %
00000287 : 00c52e23;   % 791:         sw      a2,28(a0)	##     return 7; %
00000288 : 00700593;   % 792:         li      a1,7		## } %
00000289 : 01000533;   % 793:         mv      a0,a6		## %
0000028a : 00000317;   % 794:         call    animation	## %
0000028b : eac300e7;   % 794:  %
0000028c : 00c12083;   % 796:         lw      ra,12(sp)	## %
0000028d : 00800533;   % 797:         mv      a0,s0		## %
0000028e : 00812403;   % 798:         lw      s0,8(sp)	## %
0000028f : 00412483;   % 799:         lw      s1,4(sp)	## %
00000290 : 01010113;   % 800:         addi    sp,sp,16	## %
00000291 : 00008067;   % 801:         jr      ra		## %
00000292 : 00249793;   % 803:         slli    a5,s1,2		## %
00000293 : 00f50533;   % 804:         add     a0,a0,a5	## %
00000294 : 00c52023;   % 805:         sw      a2,0(a0)	## %
00000295 : 009005b3;   % 806:         mv      a1,s1		## %
00000296 : 01000533;   % 807:         mv      a0,a6		## %
00000297 : 00000317;   % 808:         call    animation	## %
00000298 : e78300e7;   % 808:  %
00000299 : 00900433;   % 809:         mv      s0,s1		## %
0000029a : 00c12083;   % 810:         lw      ra,12(sp)	## %
0000029b : 00800533;   % 811:         mv      a0,s0		## %
0000029c : 00812403;   % 812:         lw      s0,8(sp)	## %
0000029d : 00412483;   % 813:         lw      s1,4(sp)	## %
0000029e : 01010113;   % 814:         addi    sp,sp,16	## %
0000029f : 00008067;   % 815:         jr      ra		## %
000002a0 : fff00413;   % 817:         li      s0,-1		## %
000002a1 : fadff06f;   % 818:         j       .L52		## %
000002a2 : 10050713;   % 821:         addi    a4,a0,256	## bool game_draw(int board[8][8]){ %
000002a3 : 00052783;   % 823:         lw      a5,0(a0)	##         if (board[i][0] == 0){ %
000002a4 : 02050513;   % 824:         addi    a0,a0,32	##             return false; %
000002a5 : 00078863;   % 825:         beq     a5,zero,.GL4	##         } %
000002a6 : fee51ae3;   % 826:         bne     a0,a4,.GL3	##     } %
000002a7 : 00100513;   % 827:         li      a0,1		##     return true; %
000002a8 : 00008067;   % 828:         ret			## } %
000002a9 : 00000513;   % 830:         li      a0,0		## %
000002aa : 00008067;   % 831:         ret			## %
000002ab : 00300693;   % 834:         li      a3,3		## 	   oodigo original em c %
000002ac : 40b68833;   % 835:         sub     a6,a3,a1	## %
000002ad : 00561613;   % 836:         slli    a2,a2,5		## bool win_vertical(int board[8][8], int x, int y){ %
000002ae : fff84793;   % 837:         not     a5,a6		##     int color = board[y][x]; %
000002af : 00c50633;   % 838:         add     a2,a0,a2	##     int counter; %
000002b0 : 00259713;   % 839:         slli    a4,a1,2		## %
000002b1 : 00700893;   % 840:         li      a7,7		##     for (int i = max(0, 3-x); i <= min(7-x, 3) ; i++){ %
000002b2 : 00e60733;   % 841:         add     a4,a2,a4	##         counter = 0; %
000002b3 : 41f7d793;   % 842:         srai    a5,a5,31	##         for (int j = 0; j < 4; j++){ %
000002b4 : 40b888b3;   % 843:         sub     a7,a7,a1	##             if (board[y][x-3+i+j] == color){ %
000002b5 : 00072503;   % 844:         lw      a0,0(a4)	##                 counter++; %
000002b6 : 00f87833;   % 845:         and     a6,a6,a5	##             }; %
000002b7 : 0116d463;   % 846:         ble     a7,a3,.L65	##         } %
000002b8 : 00300893;   % 847:         li      a7,3		##         if (counter == 4){ %
000002b9 : 0508c663;   % 849:         blt     a7,a6,.L70	##         } %
000002ba : ffd58793;   % 850:         addi    a5,a1,-3	##     } %
000002bb : 010787b3;   % 851:         add     a5,a5,a6	## %
000002bc : 00279793;   % 852:         slli    a5,a5,2		##     return false; %
000002bd : 01078793;   % 853:         addi    a5,a5,16	##} %
000002be : 00f60633;   % 854:         add     a2,a2,a5	## %
000002bf : 00400593;   % 855:         li      a1,4		## %
000002c0 : ff060713;   % 857:         addi    a4,a2,-16	## %
000002c1 : 00000693;   % 858:         li      a3,0		## %
000002c2 : 00072783;   % 860:         lw      a5,0(a4)	## %
000002c3 : 00470713;   % 861:         addi    a4,a4,4		## %
000002c4 : 40a787b3;   % 862:         sub     a5,a5,a0	## %
000002c5 : 0017b793;   % 863:         seqz    a5,a5		## %
000002c6 : 00f686b3;   % 864:         add     a3,a3,a5	## %
000002c7 : fec716e3;   % 865:         bne     a4,a2,.L68	## %
000002c8 : 00b68c63;   % 866:         beq     a3,a1,.L71	## %
000002c9 : 00180813;   % 867:         addi    a6,a6,1		## %
000002ca : 00470613;   % 868:         addi    a2,a4,4		## %
000002cb : fd08dae3;   % 869:         bge     a7,a6,.L69	## %
000002cc : 00000513;   % 871:         li      a0,0		## %
000002cd : 00008067;   % 872:         ret			## %
000002ce : 00100513;   % 874:         li      a0,1		## %
000002cf : 00008067;   % 875:         ret			## %
000002d0 : 00300693;   % 878:         li      a3,3		## 	   oodigo original em c %
000002d1 : 40c688b3;   % 879:         sub     a7,a3,a2	## %
000002d2 : 00561793;   % 880:         slli    a5,a2,5		## bool win_horizontal(int board[8][8], int x, int y){ %
000002d3 : fff8c713;   % 881:         not     a4,a7		##     int color = board[y][x];    int color = board[y][x]; %
000002d4 : 00259813;   % 882:         slli    a6,a1,2		##     int counter; %
000002d5 : 00f507b3;   % 883:         add     a5,a0,a5	## %
000002d6 : 00700313;   % 884:         li      t1,7		##     for (int i = max(0, 3-y); i <= min(7-y, 3) ; i++){ %
000002d7 : 010787b3;   % 885:         add     a5,a5,a6	##         counter = 0; %
000002d8 : 41f75713;   % 886:         srai    a4,a4,31	##         for (int j = 0; j < 4; j++){ %
000002d9 : 40c30333;   % 887:         sub     t1,t1,a2	##            if (board[y-3+i+j][x] == color){ %
000002da : 0007a803;   % 888:         lw      a6,0(a5)	##                 counter++; %
000002db : 00e8f8b3;   % 889:         and     a7,a7,a4	##             }; %
000002dc : 0066d463;   % 890:         ble     t1,a3,.L76	##         } %
000002dd : 00300313;   % 891:         li      t1,3		##         if (counter == 4){ %
000002de : 05134a63;   % 893:         blt     t1,a7,.L81	##         } %
000002df : ffd60613;   % 894:         addi    a2,a2,-3	##     } %
000002e0 : 01160633;   % 895:         add     a2,a2,a7	## %
000002e1 : 00361613;   % 896:         slli    a2,a2,3		##     return false; %
000002e2 : 00b60633;   % 897:         add     a2,a2,a1	## } %
000002e3 : 00261613;   % 898:         slli    a2,a2,2		## %
000002e4 : 08050513;   % 899:         addi    a0,a0,128	## %
000002e5 : 00a60633;   % 900:         add     a2,a2,a0	## %
000002e6 : 00400593;   % 901:         li      a1,4		## %
000002e7 : f8060713;   % 903:         addi    a4,a2,-128	## %
000002e8 : 00000693;   % 904:         li      a3,0		## %
000002e9 : 00072783;   % 906:         lw      a5,0(a4)	## %
000002ea : 02070713;   % 907:         addi    a4,a4,32	## %
000002eb : 410787b3;   % 908:         sub     a5,a5,a6	## %
000002ec : 0017b793;   % 909:         seqz    a5,a5		## %
000002ed : 00f686b3;   % 910:         add     a3,a3,a5	## %
000002ee : fec716e3;   % 911:         bne     a4,a2,.L79	## %
000002ef : 00b68c63;   % 912:         beq     a3,a1,.L82	## %
000002f0 : 00188893;   % 913:         addi    a7,a7,1		## %
000002f1 : 02070613;   % 914:         addi    a2,a4,32	## %
000002f2 : fd135ae3;   % 915:         bge     t1,a7,.L80	## %
000002f3 : 00000513;   % 917:         li      a0,0		## %
000002f4 : 00008067;   % 918:         ret			## %
000002f5 : 00100513;   % 920:         li      a0,1		## %
000002f6 : 00008067;   % 921:         ret			## %
000002f7 : 00300713;   % 924:         li      a4,3		## 	   codigo original em c %
000002f8 : 40b708b3;   % 925:         sub     a7,a4,a1	## %
000002f9 : fff8c813;   % 926:         not     a6,a7		## bool win_diagonal_decresing(int board[8][8], int x, int y){ %
000002fa : 00561e13;   % 927:         slli    t3,a2,5		##     int color = board[y][x]; %
000002fb : 41f85813;   % 928:         srai    a6,a6,31	##     int counter; %
000002fc : 01c506b3;   % 929:         add     a3,a0,t3	## %
000002fd : 00259793;   % 930:         slli    a5,a1,2		##     for (int i = max(max(0, 3-y), 3-x); i <= min(min(7-y, 3),7-x); i++){ %
000002fe : 00f686b3;   % 931:         add     a3,a3,a5	##         counter = 0; %
000002ff : 0108f8b3;   % 932:         and     a7,a7,a6	##       for (int j = 0; j < 4; j++){ %
00000300 : 40c70733;   % 933:         sub     a4,a4,a2	##             if (board[y+j-3+i][x+j-3+i] == color){ %
00000301 : 0006a803;   % 934:         lw      a6,0(a3)	##                 counter++; %
00000302 : 00e8d463;   % 935:         bge     a7,a4,.L87	##             }; %
00000303 : 00e008b3;   % 936:         mv      a7,a4		##         } %
00000304 : 00700313;   % 938:         li      t1,7		##             return true; %
00000305 : 40b30333;   % 939:         sub     t1,t1,a1	##         } %
00000306 : 00300713;   % 940:         li      a4,3		##     } %
00000307 : 00675463;   % 941:         ble     t1,a4,.L88	## %
00000308 : 00300313;   % 942:         li      t1,3		##     return false; %
00000309 : 00700713;   % 944:         li      a4,7		## %
0000030a : 40c70633;   % 945:         sub     a2,a4,a2	## %
0000030b : 00665463;   % 946:         ble     t1,a2,.L89	## %
0000030c : 00c00333;   % 947:         mv      t1,a2		## %
0000030d : 05134c63;   % 949:         bgt     a7,t1,.L94	## %
0000030e : 00389713;   % 950:         slli    a4,a7,3		## %
0000030f : 01170733;   % 951:         add     a4,a4,a7	## %
00000310 : 01c787b3;   % 952:         add     a5,a5,t3	## %
00000311 : 00271713;   % 953:         slli    a4,a4,2		## %
00000312 : 00e787b3;   % 954:         add     a5,a5,a4	## %
00000313 : 00f50533;   % 955:         add     a0,a0,a5	## %
00000314 : 00400593;   % 956:         li      a1,4		## %
00000315 : 00a006b3;   % 958:         mv      a3,a0		## %
00000316 : 00000713;   % 959:         li      a4,0		## %
00000317 : 00000613;   % 960:         li      a2,0		## %
00000318 : f946a783;   % 962:         lw      a5,-108(a3)	## %
00000319 : 00170713;   % 963:         addi    a4,a4,1		## %
0000031a : 02468693;   % 964:         addi    a3,a3,36	## %
0000031b : 410787b3;   % 965:         sub     a5,a5,a6	## %
0000031c : 0017b793;   % 966:         seqz    a5,a5		## %
0000031d : 00f60633;   % 967:         add     a2,a2,a5	## %
0000031e : feb714e3;   % 968:         bne     a4,a1,.L92	## %
0000031f : 00e60c63;   % 969:         beq     a2,a4,.L95	## %
00000320 : 00188893;   % 970:         addi    a7,a7,1		## %
00000321 : 02450513;   % 971:         addi    a0,a0,36	## %
00000322 : fd1356e3;   % 972:         ble     a7,t1,.L93	## %
00000323 : 00000513;   % 974:         li      a0,0		## %
00000324 : 00008067;   % 975:         ret			## %
00000325 : 00100513;   % 977:         li      a0,1		## %
00000326 : 00008067;   % 978:         ret			## %
00000327 : 00300893;   % 981:         li      a7,3		##	   codigo original em c %
00000328 : 40b888b3;   % 982:         sub     a7,a7,a1	## %
00000329 : fff8c693;   % 983:         not     a3,a7		## bool win_diagonal_incresing(int board[8][8], int x, int y){ %
0000032a : 00561e13;   % 984:         slli    t3,a2,5		##     int color = board[y][x]; %
0000032b : 01c50733;   % 985:         add     a4,a0,t3	##     int counter; %
0000032c : 00259793;   % 986:         slli    a5,a1,2		## %
0000032d : 41f6d693;   % 987:         srai    a3,a3,31	##     for (int i = max(max(0, y-4), 3-x); i <= min(min(y, 3), 7-x); i++){ %
0000032e : 00f70733;   % 988:         add     a4,a4,a5	##        counter = 0; %
0000032f : ffc60313;   % 989:         addi    t1,a2,-4	##        for (int j = 0; j < 4; j++){ %
00000330 : 00d8f8b3;   % 990:         and     a7,a7,a3	##            if (board[y-j+3-i][x+j-3+i] == color){ %
00000331 : 00072803;   % 991:         lw      a6,0(a4)	##                 counter++; %
00000332 : 0068d463;   % 992:         bge     a7,t1,.L100	##             }; %
00000333 : 006008b3;   % 993:         mv      a7,t1		##        } %
00000334 : 00700313;   % 995:         li      t1,7		##            return true; %
00000335 : 40b30333;   % 996:         sub     t1,t1,a1	##       } %
00000336 : 00300713;   % 997:         li      a4,3		##   } %
00000337 : 00675463;   % 998:         ble     t1,a4,.L101	## %
00000338 : 00300313;   % 999:         li      t1,3		##     return false; %
00000339 : 00665463;   % 1001:         ble     t1,a2,.L102	## %
0000033a : 00c00333;   % 1002:         mv      t1,a2		## %
0000033b : 05134c63;   % 1004:         blt     t1,a7,.L107	## %
0000033c : 00389713;   % 1005:         slli    a4,a7,3		## %
0000033d : 41170733;   % 1006:         sub     a4,a4,a7	## %
0000033e : 01c787b3;   % 1007:         add     a5,a5,t3	## %
0000033f : 00271713;   % 1008:         slli    a4,a4,2		## %
00000340 : 40e787b3;   % 1009:         sub     a5,a5,a4	## %
00000341 : 00f50533;   % 1010:         add     a0,a0,a5	## %
00000342 : 00400593;   % 1011:         li      a1,4		## %
00000343 : 00a006b3;   % 1013:         mv      a3,a0		## %
00000344 : 00000713;   % 1014:         li      a4,0		## %
00000345 : 00000613;   % 1015:         li      a2,0		## %
00000346 : 0546a783;   % 1017:         lw      a5,84(a3)	## %
00000347 : 00170713;   % 1018:         addi    a4,a4,1		## %
00000348 : fe468693;   % 1019:         addi    a3,a3,-28	## %
00000349 : 410787b3;   % 1020:         sub     a5,a5,a6	## %
0000034a : 0017b793;   % 1021:         seqz    a5,a5		## %
0000034b : 00f60633;   % 1022:         add     a2,a2,a5	## %
0000034c : feb714e3;   % 1023:         bne     a4,a1,.L105	## %
0000034d : 00e60c63;   % 1024:         beq     a2,a4,.L108	## %
0000034e : 00188893;   % 1025:         addi    a7,a7,1		## %
0000034f : fe450513;   % 1026:         addi    a0,a0,-28	## %
00000350 : fd1356e3;   % 1027:         bge     t1,a7,.L106	## %
00000351 : 00000513;   % 1029:         li      a0,0		## %
00000352 : 00008067;   % 1030:         ret			## %
00000353 : 00100513;   % 1032:         li      a0,1		## %
00000354 : 00008067;   % 1033:         ret			## %
00000355 : ff010113;   % 1036:         addi    sp,sp,-16	##	   codigo original em c %
00000356 : 00812423;   % 1037:         sw      s0,8(sp)	##	 %
00000357 : 00912223;   % 1038:         sw      s1,4(sp)	## bool game_won(int board[8][8], int x, int y){ %
00000358 : 01212023;   % 1039:         sw      s2,0(sp)	##     return win_horizontal(board, x, y) ||  %
00000359 : 00112623;   % 1040:         sw      ra,12(sp)	##     win_vertical(board, x, y)|| %
0000035a : 00a00433;   % 1041:         mv      s0,a0		##     win_diagonal_decresing(board, x, y)|| %
0000035b : 00b004b3;   % 1042:         mv      s1,a1		##     win_diagonal_incresing(board, x, y); %
0000035c : 00c00933;   % 1043:         mv      s2,a2		## } %
0000035d : 00000317;   % 1044:         call    win_horizontal	## %
0000035e : dcc300e7;   % 1044:  %
0000035f : 00051e63;   % 1045:         bne     a0,zero,.L112	## %
00000360 : 01200633;   % 1046:         mv      a2,s2		## %
00000361 : 009005b3;   % 1047:         mv      a1,s1		## %
00000362 : 00800533;   % 1048:         mv      a0,s0		## %
00000363 : 00000317;   % 1049:         call    win_vertical	## %
00000364 : d20300e7;   % 1049:  %
00000365 : 00050e63;   % 1050:         beq     a0,zero,.L114	## %
00000366 : 00c12083;   % 1052:         lw      ra,12(sp)	## %
00000367 : 00812403;   % 1053:         lw      s0,8(sp)	## %
00000368 : 00412483;   % 1054:         lw      s1,4(sp)	## %
00000369 : 00012903;   % 1055:         lw      s2,0(sp)	## %
0000036a : 01010113;   % 1056:         addi    sp,sp,16	## %
0000036b : 00008067;   % 1057:         jr      ra		## %
0000036c : 01200633;   % 1059:         mv      a2,s2		## %
0000036d : 009005b3;   % 1060:         mv      a1,s1		## %
0000036e : 00800533;   % 1061:         mv      a0,s0		## %
0000036f : 00000317;   % 1062:         call    win_diagonal_decresing	## %
00000370 : e20300e7;   % 1062:  %
00000371 : fc051ae3;   % 1063:         bne     a0,zero,.L112		## %
00000372 : 00800533;   % 1064:         mv      a0,s0			## %
00000373 : 00812403;   % 1065:         lw      s0,8(sp)		## %
00000374 : 00c12083;   % 1066:         lw      ra,12(sp)		## %
00000375 : 01200633;   % 1067:         mv      a2,s2			## %
00000376 : 009005b3;   % 1068:         mv      a1,s1			## %
00000377 : 00012903;   % 1069:         lw      s2,0(sp)		## %
00000378 : 00412483;   % 1070:         lw      s1,4(sp)		## %
00000379 : 01010113;   % 1071:         addi    sp,sp,16		## %
0000037a : 00000317;   % 1072:         tail    win_diagonal_incresing	## %
0000037b : eb430067;   % 1072:  %
0000037c : 00200513;   % 1075: li a0, 2	        # Index do numero aleatorio %
0000037d : 00800593;   % 1076: li a1, 8	        # Numero maximo aleatorio %
0000037e : 02900893;   % 1077: li a7, 41	        # a0 = randint(0, 7)      %
0000037f : 00000073;   % 1078: ecall		        # Gera o numero aleatorio %
00000380 : 00600293;   % 1080: li t0, 6                                        # Numero que sera subtraido do numero aleatorio %
00000381 : 0ff57513;   % 1081: andi a0, a0, 255                                 # Pega os primeiros 4 bytes %
00000382 : 00b54663;   % 1082: check_bound: blt a0, a1, easy_mode_end          # Checa se esta no range permitido %
00000383 : 40550533;   % 1083: sub a0, a0, t0                                  # Subtrai 6 ate esta no range %
00000384 : ff9ff06f;   % 1084: j check_bound                                   # Loop %
00000385 : 00008067;   % 1086: easy_mode_end:  ret		         %
00000386 : ff010113;   % 1089:         addi    sp,sp,-16	## 	   codigo original em c %
00000387 : 00812423;   % 1090:         sw      s0,8(sp)	## %
00000388 : 00559413;   % 1091:         slli    s0,a1,5		## bool indetify_win_move(int board[8][8], int index, int color){ %
00000389 : 00850433;   % 1092:         add     s0,a0,s0	## %
0000038a : 00042783;   % 1093:         lw      a5,0(s0)	##     if (board[index][0]){ %
0000038b : 00112623;   % 1094:         sw      ra,12(sp)	##         return false; %
0000038c : 04079663;   % 1095:         bne     a5,zero,IW65	##     } %
0000038d : 00440713;   % 1096:         addi    a4,s0,4		## %
0000038e : 00700813;   % 1097:         li      a6,7		##     for (int i = 0; i < 7; i++){ %
0000038f : 00072683;   % 1099:         lw      a3,0(a4)	## %
00000390 : 00f008b3;   % 1100:         mv      a7,a5		##             board[index][i] = color; %
00000391 : 00178793;   % 1101:         addi    a5,a5,1		## %
00000392 : 04069463;   % 1102:         bne     a3,zero,IW67	##             if (game_won(board, i, index)){ %
00000393 : 00470713;   % 1103:         addi    a4,a4,4		##                 board[index][i] = 0; %
00000394 : ff0796e3;   % 1104:         bne     a5,a6,IW60	##                 return true; %
00000395 : 00c42e23;   % 1105:         sw      a2,28(s0)	##             } %
00000396 : 00b00633;   % 1106:         mv      a2,a1		##  %
00000397 : 00700593;   % 1107:         li      a1,7		##             board[index][i] = 0; %
00000398 : 00000317;   % 1108:         call    game_won	## %
00000399 : ef4300e7;   % 1108:  %
0000039a : 00c12083;   % 1109:         lw      ra,12(sp)	##             return false; %
0000039b : 00042e23;   % 1110:         sw      zero,28(s0)	## %
0000039c : 00812403;   % 1111:         lw      s0,8(sp)	##         } %
0000039d : 01010113;   % 1112:         addi    sp,sp,16	##     } %
0000039e : 00008067;   % 1113:         jr      ra		## %
0000039f : 00c12083;   % 1115:         lw      ra,12(sp)	## %
000003a0 : 00812403;   % 1116:         lw      s0,8(sp)	##     if (game_won(board, 7, index)){ %
000003a1 : 00000513;   % 1117:         li      a0,0		##         board[index][7] = 0; %
000003a2 : 01010113;   % 1118:         addi    sp,sp,16	##        return true; %
000003a3 : 00008067;   % 1119:         jr      ra		##     } %
000003a4 : 00289793;   % 1121:         slli    a5,a7,2		##     board[index][7] = 0; %
000003a5 : 00f40433;   % 1122:         add     s0,s0,a5	## %
000003a6 : 00c42023;   % 1123:         sw      a2,0(s0)	##     return false; %
000003a7 : 00b00633;   % 1124:         mv      a2,a1		## } %
000003a8 : 011005b3;   % 1125:         mv      a1,a7		## %
000003a9 : 00000317;   % 1126:         call    game_won	## %
000003aa : eb0300e7;   % 1126:  %
000003ab : 00c12083;   % 1127:         lw      ra,12(sp)	## %
000003ac : 00042023;   % 1128:         sw      zero,0(s0)	## %
000003ad : 00812403;   % 1129:         lw      s0,8(sp)	## %
000003ae : 01010113;   % 1130:         addi    sp,sp,16	## %
000003af : 00008067;   % 1131:         jr      ra		## %
000003b0 : 0005a783;   % 1134:         lw      a5,0(a1)	## 	   codigo original em c %
000003b1 : fe010113;   % 1135:         addi    sp,sp,-32	## %
000003b2 : 00912a23;   % 1136:         sw      s1,20(sp)	## int normal_mode(int board[8][8], int* color){ %
000003b3 : 00178793;   % 1137:         addi    a5,a5,1		##     int x, y, new_color = ((*color+1) % 2)+1; %
000003b4 : 01f7d613;   % 1138:         srli    a2,a5,31	##     for(int i = 0; i < 8; i++){ %
000003b5 : 00c784b3;   % 1139:         add     s1,a5,a2	##         if (indetify_win_move(board, i, new_color)){ %
000003b6 : 0014f493;   % 1140:         andi    s1,s1,1		##             return i; %
000003b7 : 40c484b3;   % 1141:         sub     s1,s1,a2	##         } %
000003b8 : 00812c23;   % 1142:         sw      s0,24(sp)	##     } %
000003b9 : 01212823;   % 1143:         sw      s2,16(sp)	##  %
000003ba : 01312623;   % 1144:         sw      s3,12(sp)	##     return 0; %
000003bb : 00112e23;   % 1145:         sw      ra,28(sp)	## } %
000003bc : 00a00933;   % 1146:         mv      s2,a0		## %
000003bd : 00148493;   % 1147:         addi    s1,s1,1		## %
000003be : 00000413;   % 1148:         li      s0,0		## %
000003bf : 00800993;   % 1149:         li      s3,8		## %
000003c0 : 008005b3;   % 1151:         mv      a1,s0		## %
000003c1 : 00900633;   % 1152:         mv      a2,s1		## %
000003c2 : 01200533;   % 1153:         mv      a0,s2		## %
000003c3 : 00000317;   % 1154:         call    indetify_win_move	## %
000003c4 : f0c300e7;   % 1154:  %
000003c5 : 00051c63;   % 1155:         bne     a0,zero,IW68	## %
000003c6 : 00140413;   % 1156:         addi    s0,s0,1		## %
000003c7 : ff3412e3;   % 1157:         bne     s0,s3,IW70	## %
000003c8 : 00000317;   % 1158:         call easy_mode		## %
000003c9 : ed0300e7;   % 1158:  %
000003ca : 00a00433;   % 1159:         mv s0, a0		## %
000003cb : 01c12083;   % 1161:         lw      ra,28(sp)	## %
000003cc : 00800533;   % 1162:         mv      a0,s0		## %
000003cd : 01812403;   % 1163:         lw      s0,24(sp)	## %
000003ce : 01412483;   % 1164:         lw      s1,20(sp)	## %
000003cf : 01012903;   % 1165:         lw      s2,16(sp)	## %
000003d0 : 00c12983;   % 1166:         lw      s3,12(sp)	## %
000003d1 : 02010113;   % 1167:         addi    sp,sp,32	## %
000003d2 : 00008067;   % 1168:         jr      ra		## %
000003d3 : fe010113;   % 1171:         addi    sp,sp,-32	## 	   codigo original em c %
000003d4 : 01312623;   % 1172:         sw      s3,12(sp)	## %
000003d5 : 0005a983;   % 1173:         lw      s3,0(a1)	## int hard_mode(int board[8][8], int* color){ %
000003d6 : 01212823;   % 1174:         sw      s2,16(sp)	##     int x, y; %
000003d7 : 00812c23;   % 1175:         sw      s0,24(sp)	##     int player_color = (*color)+1, ai_color = ((*color+1) % 2)+1; %
000003d8 : 00198993;   % 1176:         addi    s3,s3,1		##     for(int i = 0; i < 8; i++){ %
000003d9 : 01f9d793;   % 1177:         srli    a5,s3,31	##         if (indetify_win_move(board, i, ai_color)){ %
000003da : 00f98933;   % 1178:         add     s2,s3,a5	##             return i; %
000003db : 00197913;   % 1179:         andi    s2,s2,1		##         } %
000003dc : 40f90933;   % 1180:         sub     s2,s2,a5	##         else if(indetify_win_move(board, i, player_color)){ %
000003dd : 00912a23;   % 1181:         sw      s1,20(sp)	##             return i; %
000003de : 01412423;   % 1182:         sw      s4,8(sp)	##         } %
000003df : 00112e23;   % 1183:         sw      ra,28(sp)	##     } %
000003e0 : 00a004b3;   % 1184:         mv      s1,a0		##  %
000003e1 : 00190913;   % 1185:         addi    s2,s2,1		##     return 0; %
000003e2 : 00000413;   % 1186:         li      s0,0		## } %
000003e3 : 00800a13;   % 1187:         li      s4,8		## %
000003e4 : 008005b3;   % 1189:         mv      a1,s0		## %
000003e5 : 01200633;   % 1190:         mv      a2,s2		## %
000003e6 : 00900533;   % 1191:         mv      a0,s1		## %
000003e7 : 00000317;   % 1192:         call    indetify_win_move ## %
000003e8 : e7c300e7;   % 1192:  %
000003e9 : 00a007b3;   % 1193:         mv      a5,a0		## %
000003ea : 008005b3;   % 1194:         mv      a1,s0		## %
000003eb : 01300633;   % 1195:         mv      a2,s3		## %
000003ec : 00900533;   % 1196:         mv      a0,s1		## %
000003ed : 02079263;   % 1197:         bne     a5,zero,HM73	## %
000003ee : 00000317;   % 1198:         call    indetify_win_move ## %
000003ef : e60300e7;   % 1198:  %
000003f0 : 00051c63;   % 1199:         bne     a0,zero,HM73	## %
000003f1 : 00140413;   % 1200:         addi    s0,s0,1		## %
000003f2 : fd4414e3;   % 1201:         bne     s0,s4,HM75	## %
000003f3 : 00000317;   % 1202:         call easy_mode		## %
000003f4 : e24300e7;   % 1202:  %
000003f5 : 00a00433;   % 1203:         mv s0,a0		## %
000003f6 : 01c12083;   % 1205:         lw      ra,28(sp)	## %
000003f7 : 00800533;   % 1206:         mv      a0,s0		## %
000003f8 : 01812403;   % 1207:         lw      s0,24(sp)	## %
000003f9 : 01412483;   % 1208:         lw      s1,20(sp)	## %
000003fa : 01012903;   % 1209:         lw      s2,16(sp)	## %
000003fb : 00c12983;   % 1210:         lw      s3,12(sp)	## %
000003fc : 00812a03;   % 1211:         lw      s4,8(sp)	## %
000003fd : 02010113;   % 1212:         addi    sp,sp,32	## %
000003fe : 00008067;   % 1213:         jr      ra		## %
000003ff : 00b00633;   % 1219: 	mv a2,a1 %
00000400 : 00000593;   % 1220: 	li a1,0 %
00000401 : 0ff00693;   % 1221: 	li a3,0xff %
00000402 : 00100713;   % 1222: 	li a4,1 %
00000403 : 06800893;   % 1223: 	li a7,104 %
00000404 : 00000073;   % 1224: 	ecall  %
00000405 : 06600893;   % 1226: 	li a7,102 %
00000406 : 00000073;   % 1227: 	ecall %
00000407 : 00008067;   % 1229: 	ret %
00000408 : 00c007b3;   % 1234: 	mv a5,a2 %
00000409 : 00b00633;   % 1236: 	mv a2,a1 %
0000040a : 00000593;   % 1237: 	li a1,0 %
0000040b : 0ff00693;   % 1238: 	li a3,0xff %
0000040c : 00100713;   % 1239: 	li a4,1 %
0000040d : 06800893;   % 1240: 	li a7,104 %
0000040e : 00000073;   % 1241: 	ecall  %
0000040f : 00f00533;   % 1243: 	mv a0,a5 %
00000410 : 06500893;   % 1244: 	li a7,101 %
00000411 : 00000073;   % 1245: 	ecall %
00000412 : 00008067;   % 1247: 	ret %
00000413 : 0420d073;   % 107: 	csrwi ucause,1		# caso ocorra dropdown vai gerar exce��o de instru��o inv�lida %
00000414 : ff810113;   % 109: ExceptionHandling:	addi 	sp, sp, -8 	# salva 2 registradores utilizados para comparar ucause %
00000415 : 00512023;   % 110: 	sw 	t0, 0(sp) %
00000416 : 01a12223;   % 111: 	sw 	s10, 4(sp) %
00000417 : 04202d73;   % 113: 	csrr	s10,ucause     # le o ucause e salva em s10 %
00000418 : 00800293;   % 115: 	li 	t0, 8 %
00000419 : 01a29a63;   % 116: 	bne 	t0, s10, errorExceptions  	# N�o � ecall - nem precisa arrumar a pilha! %
0000041a : 00012283;   % 118: 	lw 	t0, 0(sp)			# � ecall %
0000041b : 00412d03;   % 119:     	lw 	s10, 4(sp)  			# recupera registradores usados %
0000041c : 00810113;   % 120:     	addi 	sp, sp, 8			 %
0000041d : 1e00006f;   % 121: 	j 	ecallException %
0000041e : 04302df3;   % 127: errorExceptions: csrr 	s11, utval      # le o utval da exce��o e salva em s11	 %
0000041f : 0c000513;   % 128: 	addi 	a0, zero, 0xc0 		## printa tela de azul %
00000420 : 00000593;   % 129: 	addi 	a1, zero, 0 %
00000421 : 09400893;   % 130: 	addi 	a7, zero, 148 %
00000422 : 2d8010ef;   % 131: 	jal 	clsCLS %
00000423 : 00000293;   % 134: End_Cause0:	li 	t0, 0 %
00000424 : 03a29263;   % 135: 		bne 	t0, s10, End_Cause1 %
00000425 : 0fc0f517;   % 136: 		la 	a0, Cause0 %
00000426 : 7a450513;   % 136:  %
00000427 : 00000593;   % 137: 		li 	a1, 0 %
00000428 : 00100613;   % 138: 		li 	a2, 1 %
00000429 : 0000c6b7;   % 139: 		li 	a3, 0x0000c0ff %
0000042a : 0ff68693;   % 139:  %
0000042b : 109000ef;   % 140: 		jal	printString %
0000042c : 16c0006f;   % 141: 		j	End_uepc %
0000042d : 00100293;   % 144: End_Cause1:	li 	t0, 1 %
0000042e : 03a29263;   % 145: 		bne 	t0, s10, End_Cause2 %
0000042f : 0fc0f517;   % 146: 		la 	a0, Cause1 %
00000430 : 7a550513;   % 146:  %
00000431 : 00000593;   % 147: 		li 	a1, 0 %
00000432 : 00100613;   % 148: 		li 	a2, 1 %
00000433 : 0000c6b7;   % 149: 		li 	a3, 0x0000c0ff %
00000434 : 0ff68693;   % 149:  %
00000435 : 0e1000ef;   % 150: 		jal 	printString	 %
00000436 : 1440006f;   % 151: 		j	End_uepc %
00000437 : 00200293;   % 154: End_Cause2:	li 	t0, 2 %
00000438 : 03a29663;   % 155: 		bne 	t0, s10, End_Cause4 %
00000439 : 0fc0f517;   % 156: 		la 	a0, Cause2 %
0000043a : 7a050513;   % 156:  %
0000043b : 00000593;   % 157: 		li 	a1, 0 %
0000043c : 00100613;   % 158: 		li 	a2, 1 %
0000043d : 0000c6b7;   % 159: 		li 	a3, 0x0000c0ff %
0000043e : 0ff68693;   % 159:  %
0000043f : 0b9000ef;   % 160: 		jal 	printString %
00000440 : 0fc10517;   % 162: 		la 	a0, Instr %
00000441 : 84a50513;   % 162:  %
00000442 : 0e80006f;   % 163: 		j	End_utval %
00000443 : 00400293;   % 166: End_Cause4:	addi 	t0, zero, 4 %
00000444 : 03a29663;   % 167: 		bne	t0, s10, End_Cause5 %
00000445 : 0fc0f517;   % 168: 		la 	a0, Cause4 %
00000446 : 78d50513;   % 168:  %
00000447 : 00000593;   % 169: 		li 	a1, 0 %
00000448 : 00100613;   % 170: 		li 	a2, 1 %
00000449 : 0000c6b7;   % 171: 		li 	a3, 0x0000c0ff %
0000044a : 0ff68693;   % 171:  %
0000044b : 089000ef;   % 172: 		jal	printString %
0000044c : 0fc10517;   % 174: 		la 	a0, Addrs %
0000044d : 81250513;   % 174:  %
0000044e : 0b80006f;   % 175: 		j	End_utval %
0000044f : 00500293;   % 178: End_Cause5:	li 	t0, 5 %
00000450 : 03a29663;   % 179: 		bne 	t0, s10, End_Cause6 %
00000451 : 0fc0f517;   % 180: 		la 	a0, Cause5 %
00000452 : 77f50513;   % 180:  %
00000453 : 00000593;   % 181: 		li 	a1, 0 %
00000454 : 00100613;   % 182: 		li 	a2, 1 %
00000455 : 0000c6b7;   % 183: 		li 	a3, 0x0000c0ff %
00000456 : 0ff68693;   % 183:  %
00000457 : 059000ef;   % 184: 		jal 	printString	 %
00000458 : 0fc0f517;   % 186: 		la 	a0, Addrs %
00000459 : 7e250513;   % 186:  %
0000045a : 0880006f;   % 187: 		j	End_utval %
0000045b : 00600293;   % 190: End_Cause6:	li 	t0, 6 %
0000045c : 03a29663;   % 191: 		bne 	t0, s10, End_Cause7 %
0000045d : 0fc0f517;   % 192: 		la 	a0, Cause6 %
0000045e : 76b50513;   % 192:  %
0000045f : 00000593;   % 193: 		li 	a1, 0 %
00000460 : 00100613;   % 194: 		li 	a2, 1 %
00000461 : 0000c6b7;   % 195: 		li 	a3, 0x0000c0ff %
00000462 : 0ff68693;   % 195:  %
00000463 : 029000ef;   % 196: 		jal 	printString %
00000464 : 0fc0f517;   % 198: 		la 	a0, Addrs %
00000465 : 7b250513;   % 198:  %
00000466 : 0580006f;   % 199: 		j	End_utval %
00000467 : 00700293;   % 202: End_Cause7:	li 	t0, 7 %
00000468 : 03a29663;   % 203: 		bne 	t0, s10, End_CauseD %
00000469 : 0fc0f517;   % 204: 		la 	a0, Cause7 %
0000046a : 75e50513;   % 204:  %
0000046b : 00000593;   % 205: 		li 	a1, 0 %
0000046c : 00100613;   % 206: 		li 	a2, 1 %
0000046d : 0000c6b7;   % 207: 		li 	a3, 0x0000c0ff %
0000046e : 0ff68693;   % 207:  %
0000046f : 7f8000ef;   % 208: 		jal 	printString %
00000470 : 0fc0f517;   % 210: 		la 	a0, Addrs %
00000471 : 78250513;   % 210:  %
00000472 : 0280006f;   % 211: 		j	End_utval %
00000473 : 0fc0f517;   % 214: End_CauseD: 	la 	a0, CauseD %
00000474 : 75350513;   % 214:  %
00000475 : 00000593;   % 215: 		li 	a1, 0 %
00000476 : 00100613;   % 216: 		li 	a2, 1 %
00000477 : 0000c6b7;   % 217: 		li 	a3, 0x0000c0ff %
00000478 : 0ff68693;   % 217:  %
00000479 : 7d0000ef;   % 218: 		jal 	printString %
0000047a : 0fc0f517;   % 220: 		la 	a0, Addrs %
0000047b : 75a50513;   % 220:  %
0000047c : 00000593;   % 223: End_utval:	li 	a1, 0 %
0000047d : 01800613;   % 224: 		li 	a2, 24 %
0000047e : 0000c6b7;   % 225: 		li 	a3, 0x000c0ff %
0000047f : 0ff68693;   % 225:  %
00000480 : 7b4000ef;   % 226: 		jal	printString %
00000481 : 01b00533;   % 228: 		mv 	a0, s11 %
00000482 : 03800593;   % 229: 		li 	a1, 56 %
00000483 : 01800613;   % 230: 		li 	a2, 24 %
00000484 : 0000c6b7;   % 231: 		li 	a3, 0x0000c0ff %
00000485 : 0ff68693;   % 231:  %
00000486 : 728000ef;   % 232: 		jal 	printHex %
00000487 : 0fc0f517;   % 235: End_uepc: 	la 	a0, PC 		# Imprime o pc em que a exce��o ocorreu %
00000488 : 72150513;   % 235:  %
00000489 : 00000593;   % 236: 		li 	a1, 0 %
0000048a : 00c00613;   % 237: 		li 	a2, 12 %
0000048b : 0000c6b7;   % 238: 		li 	a3, 0x000c0ff %
0000048c : 0ff68693;   % 238:  %
0000048d : 780000ef;   % 239: 		jal 	printString %
0000048e : 04102573;   % 241: 		csrr 	a0, uepc	# Le uepc	 %
0000048f : 01c00593;   % 242: 		li	a1, 28 %
00000490 : 00c00613;   % 243: 		li 	a2, 12 %
00000491 : 0000c6b7;   % 244: 		li 	a3, 0x0000c0ff %
00000492 : 0ff68693;   % 244:  %
00000493 : 6f4000ef;   % 245: 		jal 	printHex	 %
00000494 : 24c0006f;   % 247: 		j goToExit 		# encerra execu��o %
00000495 : ef810113;   % 254: ecallException:   addi    sp, sp, -264              # Salva todos os registradores na pilha %
00000496 : 00112023;   % 255:     sw     x1,    0(sp) %
00000497 : 00212223;   % 256:     sw     x2,    4(sp) %
00000498 : 00312423;   % 257:     sw     x3,    8(sp) %
00000499 : 00412623;   % 258:     sw     x4,   12(sp) %
0000049a : 00512823;   % 259:     sw     x5,   16(sp) %
0000049b : 00612a23;   % 260:     sw     x6,   20(sp) %
0000049c : 00712c23;   % 261:     sw     x7,   24(sp) %
0000049d : 00812e23;   % 262:     sw     x8,   28(sp) %
0000049e : 02912023;   % 263:     sw     x9,   32(sp) %
0000049f : 02a12223;   % 264:     sw     x10,  36(sp) %
000004a0 : 02b12423;   % 265:     sw     x11,  40(sp) %
000004a1 : 02c12623;   % 266:     sw     x12,  44(sp) %
000004a2 : 02d12823;   % 267:     sw     x13,  48(sp) %
000004a3 : 02e12a23;   % 268:     sw     x14,  52(sp) %
000004a4 : 02f12c23;   % 269:     sw     x15,  56(sp) %
000004a5 : 03012e23;   % 270:     sw     x16,  60(sp) %
000004a6 : 05112023;   % 271:     sw     x17,  64(sp) %
000004a7 : 05212223;   % 272:     sw     x18,  68(sp) %
000004a8 : 05312423;   % 273:     sw     x19,  72(sp) %
000004a9 : 05412623;   % 274:     sw     x20,  76(sp) %
000004aa : 05512823;   % 275:     sw     x21,  80(sp) %
000004ab : 05612a23;   % 276:     sw     x22,  84(sp) %
000004ac : 05712c23;   % 277:     sw     x23,  88(sp) %
000004ad : 05812e23;   % 278:     sw     x24,  92(sp) %
000004ae : 07912023;   % 279:     sw     x25,  96(sp) %
000004af : 07a12223;   % 280:     sw     x26, 100(sp) %
000004b0 : 07b12423;   % 281:     sw     x27, 104(sp) %
000004b1 : 07c12623;   % 282:     sw     x28, 108(sp) %
000004b2 : 07d12823;   % 283:     sw     x29, 112(sp) %
000004b3 : 07e12a23;   % 284:     sw     x30, 116(sp) %
000004b4 : 07f12c23;   % 285:     sw     x31, 120(sp) %
000004b5 : 30102c73;   % 286: <22> csrr s8, misa %
000004b6 : 020c7c13;   % 286: <23> andi s8, s8, 0x020 %
000004b7 : 080c0263;   % 286: <24> beqz s8, ecallException.pula %
000004b8 : 06012e27;   % 287:     fsw    f0,  124(sp) %
000004b9 : 08112027;   % 288:     fsw    f1,  128(sp) %
000004ba : 08212227;   % 289:     fsw    f2,  132(sp) %
000004bb : 08312427;   % 290:     fsw    f3,  136(sp) %
000004bc : 08412627;   % 291:     fsw    f4,  140(sp) %
000004bd : 08512827;   % 292:     fsw    f5,  144(sp) %
000004be : 08612a27;   % 293:     fsw    f6,  148(sp) %
000004bf : 08712c27;   % 294:     fsw    f7,  152(sp) %
000004c0 : 08812e27;   % 295:     fsw    f8,  156(sp) %
000004c1 : 0a912027;   % 296:     fsw    f9,  160(sp) %
000004c2 : 0aa12227;   % 297:     fsw    f10, 164(sp) %
000004c3 : 0ab12427;   % 298:     fsw    f11, 168(sp) %
000004c4 : 0ac12627;   % 299:     fsw    f12, 172(sp) %
000004c5 : 0ad12827;   % 300:     fsw    f13, 176(sp) %
000004c6 : 0ae12a27;   % 301:     fsw    f14, 180(sp) %
000004c7 : 0af12c27;   % 302:     fsw    f15, 184(sp) %
000004c8 : 0b012e27;   % 303:     fsw    f16, 188(sp) %
000004c9 : 0d112027;   % 304:     fsw    f17, 192(sp) %
000004ca : 0d212227;   % 305:     fsw    f18, 196(sp) %
000004cb : 0d312427;   % 306:     fsw    f19, 200(sp) %
000004cc : 0d412627;   % 307:     fsw    f20, 204(sp) %
000004cd : 0d512827;   % 308:     fsw    f21, 208(sp) %
000004ce : 0d612a27;   % 309:     fsw    f22, 212(sp) %
000004cf : 0d712c27;   % 310:     fsw    f23, 216(sp) %
000004d0 : 0d812e27;   % 311:     fsw    f24, 220(sp) %
000004d1 : 0f912027;   % 312:     fsw    f25, 224(sp) %
000004d2 : 0fa12227;   % 313:     fsw    f26, 228(sp) %
000004d3 : 0fb12427;   % 314:     fsw    f27, 232(sp) %
000004d4 : 0fc12627;   % 315:     fsw    f28, 236(sp) %
000004d5 : 0fd12827;   % 316:     fsw    f29, 240(sp) %
000004d6 : 0fe12a27;   % 317:     fsw    f30, 244(sp) %
000004d7 : 0ff12c27;   % 318:     fsw    f31, 248(sp) %
000004d8 : 000002b3;   % 321:     add     t0, zero, zero %
000004d9 : 00000333;   % 322:     add     t1, zero, zero %
000004da : 000003b3;   % 323:     add     t2, zero, zero %
000004db : 00000e33;   % 324:     add     t3, zero, zero %
000004dc : 00000eb3;   % 325:     add     t4, zero, zero %
000004dd : 00000f33;   % 326:     add     t5, zero, zero %
000004de : 00000fb3;   % 327:     add     t6, zero, zero %
000004df : 00a00293;   % 332:     addi    t0, zero, 10 %
000004e0 : 11128e63;   % 333:     beq     t0, a7, goToExit          # ecall exit %
000004e1 : 06e00293;   % 334:     addi    t0, zero, 110 %
000004e2 : 11128a63;   % 335:     beq     t0, a7, goToExit          # ecall exit %
000004e3 : 00100293;   % 337:     addi    t0, zero, 1               # ecall 1 = print int %
000004e4 : 13128263;   % 338:     beq     t0, a7, goToPrintInt %
000004e5 : 06500293;   % 339:     addi    t0, zero, 101             # ecall 1 = print int %
000004e6 : 11128e63;   % 340:     beq     t0, a7, goToPrintInt %
000004e7 : 00200293;   % 342:     addi    t0, zero, 2               # ecall 2 = print float %
000004e8 : 13128663;   % 343:     beq     t0, a7, goToPrintFloat %
000004e9 : 06600293;   % 344:     addi    t0, zero, 102             # ecall 2 = print float %
000004ea : 13128263;   % 345:     beq     t0, a7, goToPrintFloat %
000004eb : 00400293;   % 347:     addi    t0, zero, 4               # ecall 4 = print string %
000004ec : 11128663;   % 348:     beq     t0, a7, goToPrintString %
000004ed : 06800293;   % 349:     addi    t0, zero, 104             # ecall 4 = print string %
000004ee : 11128263;   % 350:     beq     t0, a7, goToPrintString %
000004ef : 00500293;   % 352:     addi    t0, zero, 5               # ecall 5 = read int %
000004f0 : 13128463;   % 353:     beq     t0, a7, goToReadInt %
000004f1 : 06900293;   % 354:     addi    t0, zero, 105             # ecall 5 = read int %
000004f2 : 13128063;   % 355:     beq     t0, a7, goToReadInt %
000004f3 : 00600293;   % 357:     addi    t0, zero, 6               # ecall 6 = read float %
000004f4 : 13128463;   % 358:     beq     t0, a7, goToReadFloat %
000004f5 : 06a00293;   % 359:     addi    t0, zero, 106             # ecall 6 = read float %
000004f6 : 13128063;   % 360:     beq     t0, a7, goToReadFloat %
000004f7 : 00800293;   % 362:     addi    t0, zero, 8               # ecall 8 = read string %
000004f8 : 11128863;   % 363:     beq     t0, a7, goToReadString %
000004f9 : 06c00293;   % 364:     addi    t0, zero, 108             # ecall 8 = read string %
000004fa : 11128463;   % 365:     beq     t0, a7, goToReadString %
000004fb : 00b00293;   % 367:     addi    t0, zero, 11              # ecall 11 = print char %
000004fc : 0d128a63;   % 368:     beq     t0, a7, goToPrintChar %
000004fd : 06f00293;   % 369:     addi    t0, zero, 111             # ecall 11 = print char %
000004fe : 0d128663;   % 370:     beq     t0, a7, goToPrintChar %
000004ff : 00c00293;   % 372:     addi    t0, zero, 12              # ecall 12 = read char %
00000500 : 0f128063;   % 373:     beq     t0, a7, goToReadChar %
00000501 : 07000293;   % 374:     addi    t0, zero, 112             # ecall 12 = read char %
00000502 : 0d128c63;   % 375:     beq     t0, a7, goToReadChar %
00000503 : 01e00293;   % 377:     addi    t0, zero, 30              # ecall 30 = time %
00000504 : 11128e63;   % 378:     beq     t0, a7, goToTime %
00000505 : 08200293;   % 379:     addi    t0, zero, 130             # ecall 30 = time %
00000506 : 11128a63;   % 380:     beq     t0, a7, goToTime %
00000507 : 02000293;   % 382:     addi    t0, zero, 32              # ecall 32 = sleep %
00000508 : 11128a63;   % 383:     beq     t0, a7, goToSleep %
00000509 : 08400293;   % 384:     addi    t0, zero, 132             # ecall 32 = sleep %
0000050a : 11128663;   % 385:     beq     t0, a7, goToSleep %
0000050b : 02900293;   % 387:     addi    t0, zero, 41              # ecall 41 = random %
0000050c : 11128663;   % 388:     beq     t0, a7, goToRandom %
0000050d : 08d00293;   % 389:     addi    t0, zero, 141             # ecall 41 = random %
0000050e : 11128263;   % 390:     beq     t0, a7, goToRandom %
0000050f : 02200293;   % 392:     addi    t0, zero, 34       		# ecall 34 = print hex %
00000510 : 0d128663;   % 393:     beq     t0, a7, goToPrintHex %
00000511 : 08600293;   % 394:     addi    t0, zero, 134		# ecall 34 = print hex %
00000512 : 0d128263;   % 395:     beq     t0, a7, goToPrintHex %
00000513 : 01f00293;   % 397:     addi    t0, zero, 31              # ecall 31 = MIDI out %
00000514 : 0d128663;   % 398:     beq     t0, a7, goToMidiOut       # Generate tone and return immediately %
00000515 : 08300293;   % 399:     addi    t0, zero, 131             # ecall 31 = MIDI out %
00000516 : 0d128263;   % 400:     beq     t0, a7, goToMidiOut %
00000517 : 02100293;   % 402:     addi    t0, zero, 33              # ecall 33 = MIDI out synchronous %
00000518 : 0d128263;   % 403:     beq     t0, a7, goToMidiOutSync   # Generate tone and return upon tone completion %
00000519 : 08500293;   % 404:     addi    t0, zero, 133             # ecall 33 = MIDI out synchronous %
0000051a : 0b128e63;   % 405:     beq     t0, a7, goToMidiOutSync %
0000051b : 03000293;   % 407:     addi    t0, zero, 48              # ecall 48 = CLS %
0000051c : 0d128a63;   % 408:     beq     t0, a7, goToCLS %
0000051d : 09400293;   % 409:     addi    t0, zero, 148              # ecall 48 = CLS %
0000051e : 0d128663;   % 410:     beq     t0, a7, goToCLS %
0000051f : 02f00293;   % 412:     addi    t0, zero, 47              # ecall 47 = DrawLine %
00000520 : 0d128663;   % 413:     beq     t0, a7, goToBRES %
00000521 : 09300293;   % 414:     addi    t0, zero, 147              # ecall 47 = DrawLine %
00000522 : 0d128263;   % 415:     beq     t0, a7, goToBRES     %
00000523 : 02400293;   % 418:     addi    t0, zero, 36              # ecall 36 = PrintIntUnsigned %
00000524 : 09128263;   % 419:     beq     t0, a7, goToPrintIntUnsigned %
00000525 : 08800293;   % 420:     addi    t0, zero, 136             # ecall 36 = PrintIntUnsigned %
00000526 : 07128e63;   % 421:     beq     t0, a7, goToPrintIntUnsigned %
00000527 : 10008c37;   % 425: <9> li s8, 0x10008000	# carrega tp %
00000528 : 000c0c13;   % 425:  %
00000529 : 01819663;   % 425: <10> bne gp, s8, goToExitDE2	# Na DE1 gp = 0 ! N�o tem segmento .extern %
0000052a : 00a00893;   % 426: 			li 	a7, 10			# chama o ecall normal do Rars %
0000052b : 00000073;   % 427: 			ecall				# exit ecall	 %
0000052c : 0000006f;   % 428: 	goToExitDE2:	j 	goToExitDE2		# trava o processador : N�o tem sistema operacional! %
0000052d : 210000ef;   % 430: 	goToPrintInt:	jal     printInt               	# chama printInt %
0000052e : 09c0006f;   % 431: 			j       endEcall %
0000052f : 4f8000ef;   % 433: 	goToPrintString: jal     printString           	# chama printString %
00000530 : 0940006f;   % 434: 			 j       endEcall %
00000531 : 538000ef;   % 436: 	goToPrintChar:	jal     printChar		# chama printChar %
00000532 : 08c0006f;   % 437: 			j       endEcall %
00000533 : 30102c73;   % 439: <22> csrr s8, misa %
00000534 : 020c7c13;   % 439: <23> andi s8, s8, 0x020 %
00000535 : 180c0663;   % 439: <24> beqz s8, NaoExisteEcall %
00000536 : 1a9000ef;   % 440: 			jal     printFloat		# chama printFloat %
00000537 : 0780006f;   % 441: 			j       endEcall %
00000538 : 658000ef;   % 443: 	goToReadChar:	jal     readChar              	# chama readChar %
00000539 : 0700006f;   % 444: 			j       endEcall %
0000053a : 780000ef;   % 446: 	goToReadInt:   	jal     readInt                 # chama readInt %
0000053b : 0680006f;   % 447: 			j       endEcall %
0000053c : 6e8000ef;   % 449: 	goToReadString:	jal     readString              # chama readString %
0000053d : 0600006f;   % 450: 			j       endEcall %
0000053e : 30102c73;   % 452: <22> csrr s8, misa %
0000053f : 020c7c13;   % 452: <23> andi s8, s8, 0x020 %
00000540 : 160c0063;   % 452: <24> beqz s8, NaoExisteEcall %
00000541 : 381000ef;   % 453: 			jal     readFloat               # chama readFloat %
00000542 : 04c0006f;   % 454: 			j       endEcall %
00000543 : 434000ef;   % 456: 	goToPrintHex:	jal     printHex                # chama printHex %
00000544 : 0440006f;   % 457: 			j       endEcall %
00000545 : 064010ef;   % 459: 	goToPrintIntUnsigned: 	jal	printIntUnsigned	# chama Print Unsigned Int %
00000546 : 03c0006f;   % 460: 				j	endEcall   %
00000547 : 05d000ef;   % 462: 	goToMidiOut:	jal     midiOut                 # chama MIDIout %
00000548 : 0340006f;   % 463: 			j       endEcall %
00000549 : 0cd000ef;   % 465: 	goToMidiOutSync: jal     midiOutSync   		# chama MIDIoutSync %
0000054a : 02c0006f;   % 466: 			 j       endEcall %
0000054b : 5bd000ef;   % 468: 	goToTime:	jal     Time                    # chama time %
0000054c : 0240006f;   % 469: 			j       endEcall %
0000054d : 5d9000ef;   % 471: 	goToSleep:	jal     Sleep                  	# chama sleep %
0000054e : 01c0006f;   % 472: 			j       endEcall %
0000054f : 5fd000ef;   % 474: 	goToRandom:	jal     Random                 	# chama random %
00000550 : 0140006f;   % 475: 			j       endEcall %
00000551 : 61d000ef;   % 477: 	goToCLS:	jal     clsCLS                 	# chama CLS %
00000552 : 00c0006f;   % 478: 			j       endEcall %
00000553 : 671000ef;   % 480: 	goToBRES:	jal     BRESENHAM               # chama BRESENHAM %
00000554 : 0040006f;   % 481: 			j       endEcall    	 %
00000555 : 00012083;   % 485: endEcall:  	lw	x1,   0(sp)  # recupera QUASE todos os registradores na pilha %
00000556 : 00412103;   % 486: 		lw	x2,   4(sp)	 %
00000557 : 00812183;   % 487: 		lw	x3,   8(sp)	 %
00000558 : 00c12203;   % 488: 		lw	x4,  12(sp)      	 %
00000559 : 01012283;   % 489: 		lw	x5,  16(sp)      	 %
0000055a : 01412303;   % 490: 		lw	x6,  20(sp)	 %
0000055b : 01812383;   % 491: 		lw	x7,  24(sp) %
0000055c : 01c12403;   % 492: 		lw	x8,  28(sp) %
0000055d : 02012483;   % 493: 		lw	x9,  32(sp) %
0000055e : 02c12603;   % 496: 		lw     x12, 44(sp) %
0000055f : 03012683;   % 497: 		lw     x13, 48(sp) %
00000560 : 03412703;   % 498: 		lw     x14, 52(sp) %
00000561 : 03812783;   % 499: 		lw     x15, 56(sp) %
00000562 : 03c12803;   % 500: 		lw     x16, 60(sp) %
00000563 : 04012883;   % 501: 		lw     x17, 64(sp) %
00000564 : 04412903;   % 502: 		lw     x18, 68(sp) %
00000565 : 04812983;   % 503: 		lw     x19, 72(sp) %
00000566 : 04c12a03;   % 504: 		lw     x20, 76(sp) %
00000567 : 05012a83;   % 505: 		lw     x21, 80(sp) %
00000568 : 05412b03;   % 506: 		lw     x22, 84(sp) %
00000569 : 05812b83;   % 507: 		lw     x23, 88(sp) %
0000056a : 05c12c03;   % 508: 		lw     x24, 92(sp) %
0000056b : 06012c83;   % 509: 		lw     x25, 96(sp) %
0000056c : 06412d03;   % 510: 		lw     x26, 100(sp) %
0000056d : 06812d83;   % 511: 		lw     x27, 104(sp) %
0000056e : 06c12e03;   % 512: 		lw     x28, 108(sp) %
0000056f : 07012e83;   % 513: 		lw     x29, 112(sp) %
00000570 : 07412f03;   % 514: 		lw     x30, 116(sp) %
00000571 : 07812f83;   % 515: 		lw     x31, 120(sp) %
00000572 : 30102c73;   % 516: <22> csrr s8, misa %
00000573 : 020c7c13;   % 516: <23> andi s8, s8, 0x020 %
00000574 : 060c0e63;   % 516: <24> beqz s8, endEcall.pula %
00000575 : 07c12007;   % 517: 		flw    f0,  124(sp) %
00000576 : 08012087;   % 518: 		flw    f1,  128(sp) %
00000577 : 08412107;   % 519: 		flw    f2,  132(sp) %
00000578 : 08812187;   % 520: 		flw    f3,  136(sp) %
00000579 : 08c12207;   % 521: 		flw    f4,  140(sp) %
0000057a : 09012287;   % 522: 		flw    f5,  144(sp) %
0000057b : 09412307;   % 523: 		flw    f6,  148(sp) %
0000057c : 09812387;   % 524: 		flw    f7,  152(sp) %
0000057d : 09c12407;   % 525: 		flw    f8,  156(sp) %
0000057e : 0a012487;   % 526: 		flw    f9,  160(sp) %
0000057f : 0ac12607;   % 529: 		flw    f12, 172(sp) %
00000580 : 0b012687;   % 530: 		flw    f13, 176(sp) %
00000581 : 0b412707;   % 531: 		flw    f14, 180(sp) %
00000582 : 0b812787;   % 532: 		flw    f15, 184(sp) %
00000583 : 0bc12807;   % 533: 		flw    f16, 188(sp) %
00000584 : 0c012887;   % 534: 		flw    f17, 192(sp) %
00000585 : 0c412907;   % 535: 		flw    f18, 196(sp) %
00000586 : 0c812987;   % 536: 		flw    f19, 200(sp) %
00000587 : 0cc12a07;   % 537: 		flw    f20, 204(sp) %
00000588 : 0d012a87;   % 538: 		flw    f21, 208(sp) %
00000589 : 0d412b07;   % 539: 		flw    f22, 212(sp) %
0000058a : 0d812b87;   % 540: 		flw    f23, 216(sp) %
0000058b : 0dc12c07;   % 541: 		flw    f24, 220(sp) %
0000058c : 0e012c87;   % 542: 		flw    f25, 224(sp) %
0000058d : 0e412d07;   % 543: 		flw    f26, 228(sp) %
0000058e : 0e812d87;   % 544: 		flw    f27, 232(sp) %
0000058f : 0ec12e07;   % 545: 		flw    f28, 236(sp) %
00000590 : 0f012e87;   % 546: 		flw    f29, 240(sp) %
00000591 : 0f412f07;   % 547: 		flw    f30, 244(sp) %
00000592 : 0f812f87;   % 548: 		flw    f31, 248(sp) %
00000593 : 10810113;   % 550: endEcall.pula:	addi    sp, sp, 264 %
00000594 : 04102273;   % 552: 		csrr 	tp, uepc 	# le o valor de EPC salvo no registrador uepc (reg 65) %
00000595 : 00420213;   % 553: 		addi 	tp, tp, 4	# soma 4 para obter a instrucao seguinte ao ecall %
00000596 : 04121073;   % 554: 		csrw 	tp, uepc	# coloca no registrador uepc %
00000597 : 00200073;   % 555: 		uret			# retorna PC=uepc %
00000598 : 0c000513;   % 563: NaoExisteEcall: addi 	a0, zero, 0xc0 		## printa tela de azul %
00000599 : 00000593;   % 564: 		addi 	a1, zero, 0 %
0000059a : 01100833;   % 565: 		mv 	a6, a7 %
0000059b : 09400893;   % 566: 		addi 	a7, zero, 148 %
0000059c : 4f1000ef;   % 567: 		jal 	clsCLS %
0000059d : 0fc0f517;   % 568:   		la 	a0, CauseE %
0000059e : 2bb50513;   % 568:  %
0000059f : 00000593;   % 569: 		li 	a1, 0 %
000005a0 : 00100613;   % 570: 		li 	a2, 1 %
000005a1 : 0000c6b7;   % 571: 		li 	a3, 0x0000c0ff %
000005a2 : 0ff68693;   % 571:  %
000005a3 : 328000ef;   % 572: 		jal 	printString %
000005a4 : 01000533;   % 573: 		mv 	a0, a6 %
000005a5 : 06800593;   % 574: 		li 	a1, 104 %
000005a6 : 00100613;   % 575: 		li 	a2, 1 %
000005a7 : 0000c6b7;   % 576: 		li 	a3, 0x0000c0ff %
000005a8 : 0ff68693;   % 576:  %
000005a9 : 020000ef;   % 577: 		jal 	printInt %
000005aa : 04102573;   % 578: 		csrr	a0,uepc %
000005ab : 08800593;   % 579: 		li 	a1, 136 %
000005ac : 00100613;   % 580: 		li 	a2, 1 %
000005ad : 0000c6b7;   % 581: 		li 	a3, 0x0000c0ff %
000005ae : 0ff68693;   % 581:  %
000005af : 284000ef;   % 582: 		jal 	printHex		 %
000005b0 : dddff06f;   % 583: 		j 	goToExit %
000005b1 : ffc10113;   % 595: printInt:	addi 	sp, sp, -4			# Aloca espaco %
000005b2 : 00112023;   % 596: 		sw 	ra, 0(sp)			# salva ra %
000005b3 : 0fc0f297;   % 597: 		la 	t0, TempBuffer			# carrega o Endereco do Buffer da String %
000005b4 : f2428293;   % 597:  %
000005b5 : 00055a63;   % 599: 		bge 	a0, zero, ehposprintInt		# Se eh positvo %
000005b6 : 02d00313;   % 600: 		li 	t1, '-'				# carrega o sinal - %
000005b7 : 00628023;   % 601: 		sb 	t1, 0(t0)			# coloca no buffer %
000005b8 : 00128293;   % 602: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
000005b9 : 40a00533;   % 603: 		sub 	a0, zero, a0			# torna o numero positivo %
000005ba : 00a00393;   % 605: ehposprintInt:  li 	t2, 10				# carrega numero 10 %
000005bb : 00000313;   % 606: 		li 	t1, 0				# carrega numero de digitos com 0 %
000005bc : 30102c73;   % 608: <29> csrr s8, misa %
000005bd : 00cc5c13;   % 608: <30> srli s8, s8, 12 %
000005be : 001c7c13;   % 608: <31> andi s8, s8, 0x001 %
000005bf : 1e0c1863;   % 608: <32> bnez s8, printInt.pula1 %
000005c0 : ff410113;   % 609: <99> addi 	sp,sp,-12 %
000005c1 : 00a12023;   % 609: <100> sw	a0,0(sp) %
000005c2 : 00b12223;   % 609: <101> sw	a1,4(sp) %
000005c3 : 00c12423;   % 609: <102> sw	a2,8(sp) %
000005c4 : 00a00633;   % 609: <103> mv 	a2,a0 %
000005c5 : 41f65593;   % 609: <104> srai 	a1,a2,31 %
000005c6 : 00c00533;   % 609: <105> mv 	a0,a2 %
000005c7 : 00058463;   % 609: <106> beqz 	a1,div10.pula1_M21 %
000005c8 : 40c00533;   % 609: <107> neg 	a0,a2 %
000005c9 : ff010113;   % 609: <65> addi 	sp, sp, -16 %
000005ca : 00a12023;   % 609: <66> sw	a0, 0(sp) %
000005cb : 00e12223;   % 609: <67> sw	a4, 4(sp) %
000005cc : 00f12423;   % 609: <68> sw	a5, 8(sp) %
000005cd : 00112623;   % 609: <69> sw	ra, 12(sp) %
000005ce : 00a00533;   % 609: <70> mv 	a0, a0 %
000005cf : 00155713;   % 609: <71> srli    a4,a0,1 %
000005d0 : 00255793;   % 609: <72> srli    a5,a0,2 %
000005d1 : 00f707b3;   % 609: <73> add     a5,a4,a5 %
000005d2 : 0047d713;   % 609: <74> srli    a4,a5,4 %
000005d3 : 00f70733;   % 609: <75> add     a4,a4,a5 %
000005d4 : 00875793;   % 609: <76> srli    a5,a4,8 %
000005d5 : 00e78733;   % 609: <77> add     a4,a5,a4 %
000005d6 : 01075793;   % 609: <78> srli    a5,a4,16 %
000005d7 : 00e787b3;   % 609: <79> add     a5,a5,a4 %
000005d8 : 0037d793;   % 609: <80> srli    a5,a5,3 %
000005d9 : 00279713;   % 609: <81> slli    a4,a5,2 %
000005da : 00f70733;   % 609: <82> add     a4,a4,a5 %
000005db : 00171713;   % 609: <83> slli    a4,a4,1 %
000005dc : 40e50533;   % 609: <84> sub     a0,a0,a4 %
000005dd : 00a53513;   % 609: <85> sltiu   a0,a0,10 %
000005de : 00154513;   % 609: <86> xori    a0,a0,1 %
000005df : 00f50533;   % 609: <87> add     a0,a0,a5 %
000005e0 : 04051073;   % 609: <88> csrw	a0,uscratch %
000005e1 : 00012503;   % 609: <89> lw	a0, 0(sp) %
000005e2 : 00412703;   % 609: <90> lw	a4, 4(sp) %
000005e3 : 00812783;   % 609: <91> lw	a5, 8(sp) %
000005e4 : 00c12083;   % 609: <92> lw	ra, 12(sp) %
000005e5 : 01010113;   % 609: <93> addi 	sp, sp, 16 %
000005e6 : 04002ef3;   % 609: <94> csrr	t4,uscratch %
000005e7 : 00058463;   % 609: <109> beqz 	a1,div10.pula2_M21 %
000005e8 : 41d00eb3;   % 609: <110> neg 	t4,t4 %
000005e9 : 040e9073;   % 609: <111> div10.pula2_M21:	csrw	t4,uscratch %
000005ea : 00012503;   % 609: <112> lw	a0,0(sp) %
000005eb : 00412583;   % 609: <113> lw 	a1,4(sp) %
000005ec : 00812603;   % 609: <114> lw	a2,8(sp) %
000005ed : 00c10113;   % 609: <115> addi 	sp,sp,12 %
000005ee : 04002ef3;   % 609: <116> csrr	t4,uscratch %
000005ef : ff010113;   % 610: <145> addi 	sp,sp,-16 %
000005f0 : 00a12023;   % 610: <146> sw	a0,0(sp) %
000005f1 : 00b12223;   % 610: <147> sw	a1,4(sp) %
000005f2 : 00c12423;   % 610: <148> sw	a2,8(sp) %
000005f3 : 00d12623;   % 610: <149> sw	a3,12(sp) %
000005f4 : 00a006b3;   % 610: <151> mv 	a3,a0 %
000005f5 : 00a00613;   % 610: <152> li 	a2,10 %
000005f6 : ff410113;   % 610: <99> addi 	sp,sp,-12 %
000005f7 : 00a12023;   % 610: <100> sw	a0,0(sp) %
000005f8 : 00b12223;   % 610: <101> sw	a1,4(sp) %
000005f9 : 00c12423;   % 610: <102> sw	a2,8(sp) %
000005fa : 00d00633;   % 610: <103> mv 	a2,a3 %
000005fb : 41f65593;   % 610: <104> srai 	a1,a2,31 %
000005fc : 00c00533;   % 610: <105> mv 	a0,a2 %
000005fd : 00058463;   % 610: <106> beqz 	a1,div10.pula1_M24 %
000005fe : 40c00533;   % 610: <107> neg 	a0,a2 %
000005ff : ff010113;   % 610: <65> addi 	sp, sp, -16 %
00000600 : 00a12023;   % 610: <66> sw	a0, 0(sp) %
00000601 : 00e12223;   % 610: <67> sw	a4, 4(sp) %
00000602 : 00f12423;   % 610: <68> sw	a5, 8(sp) %
00000603 : 00112623;   % 610: <69> sw	ra, 12(sp) %
00000604 : 00a00533;   % 610: <70> mv 	a0, a0 %
00000605 : 00155713;   % 610: <71> srli    a4,a0,1 %
00000606 : 00255793;   % 610: <72> srli    a5,a0,2 %
00000607 : 00f707b3;   % 610: <73> add     a5,a4,a5 %
00000608 : 0047d713;   % 610: <74> srli    a4,a5,4 %
00000609 : 00f70733;   % 610: <75> add     a4,a4,a5 %
0000060a : 00875793;   % 610: <76> srli    a5,a4,8 %
0000060b : 00e78733;   % 610: <77> add     a4,a5,a4 %
0000060c : 01075793;   % 610: <78> srli    a5,a4,16 %
0000060d : 00e787b3;   % 610: <79> add     a5,a5,a4 %
0000060e : 0037d793;   % 610: <80> srli    a5,a5,3 %
0000060f : 00279713;   % 610: <81> slli    a4,a5,2 %
00000610 : 00f70733;   % 610: <82> add     a4,a4,a5 %
00000611 : 00171713;   % 610: <83> slli    a4,a4,1 %
00000612 : 40e50533;   % 610: <84> sub     a0,a0,a4 %
00000613 : 00a53513;   % 610: <85> sltiu   a0,a0,10 %
00000614 : 00154513;   % 610: <86> xori    a0,a0,1 %
00000615 : 00f50533;   % 610: <87> add     a0,a0,a5 %
00000616 : 04051073;   % 610: <88> csrw	a0,uscratch %
00000617 : 00012503;   % 610: <89> lw	a0, 0(sp) %
00000618 : 00412703;   % 610: <90> lw	a4, 4(sp) %
00000619 : 00812783;   % 610: <91> lw	a5, 8(sp) %
0000061a : 00c12083;   % 610: <92> lw	ra, 12(sp) %
0000061b : 01010113;   % 610: <93> addi 	sp, sp, 16 %
0000061c : 04002573;   % 610: <94> csrr	a0,uscratch %
0000061d : 00058463;   % 610: <109> beqz 	a1,div10.pula2_M24 %
0000061e : 40a00533;   % 610: <110> neg 	a0,a0 %
0000061f : 04051073;   % 610: <111> div10.pula2_M24:	csrw	a0,uscratch %
00000620 : 00012503;   % 610: <112> lw	a0,0(sp) %
00000621 : 00412583;   % 610: <113> lw 	a1,4(sp) %
00000622 : 00812603;   % 610: <114> lw	a2,8(sp) %
00000623 : 00c10113;   % 610: <115> addi 	sp,sp,12 %
00000624 : 04002573;   % 610: <116> csrr	a0,uscratch %
00000625 : ff410113;   % 610: <45> addi 	sp, sp, -12 %
00000626 : 00a12023;   % 610: <46> sw	a0, 0(sp) %
00000627 : 00b12223;   % 610: <47> sw	a1, 4(sp) %
00000628 : 00112423;   % 610: <48> sw	ra, 8(sp) %
00000629 : 00a00533;   % 610: <50> mv 	a0, a0 %
0000062a : 00c005b3;   % 610: <51> mv 	a1, a2 %
0000062b : 6ad000ef;   % 610: <52> jal 	__mulsi3 %
0000062c : 04051073;   % 610: <53> csrw	a0,uscratch %
0000062d : 00012503;   % 610: <55> lw	a0, 0(sp) %
0000062e : 00412583;   % 610: <56> lw	a1, 4(sp) %
0000062f : 00812083;   % 610: <57> lw	ra, 8(sp) %
00000630 : 00c10113;   % 610: <58> addi 	sp, sp, 12 %
00000631 : 040025f3;   % 610: <59> csrr	a1,uscratch %
00000632 : 40b68e33;   % 610: <155> sub 	t3,a3,a1 %
00000633 : 040e1073;   % 610: <157> csrw	t3,uscratch %
00000634 : 00012503;   % 610: <158> lw	a0,0(sp) %
00000635 : 00412583;   % 610: <159> lw 	a1,4(sp) %
00000636 : 00812603;   % 610: <160> lw	a2,8(sp) %
00000637 : 00c12683;   % 610: <161> lw 	a3,12(sp) %
00000638 : 01010113;   % 610: <162> addi 	sp,sp,16 %
00000639 : 04002e73;   % 610: <163> csrr	t3,uscratch %
0000063a : 00c0006f;   % 611: 		j 	printInt.pula1d %
0000063b : 02754eb3;   % 612: printInt.pula1:	div 	t4, a0, t2			# divide por 10 (quociente) %
0000063c : 02756e33;   % 613: 		rem 	t3, a0, t2			# resto %
0000063d : ffc10113;   % 614: printInt.pula1d:addi 	sp, sp, -4			# aloca espaco na pilha %
0000063e : 01c12023;   % 615: 		sw 	t3, 0(sp)			# coloca resto na pilha %
0000063f : 01d00533;   % 616: 		mv 	a0, t4				# atualiza o numero com o quociente %
00000640 : 00130313;   % 617: 		addi 	t1, t1, 1			# incrementa o contador de digitos %
00000641 : de0516e3;   % 618: 		bne 	a0, zero, loop1printInt		# verifica se o numero eh zero %
00000642 : 00012383;   % 620: loop2printInt:	lw 	t2, 0(sp)			# le digito da pilha %
00000643 : 00410113;   % 621: 		addi 	sp, sp, 4			# libera espaco %
00000644 : 03038393;   % 622: 		addi 	t2, t2, 48			# converte o digito para ascii %
00000645 : 00728023;   % 623: 		sb 	t2, 0(t0)			# coloca caractere no buffer %
00000646 : 00128293;   % 624: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
00000647 : fff30313;   % 625: 		addi 	t1, t1, -1			# decrementa contador de digitos %
00000648 : fe0314e3;   % 626: 		bne 	t1, zero, loop2printInt		# eh o ultimo? %
00000649 : 00028023;   % 627: 		sb 	zero, 0(t0)			# insere \NULL na string %
0000064a : 0fc0f517;   % 629: 		la 	a0, TempBuffer			# Endereco do buffer da srting %
0000064b : cc850513;   % 629:  %
0000064c : 084000ef;   % 630: 		jal 	printString			# chama o print string %
0000064d : 00012083;   % 632: 		lw 	ra, 0(sp)			# recupera a %
0000064e : 00410113;   % 633: 		addi 	sp, sp, 4			# libera espaco %
0000064f : 00008067;   % 634: fimprintInt:	ret					# retorna %
00000650 : ffc10113;   % 646: printHex:	addi    sp, sp, -4    		# aloca espaco %
00000651 : 00112023;   % 647:     		sw      ra, 0(sp)		# salva ra %
00000652 : 00a002b3;   % 648: 		mv 	t0, a0			# Inteiro de 32 bits a ser impresso em Hexa %
00000653 : 0fc0f317;   % 649: 		la 	t1, TabelaHexASCII	# endereco da tabela HEX->ASCII %
00000654 : ea430313;   % 649:  %
00000655 : 0fc0f397;   % 650: 		la 	t2, TempBuffer		# onde a string sera montada %
00000656 : c9c38393;   % 650:  %
00000657 : 03000e13;   % 652: 		li 	t3,'0'			# Caractere '0' %
00000658 : 01c38023;   % 653: 		sb 	t3,0(t2)		# Escreve '0' no Buffer da String %
00000659 : 07800e13;   % 654: 		li 	t3,'x'			# Caractere 'x' %
0000065a : 01c380a3;   % 655: 		sb 	t3,1(t2)		# Escreve 'x' no Buffer da String %
0000065b : 00238393;   % 656: 		addi 	t2,t2,2			# novo endereco inicial da string %
0000065c : 01c00e13;   % 658: 		li 	t3, 28			# contador de nibble   inicio = 28 %
0000065d : 020e4263;   % 659: loopprintHex:	blt 	t3, zero, fimloopprintHex	# terminou? t3<0? %
0000065e : 01c2deb3;   % 660: 		srl 	t4, t0, t3		# desloca o nibble para direita %
0000065f : 00fefe93;   % 661: 		andi 	t4, t4, 0x000F		# mascara o nibble	 %
00000660 : 01d30eb3;   % 662: 		add 	t4, t1, t4		# endereco do ascii do nibble %
00000661 : 000e8e83;   % 663: 		lb 	t4, 0(t4)		# le ascii do nibble %
00000662 : 01d38023;   % 664: 		sb 	t4, 0(t2)		# armazena o ascii do nibble no buffer da string %
00000663 : 00138393;   % 665: 		addi 	t2, t2, 1		# incrementa o endereco do buffer %
00000664 : ffce0e13;   % 666: 		addi 	t3, t3, -4		# decrementa o numero do nibble %
00000665 : fe1ff06f;   % 667: 		j 	loopprintHex %
00000666 : 00038023;   % 669: fimloopprintHex: sb 	zero,0(t2)		# grava \null na string %
00000667 : 0fc0f517;   % 670: 		la 	a0, TempBuffer		# Argumento do print String %
00000668 : c5450513;   % 670:  %
00000669 : 010000ef;   % 671:     		jal	printString		# Chama o print string %
0000066a : 00012083;   % 673: 		lw 	ra, 0(sp)		# recupera ra %
0000066b : 00410113;   % 674: 		addi 	sp, sp, 4		# libera espaco %
0000066c : 00008067;   % 675: fimprintHex:	ret				# retorna %
0000066d : ff810113;   % 686: printString:	addi	sp, sp, -8			# aloca espaco %
0000066e : 00112023;   % 687:     		sw	ra, 0(sp)			# salva ra %
0000066f : 00812223;   % 688:     		sw	s0, 4(sp)			# salva s0 %
00000670 : 00a00433;   % 689:     		mv	s0, a0              		# s0 = endereco do caractere na string %
00000671 : 00040503;   % 691: loopprintString:lb	a0, 0(s0)                 	# le em a0 o caracter a ser impresso %
00000672 : 02050263;   % 693:     		beq     a0, zero, fimloopprintString	# string ASCIIZ termina com NULL %
00000673 : 030000ef;   % 695:     		jal     printChar       		# imprime char %
00000674 : 00858593;   % 697: 		addi    a1, a1, 8                 	# incrementa a coluna %
00000675 : 13900f93;   % 698: 		li 	t6, 313		 %
00000676 : 01f5c663;   % 699: 		blt	a1, t6, NaoPulaLinha	    	# se ainda tiver lugar na linha %
00000677 : 00860613;   % 700:     		addi    a2, a2, 8                 	# incrementa a linha %
00000678 : 000005b3;   % 701:     		mv    	a1, zero			# volta a coluna zero %
00000679 : 00140413;   % 703: NaoPulaLinha:	addi    s0, s0, 1			# proximo caractere %
0000067a : fddff06f;   % 704:     		j       loopprintString       		# volta ao loop %
0000067b : 00012083;   % 706: fimloopprintString:	lw      ra, 0(sp)    		# recupera ra %
0000067c : 00012403;   % 707: 			lw 	s0, 0(sp)		# recupera s0 original %
0000067d : 00810113;   % 708:     			addi    sp, sp, 8		# libera espaco %
0000067e : 00008067;   % 709: fimprintString:	ret      	    			# retorna %
0000067f : 0ff00e93;   % 731: printChar:	li 	t4, 0xFF	# t4 temporario %
00000680 : 008e9e93;   % 732: 		slli 	t4, t4, 8	# t4 = 0x0000FF00 (no RARS, nao podemos fazer diretamente "andi rd, rs1, 0xFF00") %
00000681 : 01d6ff33;   % 733: 		and    	t5, a3, t4   	# t5 obtem cor de fundo %
00000682 : 008f5f13;   % 734:     		srli	t5, t5, 8	# numero da cor de fundo %
00000683 : 0ff6ff93;   % 735: 		andi   	t6, a3, 0xFF    # t6 obtem cor de frente %
00000684 : 02000213;   % 737: 		li 	tp, ' ' %
00000685 : 00454863;   % 738: 		blt 	a0, tp, printChar.NAOIMPRIMIVEL	# ascii menor que 32 nao eh imprimivel %
00000686 : 07e00213;   % 739: 		li 	tp, '~' %
00000687 : 00a24463;   % 740: 		bgt	a0, tp, printChar.NAOIMPRIMIVEL	# ascii Maior que 126  nao eh imprimivel %
00000688 : 0080006f;   % 741:     		j       printChar.IMPRIMIVEL %
00000689 : 02000513;   % 743: printChar.NAOIMPRIMIVEL: li      a0, 32		# Imprime espaco %
0000068a : 14000213;   % 745: printChar.IMPRIMIVEL:	li	tp, 320		# Num colunas 320 %
0000068b : 30102c73;   % 746: <29> csrr s8, misa %
0000068c : 00cc5c13;   % 746: <30> srli s8, s8, 12 %
0000068d : 001c7c13;   % 746: <31> andi s8, s8, 0x001 %
0000068e : 020c1e63;   % 746: <32> bnez s8, printChar.mul1 %
0000068f : ff410113;   % 747: <45> addi 	sp, sp, -12 %
00000690 : 00a12023;   % 747: <46> sw	a0, 0(sp) %
00000691 : 00b12223;   % 747: <47> sw	a1, 4(sp) %
00000692 : 00112423;   % 747: <48> sw	ra, 8(sp) %
00000693 : 00400533;   % 747: <50> mv 	a0, tp %
00000694 : 00c005b3;   % 747: <51> mv 	a1, a2 %
00000695 : 505000ef;   % 747: <52> jal 	__mulsi3 %
00000696 : 04051073;   % 747: <53> csrw	a0,uscratch %
00000697 : 00012503;   % 747: <55> lw	a0, 0(sp) %
00000698 : 00412583;   % 747: <56> lw	a1, 4(sp) %
00000699 : 00812083;   % 747: <57> lw	ra, 8(sp) %
0000069a : 00c10113;   % 747: <58> addi 	sp, sp, 12 %
0000069b : 04002ef3;   % 747: <59> csrr	t4,uscratch %
0000069c : 0080006f;   % 748: 			j printChar.mul1d %
0000069d : 02c20eb3;   % 749: printChar.mul1:		mul     t4, tp, a2			# multiplica a2x320  t4 = coordenada y %
0000069e : 00be8eb3;   % 750: printChar.mul1d:	add     t4, t4, a1               	# t4 = 320*y + x %
0000069f : 007e8e93;   % 751: 			addi    t4, t4, 7                 	# t4 = 320*y + (x+7) %
000006a0 : ff000237;   % 752: 			li      tp, 0xFF000000          	# Endereco de inicio da memoria VGA0 %
000006a1 : 00020213;   % 752:  %
000006a2 : 00070663;   % 753: 			beq 	a4, zero, printChar.PULAFRAME		# Verifica qual o frame a ser usado em a4 %
000006a3 : ff100237;   % 754: 			li      tp, 0xFF100000          	# Endereco de inicio da memoria VGA1 %
000006a4 : 00020213;   % 754:  %
000006a5 : 004e8eb3;   % 755: printChar.PULAFRAME:	add     t4, t4, tp               	# t4 = endereco de impressao do ultimo pixel da primeira linha do char %
000006a6 : fe050393;   % 756: 			addi    t2, a0, -32               	# indice do char na memoria %
000006a7 : 00339393;   % 757: 			slli    t2, t2, 3                 	# offset em bytes em relacao ao endereco inicial %
000006a8 : 0fc0ee17;   % 758: 			la      t3, LabelTabChar		# endereco dos caracteres na memoria %
000006a9 : 72ce0e13;   % 758:  %
000006aa : 01c383b3;   % 759: 			add     t2, t2, t3               	# endereco do caractere na memoria %
000006ab : 0003ae03;   % 760: 			lw      t3, 0(t2)                 	# carrega a primeira word do char %
000006ac : 00400293;   % 761: 			li 	t0, 4				# i=4 %
000006ad : 02028e63;   % 763: printChar.forChar1I:	beq     t0, zero, printChar.endForChar1I # if(i == 0) end for i %
000006ae : 00800313;   % 764:     			addi    t1, zero, 8               	# j = 8 %
000006af : 02030463;   % 766: printChar.forChar1J:	beq     t1, zero, printChar.endForChar1J # if(j == 0) end for j %
000006b0 : 001e7c93;   % 767:         		andi    s9, t3, 0x001			# primeiro bit do caracter %
000006b1 : 001e5e13;   % 768:         		srli    t3, t3, 1             		# retira o primeiro bit %
000006b2 : 000c8663;   % 769:         		beq     s9, zero, printChar.printCharPixelbg1	# pixel eh fundo? %
000006b3 : 01fe8023;   % 770:         		sb      t6, 0(t4)             		# imprime pixel com cor de frente %
000006b4 : 0080006f;   % 771:         		j       printChar.endCharPixel1 %
000006b5 : 01ee8023;   % 772: printChar.printCharPixelbg1:	sb      t5, 0(t4)                # imprime pixel com cor de fundo %
000006b6 : fff30313;   % 773: printChar.endCharPixel1: addi    t1, t1, -1                	# j-- %
000006b7 : fffe8e93;   % 774:     			addi    t4, t4, -1                	# t4 aponta um pixel para a esquerda %
000006b8 : fddff06f;   % 775:     			j       printChar.forChar1J		# vollta novo pixel %
000006b9 : fff28293;   % 777: printChar.endForChar1J: addi    t0, t0, -1 		# i-- %
000006ba : 148e8e93;   % 778:     			addi    t4, t4, 328           	# 2**12 + 8 %
000006bb : fc9ff06f;   % 779:     			j       printChar.forChar1I	# volta ao loop %
000006bc : 0043ae03;   % 781: printChar.endForChar1I:	lw      t3, 4(t2)           	# carrega a segunda word do char %
000006bd : 00400293;   % 782: 			li 	t0, 4			# i = 4 %
000006be : 02028e63;   % 783: printChar.forChar2I:    beq     t0, zero, printChar.endForChar2I  # if(i == 0) end for i %
000006bf : 00800313;   % 784:     			addi    t1, zero, 8             # j = 8 %
000006c0 : 02030463;   % 786: printChar.forChar2J:	beq	t1, zero, printChar.endForChar2J # if(j == 0) end for j %
000006c1 : 001e7c93;   % 787:         		andi    s9, t3, 0x001	    		# pixel a ser impresso %
000006c2 : 001e5e13;   % 788:         		srli    t3, t3, 1                 	# desloca para o proximo %
000006c3 : 000c8663;   % 789:         		beq     s9, zero, printChar.printCharPixelbg2 # pixel eh fundo? %
000006c4 : 01fe8023;   % 790:         		sb      t6, 0(t4)			# imprime cor frente %
000006c5 : 0080006f;   % 791:         		j       printChar.endCharPixel2		# volta ao loop %
000006c6 : 01ee8023;   % 793: printChar.printCharPixelbg2:	sb      t5, 0(t4)		# imprime cor de fundo %
000006c7 : fff30313;   % 795: printChar.endCharPixel2:	addi    t1, t1, -1		# j-- %
000006c8 : fffe8e93;   % 796:     				addi    t4, t4, -1              # t4 aponta um pixel para a esquerda %
000006c9 : fddff06f;   % 797:     				j       printChar.forChar2J %
000006ca : fff28293;   % 799: printChar.endForChar2J:	addi	t0, t0, -1 		# i-- %
000006cb : 148e8e93;   % 800:     			addi    t4, t4, 328		# %
000006cc : fc9ff06f;   % 801:     			j       printChar.forChar2I	# volta ao loop %
000006cd : 00008067;   % 803: printChar.endForChar2I:	ret				# retorna %
000006ce : 00000013;   % 812: readChar: 		nop %
000006cf : ff2002b7;   % 816: readCharKDMMIO:		li 	t0, 0xFF200000			# Execucao com Polling do KD MMIO %
000006d0 : 00028293;   % 816:  %
000006d1 : 0002a503;   % 818: loopReadCharKDMMIO:  	lw     	a0, 0(t0)   			# le o bit de flag do teclado %
000006d2 : 00157513;   % 819: 			andi 	a0, a0, 0x0001			# mascara bit 0 %
000006d3 : fe050ce3;   % 820: 			beqz    a0, loopReadCharKDMMIO  	# testa se uma tecla foi pressionada %
000006d4 : 0042a503;   % 821:    			lw 	a0, 4(t0)			# le o ascii da tecla pressionada %
000006d5 : 0800006f;   % 822: 			j fimreadChar				# fim Read Char %
000006d6 : ff2002b7;   % 829: readCharDE2:  	li      t0, 0xFF200100 			# Endereco buffer0 %
000006d7 : 10028293;   % 829:  %
000006d8 : 0002a303;   % 830:     		lw     	t1, 0(t0)				# conteudo inicial do buffer %
000006d9 : 0002a383;   % 832: loopReadChar:  	lw     	t2, 0(t0)   				# le buffer teclado %
000006da : 00639663;   % 833: 		bne     t2, t1, buffermodificadoChar    	# testa se o buffer foi modificado %
000006db : 00700333;   % 835: atualizaBufferChar:  mv t1, t2			# atualiza o buffer com o novo valor %
000006dc : ff5ff06f;   % 836:     		j       loopReadChar		# loop de principal de leitura  %
000006dd : 0ff00f13;   % 838: buffermodificadoChar:	li t5, 0xFF %
000006de : 008f1f13;   % 839: 	slli 	t5, t5, 8			# t5 = 0x0000FF00 %
000006df : 01e3fe33;   % 840: 	and    	t3, t2, t5 			# mascara o 2o scancode %
000006e0 : 0000f237;   % 841: 	li 	tp, 0x0000F000 %
000006e1 : 00020213;   % 841:  %
000006e2 : 024e0063;   % 842: 	beq     t3, tp, teclasoltaChar		# eh 0xF0 no 2o scancode? tecla foi solta %
000006e3 : 0ff00213;   % 843: 	li	tp, 0x000000FF %
000006e4 : 0043fe33;   % 844: 	and	t3, t2, tp			# mascara 1o scancode	(essa podemos fazer diretamente) %
000006e5 : 01200213;   % 845: 	li	tp, 0x00000012 %
000006e6 : fc4e1ae3;   % 846:     	bne 	t3, tp, atualizaBufferChar	# nao eh o SHIFT que esta pressionado ? volta a ler  %
000006e7 : 0fc0f417;   % 847: 	la      s0, LabelScanCodeShift		# se for SHIFT que esta pressionado atualiza o endereco da tabel %
000006e8 : 9ce40413;   % 847:  %
000006e9 : fc9ff06f;   % 848:     	j       atualizaBufferChar		# volta a ler %
000006ea : 0ff3fe13;   % 850: teclasoltaChar:		andi t3, t2, 0x00FF		# mascara o 1o scancode %
000006eb : 08000213;   % 851: 	li	tp, 0x00000080 %
000006ec : fbc24ee3;   % 852:   	bgt	t3, tp, atualizaBufferChar		# se o scancode for > 0x80 entao nao eh imprimivel! %
000006ed : 01200213;   % 853:   	li	tp, 0x00000012 %
000006ee : 004e1863;   % 854: 	bne 	t3, tp, naoehshiftChar			# nao foi o shift que foi solto? entao processa %
000006ef : 0fc0f417;   % 855: 	la 	s0, LabelScanCode			# shift foi solto atualiza o endereco da tabela %
000006f0 : 92840413;   % 855:  %
000006f1 : fa9ff06f;   % 856: 	j 	atualizaBufferChar			# volta a ler %
000006f2 : 01c40e33;   % 858: naoehshiftChar:	   	add     t3, s0, t3              # endereco na tabela de scancode da tecla com ou sem shift %
000006f3 : 000e0503;   % 859:     	lb      a0, 0(t3)				# le o ascii do caracter para a0 %
000006f4 : f8050ee3;   % 860:     	beq     a0, zero, atualizaBufferChar		# se for caractere nao imprimivel volta a ler %
000006f5 : 00008067;   % 862: fimreadChar: 	ret			# retorna %
000006f6 : ff810113;   % 874: readString: 	addi 	sp, sp, -8			# reserva espaco na pilha %
000006f7 : 00812223;   % 875: 		sw 	s0, 4(sp)			# salva s0 %
000006f8 : 00112023;   % 876: 		sw 	ra, 0(sp)			# salva ra %
000006f9 : 00000693;   % 877: 		li 	a3, 0				# zera o contador de caracteres digitados %
000006fa : 00a00933;   % 878: 		mv 	s2, a0				# salva o endereco inicial %
000006fb : 0fc0f417;   % 879:     		la      s0, LabelScanCode      		# Endereco da tabela de scancode inicial para readChar %
000006fc : 8f840413;   % 879:  %
000006fd : 04d58c63;   % 881: loopreadString: beq 	a1, a3, fimreadString   	# buffer cheio fim %
000006fe : ff810113;   % 883: 		addi 	sp, sp, -8 %
000006ff : 00112023;   % 884: 		sw 	ra, 0(sp)			# salva ra %
00000700 : 00a12223;   % 885: 		sw 	a0, 4(sp)			# salva a0 pois ele sera reescrito em readChar %
00000701 : f35ff0ef;   % 886: 		jal 	readChar			# le um caracter do teclado (retorno em a0) %
00000702 : 00a00fb3;   % 887: 		mv 	t6, a0				# t6 eh a letra lida em readChar %
00000703 : 00012083;   % 888: 		lw 	ra, 0(sp) %
00000704 : 00412503;   % 889: 		lw 	a0, 4(sp) %
00000705 : 00810113;   % 890: 		addi 	sp, sp, 8 %
00000706 : 00800213;   % 892: 		li 	tp, 0x08			 %
00000707 : 004f9c63;   % 893: 		bne	t6, tp, PulaBackSpace		# Se nao for BACKSPACE %
00000708 : fcd00ae3;   % 894: 		beq	zero, a3, loopreadString	# Se n�o tem nenhum caractere no buffer apenas volta a ler %
00000709 : fff68693;   % 895: 		addi	a3, a3, -1			# diminui contador %
0000070a : fff50513;   % 896: 		addi 	a0, a0, -1			# diminui endereco do buffer %
0000070b : 00050023;   % 897: 		sb 	zero, 0(a0)			# coloca zero no caractere anterior %
0000070c : fc5ff06f;   % 898: 		j loopreadString %
0000070d : 00a00213;   % 900: PulaBackSpace:	li	tp, 0x0A %
0000070e : 004f8a63;   % 901: 		beq 	t6, tp, fimreadString		# se for tecla ENTER fim %
0000070f : 01f50023;   % 902: 		sb 	t6, 0(a0)			# grava no buffer %
00000710 : 00168693;   % 903: 		addi 	a3, a3, 1			# incrementa contador %
00000711 : 00150513;   % 904: 		addi 	a0, a0, 1			# incrementa endereco no buffer %
00000712 : fadff06f;   % 905: 		j loopreadString			# volta a ler outro caractere %
00000713 : 00050023;   % 907: fimreadString: 	sb 	zero, 0(a0)			# grava NULL no buffer %
00000714 : fff50613;   % 908: 		addi 	a2, a0, -1			# Para que a2 tenha o endereco do ultimo caractere digitado %
00000715 : 01200533;   % 909: 		mv	a0, s2				# a0 volta a ter o endereco inicial da string %
00000716 : 00012083;   % 910: 		lw 	ra, 0(sp)			# recupera ra %
00000717 : 00412403;   % 911: 		lw	s0, 4(sp)			# recupera s0 %
00000718 : 00810113;   % 912: 		addi 	sp, sp, 8			# libera espaco %
00000719 : 00008067;   % 913: 		ret					# retorna %
0000071a : ffc10113;   % 922: readInt: 	addi 	sp,sp,-4		# reserva espaco na pilha %
0000071b : 00112023;   % 923: 	sw 	ra, 0(sp)			# salva ra %
0000071c : 0fc0f517;   % 924: 	la 	a0, TempBuffer			# Endereco do buffer de string %
0000071d : 98050513;   % 924:  %
0000071e : 00a00593;   % 925: 	li 	a1, 10				# numero maximo de digitos %
0000071f : f5dff0ef;   % 926: 	jal 	readString			# le uma string de ate 10 digitos, a3 numero de digitos %
00000720 : 00c002b3;   % 927: 	mv 	t0, a2				# copia endereco do ultimo digito %
00000721 : 00a00393;   % 928: 	li 	t2, 10				# dez %
00000722 : 00100e13;   % 929: 	li 	t3, 1				# dezenas, centenas, etc %
00000723 : 00000533;   % 930: 	mv 	a0, zero			# zera o numero %
00000724 : 0c068e63;   % 932: loopReadInt: 	beq	a3,zero, fimReadInt	# Leu todos os digitos %
00000725 : 00028303;   % 933: 	lb 	t1, (t0)			# le um digito %
00000726 : 02d00213;   % 934: 	li	tp, 0x0000002D %
00000727 : 0c430663;   % 935: 	beq 	t1, tp, ehnegReadInt		# = '-' %
00000728 : 02b00213;   % 936: 	li	tp, 0x0000002B %
00000729 : 0c430463;   % 937: 	beq 	t1, tp, ehposReadInt		# = '+' %
0000072a : 03000213;   % 938: 	li	tp, 0x00000030 %
0000072b : 0a434c63;   % 939: 	blt 	t1, tp, naoehReadInt		# <'0' %
0000072c : 03900213;   % 940: 	li	tp, 0x00000039 %
0000072d : 0a624863;   % 941: 	bgt 	t1, tp, naoehReadInt		# >'9' %
0000072e : fd030313;   % 942: 	addi 	t1, t1, -48			# transforma ascii em numero %
0000072f : 30102c73;   % 943: <29> csrr s8, misa %
00000730 : 00cc5c13;   % 943: <30> srli s8, s8, 12 %
00000731 : 001c7c13;   % 943: <31> andi s8, s8, 0x001 %
00000732 : 020c1e63;   % 943: <32> bnez s8, readInt.mul1 %
00000733 : ff410113;   % 944: <45> addi 	sp, sp, -12 %
00000734 : 00a12023;   % 944: <46> sw	a0, 0(sp) %
00000735 : 00b12223;   % 944: <47> sw	a1, 4(sp) %
00000736 : 00112423;   % 944: <48> sw	ra, 8(sp) %
00000737 : 00600533;   % 944: <50> mv 	a0, t1 %
00000738 : 01c005b3;   % 944: <51> mv 	a1, t3 %
00000739 : 275000ef;   % 944: <52> jal 	__mulsi3 %
0000073a : 04051073;   % 944: <53> csrw	a0,uscratch %
0000073b : 00012503;   % 944: <55> lw	a0, 0(sp) %
0000073c : 00412583;   % 944: <56> lw	a1, 4(sp) %
0000073d : 00812083;   % 944: <57> lw	ra, 8(sp) %
0000073e : 00c10113;   % 944: <58> addi 	sp, sp, 12 %
0000073f : 04002373;   % 944: <59> csrr	t1,uscratch %
00000740 : 0080006f;   % 945: 	j readInt.mul1d %
00000741 : 03c30333;   % 946: readInt.mul1: 	mul 	t1, t1, t3			# multiplica por dezenas/centenas %
00000742 : 00650533;   % 947: readInt.mul1d:	add 	a0, a0, t1			# soma no numero %
00000743 : 30102c73;   % 948: <29> csrr s8, misa %
00000744 : 00cc5c13;   % 948: <30> srli s8, s8, 12 %
00000745 : 001c7c13;   % 948: <31> andi s8, s8, 0x001 %
00000746 : 020c1e63;   % 948: <32> bnez s8, readInt.mul2 %
00000747 : ff410113;   % 949: <45> addi 	sp, sp, -12 %
00000748 : 00a12023;   % 949: <46> sw	a0, 0(sp) %
00000749 : 00b12223;   % 949: <47> sw	a1, 4(sp) %
0000074a : 00112423;   % 949: <48> sw	ra, 8(sp) %
0000074b : 01c00533;   % 949: <50> mv 	a0, t3 %
0000074c : 007005b3;   % 949: <51> mv 	a1, t2 %
0000074d : 225000ef;   % 949: <52> jal 	__mulsi3 %
0000074e : 04051073;   % 949: <53> csrw	a0,uscratch %
0000074f : 00012503;   % 949: <55> lw	a0, 0(sp) %
00000750 : 00412583;   % 949: <56> lw	a1, 4(sp) %
00000751 : 00812083;   % 949: <57> lw	ra, 8(sp) %
00000752 : 00c10113;   % 949: <58> addi 	sp, sp, 12 %
00000753 : 04002e73;   % 949: <59> csrr	t3,uscratch %
00000754 : 0080006f;   % 950: 	j readInt.mul2d %
00000755 : 027e0e33;   % 951: readInt.mul2: 	mul 	t3, t3, t2			# proxima dezena/centena %
00000756 : fff28293;   % 952: readInt.mul2d:	addi 	t0, t0, -1			# busca o digito anterior %
00000757 : fff68693;   % 953: 	addi	a3, a3, -1			# reduz o contador de digitos  %
00000758 : f31ff06f;   % 954: 	j 	loopReadInt			# volta para buscar proximo digito %
00000759 : 0080006f;   % 957: 		j fimReadInt			# como nao esta implmentado apenas retorna %
0000075a : 40a00533;   % 959: ehnegReadInt:	sub a0,zero,a0			# se for negativo %
0000075b : 00012083;   % 963: fimReadInt:	lw 	ra, 0(sp)		# recupera ra %
0000075c : 00410113;   % 964: 		addi 	sp, sp, 4		# libera espaco %
0000075d : 00008067;   % 965: 		ret				# fim ReadInt %
0000075e : 10008c37;   % 985: <9> li s8, 0x10008000	# carrega tp %
0000075f : 000c0c13;   % 985:  %
00000760 : 01819863;   % 985: <10> bne gp, s8, midiOutDE2	# Na DE1 gp = 0 ! N�o tem segmento .extern %
00000761 : 01f00893;   % 987: 	li a7,31		# Chama o ecall normal %
00000762 : 00000073;   % 988: 	ecall %
00000763 : 0600006f;   % 989: 	j fimmidiOut %
00000764 : ff2002b7;   % 991: midiOutDE2:	li      t0, 0xFF200178 %
00000765 : 17828293;   % 991:  %
00000766 : 00000333;   % 992:     		add     t1, zero, zero %
00000767 : 00f67393;   % 997:    	 	andi    t2, a2, 0x0000000F %
00000768 : 01b39393;   % 998:     		slli    t2, t2, 27 %
00000769 : 00736333;   % 999:     		or      t1, t1, t2 %
0000076a : 07f6f393;   % 1002:     		andi    t2, a3, 0x0000007F %
0000076b : 01439393;   % 1003:     		slli    t2, t2, 20 %
0000076c : 00736333;   % 1004:     		or      t1, t1, t2 %
0000076d : 07f57393;   % 1007:     		andi    t2, a0, 0x0000007F %
0000076e : 00d39393;   % 1008:     		slli    t2, t2, 13 %
0000076f : 00736333;   % 1009:     		or      t1, t1, t2 %
00000770 : 1ff00e93;   % 1012: 		li 	t4, 0x1FF %
00000771 : 004e9e93;   % 1013: 		slli 	t4, t4, 4 %
00000772 : 00fe8e93;   % 1014: 		addi 	t4, t4, 0x00F			# t4 = 0x00001FFF %
00000773 : 01d5f3b3;   % 1015:     		and    	t2, a1, t4 %
00000774 : 00736333;   % 1016:     		or      t1, t1, t2 %
00000775 : 0040006f;   % 1019:     		j       SintMidOut %
00000776 : 0062a023;   % 1021: SintMidOut:	sw	t1, 0(t0) %
00000777 : ff2003b7;   % 1024: 	    		li      t2, 0xFF20017C %
00000778 : 17c38393;   % 1024:  %
00000779 : 0003ae03;   % 1025: Check_AUD_DACLRCK:     	lw      t3, 0(t2) %
0000077a : fe0e0ee3;   % 1026:     			beq     t3, zero, Check_AUD_DACLRCK %
0000077b : 00008067;   % 1028: fimmidiOut:    		ret %
0000077c : 10008c37;   % 1046: <9> li s8, 0x10008000	# carrega tp %
0000077d : 000c0c13;   % 1046:  %
0000077e : 01819863;   % 1046: <10> bne gp, s8, midiOutSyncDE2	# Na DE1 gp = 0 ! N�o tem segmento .extern %
0000077f : 02100893;   % 1048: 	li a7,33		# Chama o ecall normal %
00000780 : 00000073;   % 1049: 	ecall %
00000781 : 0780006f;   % 1050: 	j fimmidiOutSync %
00000782 : ff2002b7;   % 1052: midiOutSyncDE2:	li      t0, 0xFF200178 %
00000783 : 17828293;   % 1052:  %
00000784 : 00000333;   % 1053:     		add     t1, zero, zero %
00000785 : 08000337;   % 1056:     		lui    	t1, 0x08000 %
00000786 : 00431313;   % 1057: 		slli	t1,t1,4 %
00000787 : 00f67393;   % 1060:     		andi    t2, a2, 0x00F %
00000788 : 01b39393;   % 1061:     		slli    t2, t2, 27 %
00000789 : 00736333;   % 1062:     		or      t1, t1, t2 %
0000078a : 07f6f393;   % 1065:     		andi    t2, a3, 0x07F %
0000078b : 01439393;   % 1066:     		slli    t2, t2, 20 %
0000078c : 00736333;   % 1067:     		or      t1, t1, t2 %
0000078d : 07f57393;   % 1070:     		andi    t2, a0, 0x07F %
0000078e : 00d39393;   % 1071:     		slli    t2, t2, 13 %
0000078f : 00736333;   % 1072:     		or      t1, t1, t2 %
00000790 : 1ff00e93;   % 1075: 		li 	t4, 0x1FF %
00000791 : 004e9e93;   % 1076: 		slli 	t4, t4, 4 %
00000792 : 00fe8e93;   % 1077: 		addi 	t4, t4, 0x00F			# t4 = 0x00001FFF %
00000793 : 01d5f3b3;   % 1078:     		and    	t2, a1, t4 %
00000794 : 00736333;   % 1079:     		or      t1, t1, t2 %
00000795 : 0040006f;   % 1082:     		j       SintMidOutSync %
00000796 : 0062a023;   % 1084: SintMidOutSync:	sw	t1, 0(t0) %
00000797 : ff2003b7;   % 1087:     		li      t2, 0xFF20017C %
00000798 : 17c38393;   % 1087:  %
00000799 : ff200eb7;   % 1088:     		li      t4, 0xFF200180 %
0000079a : 180e8e93;   % 1088:  %
0000079b : 0003ae03;   % 1090: Check_AUD_DACLRCKSync:	lw      t3, 0(t2) %
0000079c : fe0e0ee3;   % 1091:     			beq     t3, zero, Check_AUD_DACLRCKSync %
0000079d : 000eaf03;   % 1093: Melody:     	lw      t5, 0(t4) %
0000079e : fe0f1ee3;   % 1094:     		bne     t5, zero, Melody %
0000079f : 00008067;   % 1096: fimmidiOutSync:	ret %
000007a0 : ffc10113;   % 1106: printFloat:	addi 	sp, sp, -4 %
000007a1 : 00112023;   % 1107: 		sw 	ra, 0(sp)				# salva ra %
000007a2 : 0fc0e417;   % 1108: 		la 	s0, TempBuffer %
000007a3 : 76840413;   % 1108:  %
000007a4 : 02b00293;   % 1111: 		li 	t0, '+'			# define sinal '+' %
000007a5 : e00504d3;   % 1112: 		fmv.x.s s1, fa0			# recupera o numero float sem conversao %
000007a6 : 01f4d493;   % 1113: 		srli	s1, s1, 31		# bit 31(sinal) em bit 0, numero eh negativo s1=1 %
000007a7 : 00048463;   % 1114: 		beq 	s1, zero, ehposprintFloat	# eh positivo s1=0 %
000007a8 : 02d00293;   % 1115: 		li 	t0, '-'				# define sinal '-' %
000007a9 : 00540023;   % 1116: ehposprintFloat: sb 	t0, 0(s0)			# coloca sinal no buffer %
000007aa : 00140413;   % 1117: 		addi 	s0, s0, 1			# incrementa o endereco do buffer %
000007ab : e00502d3;   % 1120: 		 fmv.x.s t0, fa0			# recupera o numero float sem conversao %
000007ac : 7f800337;   % 1121: 		 lui	t1, 0x7F800 %
000007ad : 0062f2b3;   % 1122: 		 and 	t0, t0, t1   			# mascara com 0111 1111 1000 0000 0000 0000... %
000007ae : 00129293;   % 1123: 		 slli 	t0, t0, 1			# tira o sinal do numero %
000007af : 0182d293;   % 1124: 		 srli 	t0, t0, 24			# recupera o expoente %
000007b0 : e0050353;   % 1127: 		fmv.x.s t1, fa0				# recupera o numero float sem conversao %
000007b1 : 008003b7;   % 1128: 		li 	t2, 0x007FFFFF			# t2 = 0x007FFFFF %
000007b2 : fff38393;   % 1128:  %
000007b3 : 00737333;   % 1129: 		and 	t1, t1, t2			# mascara com 0000 0000 0111 1111 1111... 		  %
000007b4 : 14028c63;   % 1131: 		beq 	t0, zero, ehExp0printFloat	# Expoente = 0 %
000007b5 : 0ff00213;   % 1132: 		li	tp, 0x000000FF			# TP = 255 %
000007b6 : 16428c63;   % 1133: 		beq 	t0, tp, ehExp255printFloat	# Expoente = 255 %
000007b7 : 20a52053;   % 1137: 		fabs.s 		ft0, fa0		# ft0 recebe o modulo  de x %
000007b8 : 00100213;   % 1138: 		li		tp, 1 %
000007b9 : d00270d3;   % 1139: 		fcvt.s.w 	ft1, tp			# ft1 recebe o numero 1.0 %
000007ba : 00a00213;   % 1140: 		li		tp, 10 %
000007bb : d0027353;   % 1141: 		fcvt.s.w 	ft6, tp			# ft6 recebe o numero 10.0 %
000007bc : 00200213;   % 1142: 		li		tp, 2 %
000007bd : d0027e53;   % 1143: 		fcvt.s.w 	ft8, tp %
000007be : 19c0f3d3;   % 1144: 		fdiv.s		ft7, ft1, ft8		# ft7 recebe o numero 0.5 %
000007bf : a0101ed3;   % 1146: 		flt.s 	t4, ft0, ft1		# ft0 < 1.0 ? Se sim, E deve ser negativo %
000007c0 : 000e9663;   % 1147: 		bnez	t4, menor1printFloat	# se a comparacao deu true (1), pula %
000007c1 : 20630153;   % 1148: 		fmv.s 	ft2, ft6		# ft2  fator de multiplicacao = 10 %
000007c2 : 02c0006f;   % 1149: 		j 	cont2printFloat		# vai para expoente positivo %
000007c3 : 1860f153;   % 1150: menor1printFloat: fdiv.s ft2,ft1,ft6		# ft2 fator multiplicativo = 0.1 %
000007c4 : 20000253;   % 1153: cont1printFloat: 	fmv.s 	ft4, ft0			# inicia com o numero x  %
000007c5 : 201081d3;   % 1154: 		 	fmv.s 	ft3, ft1			# contador comeca em 1 %
000007c6 : 18227253;   % 1155: loop1printFloat: 	fdiv.s 	ft4, ft4, ft2			# divide o numero pelo fator multiplicativo %
000007c7 : a0120e53;   % 1156: 		 	fle.s 	t3, ft4, ft1			# o numero eh > que 1? entao fim %
000007c8 : 000e0663;   % 1157: 		 	beq 	t3,zero, fimloop1printFloat %
000007c9 : 0011f1d3;   % 1158: 		 	fadd.s 	ft3, ft3, ft1			# incrementa o contador %
000007ca : ff1ff06f;   % 1159: 		 	j 	loop1printFloat			# volta ao loop %
000007cb : 18227253;   % 1161: fimloop1printFloat: 	fdiv.s 	ft4, ft4, ft2			# ajusta o numero %
000007cc : 0200006f;   % 1162: 		 	j 	intprintFloat			# vai para imprimir a parte inteira %
000007cd : 20000253;   % 1165: cont2printFloat:	fmv.s 	 ft4, ft0			# inicia com o numero x  %
000007ce : d00071d3;   % 1166: 		 	fcvt.s.w ft3, zero			# contador comeca em 0 %
000007cf : a0621e53;   % 1167: loop2printFloat:  	flt.s 	 t3, ft4, ft6			# resultado eh < que 10? entao fim %
000007d0 : 18227253;   % 1168: 			fdiv.s 	 ft4, ft4, ft2			# divide o numero pelo fator multiplicativo %
000007d1 : 000e1663;   % 1169: 			bne 	 t3, zero, intprintFloat %
000007d2 : 0011f1d3;   % 1170: 		 	fadd.s 	 ft3, ft3, ft1			# incrementa o contador %
000007d3 : ff1ff06f;   % 1171: 		 	j 	 loop2printFloat %
000007d4 : 10227253;   % 1177: intprintFloat:		fmul.s 		ft4, ft4, ft2		# ajusta o numero %
000007d5 : 08727253;   % 1178: 			fsub.s		ft4, ft4, ft7		# tira 0.5, dessa forma sempre ao converter estaremos fazendo floor %
000007d6 : c00272d3;   % 1179: 		  	fcvt.w.s	t0, ft4			# coloca floor de ft4 em t0 %
000007d7 : 00727253;   % 1180: 			fadd.s		ft4, ft4, ft7		# readiciona 0.5 %
000007d8 : 00029463;   % 1181: 			bnez		t0, pulaeh1print	# para corrigir multiplos inteiros de 10! %
000007d9 : 00100293;   % 1182: 			li 		t0, 1 %
000007da : 03028293;   % 1183: pulaeh1print:		addi 		t0, t0, 48		# converte para ascii			 %
000007db : 00540023;   % 1184: 			sb 		t0, 0(s0)		# coloca no buffer %
000007dc : 00140413;   % 1185: 		  	addi 		s0, s0, 1		# incrementta o buffer %
000007dd : 02e00293;   % 1188: 		  	li 	t0, '.'				# carrega o '.' %
000007de : 00540023;   % 1189: 		  	sb 	t0, 0(s0)			# coloca no buffer %
000007df : 00140413;   % 1190: 		  	addi 	s0, s0, 1			# incrementa o buffer %
000007e0 : 00800313;   % 1193: 		  	li 		t1, 8				# contador de digitos  -  8 casas decimais %
000007e1 : 04030a63;   % 1194: loopfracprintFloat:  	beq 		t1, zero, fimfracprintFloat	# fim dos digitos? %
000007e2 : 08727253;   % 1195: 			fsub.s		ft4, ft4, ft7			# tira 0.5 %
000007e3 : c0027f53;   % 1196: 			fcvt.w.s 	t5, ft4				# floor de ft4 %
000007e4 : 00727253;   % 1197: 			fadd.s		ft4, ft4, ft7			# readiciona 0.5 %
000007e5 : d00f72d3;   % 1198: 			fcvt.s.w	ft5, t5				# reconverte em float so com a parte inteira %
000007e6 : 085272d3;   % 1199: 		  	fsub.s 		ft5, ft4, ft5			# parte fracionaria %
000007e7 : 1062f2d3;   % 1200: 		  	fmul.s 		ft5, ft5, ft6			# mult x 10 %
000007e8 : 0872f2d3;   % 1201: 			fsub.s		ft5, ft5, ft7			# tira 0.5 %
000007e9 : c002f2d3;   % 1202: 			fcvt.w.s	t0, ft5				# coloca floor de ft5 em 10 %
000007ea : 03028293;   % 1203: 		  	addi 		t0, t0, 48			# converte para ascii %
000007eb : 03000213;   % 1205: 			li 		tp, 48 %
000007ec : 0042c663;   % 1206: 			blt		t0, tp, pulaprtFloat1	# testa se eh menor que '0' %
000007ed : 03900213;   % 1207: 			li		tp, 57 %
000007ee : 00525463;   % 1208: 			ble		t0, tp, pulaprtFloat2	# testa se eh menor ou igual que '9' %
000007ef : 03000293;   % 1209: pulaprtFloat1:		li		t0, 48			# define como '0'		  			  	 %
000007f0 : 00540023;   % 1211: pulaprtFloat2:	  	sb 		t0, 0(s0)			# coloca no buffer %
000007f1 : 00140413;   % 1212: 		  	addi 		s0, s0, 1			# incrementa endereco %
000007f2 : fff30313;   % 1213: 		  	addi 		t1, t1, -1			# decrementa contador %
000007f3 : 0072f2d3;   % 1214: 			fadd.s		ft5, ft5, ft7			# reincrementa 0.5 %
000007f4 : 20528253;   % 1215: 		  	fmv.s 		ft4, ft5			# coloca o numero em ft4 %
000007f5 : fb1ff06f;   % 1216: 		  	j 		loopfracprintFloat		# volta ao loop %
000007f6 : 04500293;   % 1219: fimfracprintFloat: 	li 	t0,'E'			# carrega 'E' %
000007f7 : 00540023;   % 1220: 			sb 	t0, 0(s0)		# coloca no buffer %
000007f8 : 00140413;   % 1221: 			addi 	s0, s0, 1		# incrementa endereco %
000007f9 : 02b00293;   % 1224: 		  	li 	t0, '+'				# carrega '+' %
000007fa : 000e8463;   % 1225: 		  	beqz 	t4, expposprintFloat		# nao eh negativo? %
000007fb : 02d00293;   % 1226: 		  	li 	t0, '-'				# carrega '-' %
000007fc : 00540023;   % 1227: expposprintFloat: 	sb 	t0, 0(s0)			# coloca no buffer %
000007fd : 00140413;   % 1228: 		  	addi 	s0, s0, 1			#incrementa endereco %
000007fe : 00a00313;   % 1231: 			li 	t1, 10				# carrega 10	 %
000007ff : c001f253;   % 1232: 			fcvt.w.s  tp, ft3			# passa ft3 para t0 %
00000800 : 026242b3;   % 1233: 			div 	t0, tp, t1			# divide por 10 (dezena) %
00000801 : 026263b3;   % 1234: 			rem	t2, tp, t1			# t0 = quociente, t2 = resto %
00000802 : 03028293;   % 1235: 			addi 	t0, t0, 48			# converte para ascii %
00000803 : 00540023;   % 1236: 			sb 	t0, 0(s0)			# coloca no buffer %
00000804 : 03038393;   % 1237: 			addi 	t2, t2, 48			# converte para ascii %
00000805 : 007400a3;   % 1238: 			sb 	t2, 1(s0)			# coloca no buffer %
00000806 : 00040123;   % 1239: 			sb 	zero, 2(s0)			# insere \NULL da string %
00000807 : 0fc0e517;   % 1240: 			la 	a0, TempBuffer			# endereco do Buffer										 %
00000808 : 5d450513;   % 1240:  %
00000809 : 0500006f;   % 1241: 	  		j 	fimprintFloat			# imprime a string %
0000080a : 00030e63;   % 1243: ehExp0printFloat: 	beq 	t1, zero, eh0printFloat		# Verifica se eh zero %
0000080b : 0fc0e517;   % 1245: ehDesnormprintFloat: 	la 	a0, NumDesnormP			# string numero desnormalizado positivo %
0000080c : 7d750513;   % 1245:  %
0000080d : 04048063;   % 1246: 			beq 	s1, zero, fimprintFloat		# o sinal eh 1? entao eh negativo %
0000080e : 0fc0e517;   % 1247: 		 	la 	a0, NumDesnormN			# string numero desnormalizado negativo %
0000080f : 7d450513;   % 1247:  %
00000810 : 0340006f;   % 1248: 			j 	fimprintFloat			# imprime a string %
00000811 : 0fc0e517;   % 1250: eh0printFloat:		la 	a0, NumZero			# string do zero %
00000812 : 7d150513;   % 1250:  %
00000813 : 0280006f;   % 1251: 			j 	fimprintFloat 	 		# imprime a string %
00000814 : 00030863;   % 1253: ehExp255printFloat: 	beq 	t1, zero, ehInfprintFloat	# se mantissa eh zero entao eh Infinito %
00000815 : 0fc0e517;   % 1255: ehNaNprintfFloat:	la 	a0, NumNaN			# string do NaN %
00000816 : 7e050513;   % 1255:  %
00000817 : 0180006f;   % 1256: 			j 	fimprintFloat			# imprime string %
00000818 : 0fc0e517;   % 1258: ehInfprintFloat:	la 	a0, NumInfP			# string do infinito positivo %
00000819 : 7c050513;   % 1258:  %
0000081a : 00048663;   % 1259: 			beq 	s1, zero, fimprintFloat		# o sinal eh 1? entao eh negativo %
0000081b : 0fc0e517;   % 1260: 			la 	a0, NumInfN			# string do infinito negativo %
0000081c : 7be50513;   % 1260:  %
0000081d : 941ff0ef;   % 1263: fimprintFloat:		jal 	printString			# imprime a string em a0 %
0000081e : 00012083;   % 1264: 			lw 	ra, 0(sp)			# recupera ra %
0000081f : 00410113;   % 1265: 			addi 	sp, sp, 4			# libera espaco %
00000820 : 00008067;   % 1266: 			ret					# retorna %
00000821 : ffc10113;   % 1275: readFloat: addi sp, sp, -4			# aloca espaco %
00000822 : 00112023;   % 1276: 	sw 	ra, 0(sp)			# salva ra %
00000823 : 0fc0e517;   % 1277: 	la 	a0, TempBuffer			# endereco do FloatBuffer %
00000824 : 56450513;   % 1277:  %
00000825 : 02000593;   % 1278: 	li 	a1, 32				# numero maximo de caracteres %
00000826 : b41ff0ef;   % 1279: 	jal	readString			# le string, retorna a2 ultimo endereco e a3 numero de caracteres %
00000827 : 00c00433;   % 1280: 	mv 	s0, a2				# ultimo endereco da string (antes do \0) %
00000828 : 00d004b3;   % 1281: 	mv 	s1, a3				# numero de caracteres digitados %
00000829 : 0fc0eb97;   % 1282: 	la	s7, TempBuffer			# Endereco do primeiro caractere %
0000082a : 54cb8b93;   % 1282:  %
0000082b : 017002b3;   % 1284: lePrimeiroreadFloat:	mv 	t0, s7		# Endereco de Inicio %
0000082c : 00028303;   % 1285: 	lb 	t1, 0(t0)				# le primeiro caractere %
0000082d : 06500213;   % 1286: 	li	tp, 'e'					# TP = 101 = 'e' %
0000082e : 02430863;   % 1287: 	beq 	t1, tp, insere0AreadFloat		# insere '0' antes %
0000082f : 04500213;   % 1288: 	li 	tp, 'E'					# TP = 69 = 'E' %
00000830 : 02430463;   % 1289: 	beq 	t1, tp, insere0AreadFloat		# insere '0' antes %
00000831 : 02e00213;   % 1290: 	li	tp, '.'					# TP = 46 = '.' %
00000832 : 02430063;   % 1291: 	beq 	t1, tp, insere0AreadFloat		#  insere '0' antes %
00000833 : 02b00213;   % 1292: 	li	tp, '+'					# TP = 43 = '+' %
00000834 : 00430863;   % 1293: 	beq 	t1, tp, pulaPrimreadChar		# pula o primeiro caractere %
00000835 : 02d00213;   % 1294: 	li	tp, '-'					# TP = 45 = '-' %
00000836 : 00430463;   % 1295: 	beq 	t1, tp, pulaPrimreadChar %
00000837 : 03c0006f;   % 1296: 	j leUltimoreadFloat %
00000838 : 001b8b93;   % 1298: pulaPrimreadChar: addi s7,s7,1			# incrementa o endereco inicial %
00000839 : fc9ff06f;   % 1299: 		  j lePrimeiroreadFloat		# volta a testar o novo primeiro caractere %
0000083a : 008002b3;   % 1301: insere0AreadFloat: mv t0, s0			# endereco do ultimo caractere %
0000083b : 00140413;   % 1302: 		   addi s0, s0, 1		# desloca o ultimo endereco para o proximo %
0000083c : 00148493;   % 1303: 	   	   addi s1, s1, 1		# incrementa o num. caracteres %
0000083d : 000400a3;   % 1304: 	   	   sb 	zero, 1(s0)		# \NULL do final de string %
0000083e : 01700f33;   % 1305: 	   	   mv t5, s7			# primeiro caractere %
0000083f : 01e28a63;   % 1306: insere0Aloop:	   beq 	t0, t5, saiinsere0AreadFloat	# chegou no inicio entao fim %
00000840 : 00028303;   % 1307: 		   lb 	t1, 0(t0)		# le caractere %
00000841 : 006280a3;   % 1308: 		   sb 	t1, 1(t0)		# escreve no proximo %
00000842 : fff28293;   % 1309: 		   addi t0, t0, -1		# decrementa endereco %
00000843 : ff1ff06f;   % 1310: 		   j insere0Aloop		# volta ao loop %
00000844 : 03000313;   % 1311: saiinsere0AreadFloat: li t1, '0'		# ascii '0' %
00000845 : 00628023;   % 1312: 		   sb t1, 0(t0)			# escreve '0' no primeiro caractere %
00000846 : 00040303;   % 1314: leUltimoreadFloat: lb  	t1, 0(s0)			# le ultimo caractere %
00000847 : 06500213;   % 1315: 		li	tp, 'e'				# TP = 101 = 'e' %
00000848 : 00430c63;   % 1316: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
00000849 : 04500213;   % 1317: 		li 	tp, 'E'				# TP = 69 = 'E' %
0000084a : 00430863;   % 1318: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
0000084b : 02e00213;   % 1319: 		li	tp, '.'				# TP = 46 = '.' %
0000084c : 00430463;   % 1320: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
0000084d : 0180006f;   % 1321: 		j 	inicioreadFloat %
0000084e : 00140413;   % 1323: insere0PreadFloat: addi	s0, s0, 1		# desloca o ultimo endereco para o proximo %
0000084f : 00148493;   % 1324: 	   	   addi	s1, s1, 1		# incrementa o num. caracteres %
00000850 : 03000313;   % 1325: 		   li 	t1,'0'			# ascii '0' %
00000851 : 00640023;   % 1326: 		   sb 	t1,0(s0)		# escreve '0' no ultimo %
00000852 : 000400a3;   % 1327: 		   sb 	zero,1(s0)		# \null do final de string %
00000853 : d0007553;   % 1329: inicioreadFloat:  fcvt.s.w 	fa0, zero	# fa0 Resultado inicialmente zero %
00000854 : 00a00293;   % 1330: 		li 	t0, 10			# inteiro 10	 %
00000855 : d002f353;   % 1331: 		fcvt.s.w 	ft6, t0		# ft6 contem sempre o numero cte 10.0000 %
00000856 : 00100293;   % 1332: 		li 	t0, 1			# inteiro 1 %
00000857 : d002f0d3;   % 1333: 		fcvt.s.w 	ft1, t0		# ft1 contem sempre o numero cte 1.0000	 %
00000858 : 00140993;   % 1336: procuraEreadFloat:	addi 	s3, s0, 1			# inicialmente nao tem 'e' ou 'E' na string (fora da string) %
00000859 : 017002b3;   % 1337: 			mv 	t0, s7				# endereco inicial %
0000085a : 02828263;   % 1338: loopEreadFloat: 	beq 	t0, s0, naotemEreadFloat	# sai se nao encontrou 'e' %
0000085b : 00028303;   % 1339: 			lb 	t1, 0(t0)			# le o caractere %
0000085c : 06500213;   % 1340: 			li	tp, 'e'				# TP = 101 = 'e' %
0000085d : 00430a63;   % 1341: 			beq 	t1, tp, ehEreadFloat		# tem 'e' %
0000085e : 04500213;   % 1342: 			li 	tp, 'E'				# TP = 69 = 'E' %
0000085f : 00430663;   % 1343: 			beq	t1, tp, ehEreadFloat		# tem 'E' %
00000860 : 00128293;   % 1344: 			addi 	t0, t0, 1			# incrementa endereco %
00000861 : fe5ff06f;   % 1345: 			j 	loopEreadFloat			# volta ao loop %
00000862 : 005009b3;   % 1346: ehEreadFloat: 		mv 	s3, t0				# endereco do 'e' ou 'E' na string %
00000863 : 01300933;   % 1350: procuraPontoreadFloat:	mv 	s2, s3				# local inicial do ponto na string (='e' se existir) ou fora da string	 %
00000864 : 017002b3;   % 1351: 			mv 	t0, s7				# endereco inicial %
00000865 : 00828e63;   % 1352: loopPontoreadFloat: 	beq 	t0, s0, naotemPontoreadFloat	# sai se nao encontrou '.' %
00000866 : 00028303;   % 1353: 			lb 	t1, 0(t0)			# le o caractere %
00000867 : 02e00213;   % 1354: 			li	tp, '.'				# TP = 46 = '.' %
00000868 : 00430663;   % 1355: 			beq 	t1, tp, ehPontoreadFloat	# tem '.' %
00000869 : 00128293;   % 1356: 			addi 	t0, t0, 1			# incrementa endereco %
0000086a : fedff06f;   % 1357: 			j 	loopPontoreadFloat		# volta ao loop %
0000086b : 00500933;   % 1358: ehPontoreadFloat: 	mv 	s2, t0				# endereco do '.' na string %
0000086c : d0007153;   % 1362: intreadFloat:		fcvt.s.w 	ft2, zero		# zera parte inteira %
0000086d : fff90293;   % 1363: 			addi 	t0, s2, -1			# endereco do caractere antes do ponto %
0000086e : 201081d3;   % 1364: 			fmv.s 	ft3, ft1			# ft3 contem unidade/dezenas/centenas		 %
0000086f : 01700f33;   % 1365: 			mv 	t5, s7				# Primeiro Endereco %
00000870 : 03e2ca63;   % 1366: loopintreadFloat: 	blt 	t0, t5, fimintreadFloat		# sai se o endereco for < inicio da string %
00000871 : 00028303;   % 1367: 			lb 	t1, 0(t0)			# le o caracter %
00000872 : 03000213;   % 1368: 			li	tp, '0'				# TP = 48 = '0' %
00000873 : 10434863;   % 1369: 			blt 	t1, tp, erroreadFloat		# nao eh caractere valido para numero %
00000874 : 03900213;   % 1370: 			li	tp, '9'				# TP = 57 = '9' %
00000875 : 10624463;   % 1371: 			bgt 	t1, tp, erroreadFloat		# nao eh caractere valido para numero %
00000876 : fd030313;   % 1372: 			addi 	t1, t1, -48			# converte ascii para decimal %
00000877 : d0037153;   % 1373: 			fcvt.s.w  ft2, t1			# digito lido em float %
00000878 : 10317153;   % 1375: 			fmul.s 	ft2,ft2,ft3			# multiplica por un/dezena/centena %
00000879 : 00257553;   % 1376: 			fadd.s 	fa0,fa0,ft2			# soma no resultado %
0000087a : 1061f1d3;   % 1377: 			fmul.s 	ft3,ft3,ft6			# proxima dezena/centena %
0000087b : fff28293;   % 1379: 			addi 	t0,t0,-1			# endereco anterior %
0000087c : fd1ff06f;   % 1380: 			j 	loopintreadFloat		# volta ao loop %
0000087d : d0007153;   % 1384: fracreadFloat:		fcvt.s.w 	ft2, zero		# zera parte fracionaria %
0000087e : 00190293;   % 1385: 			addi 	t0, s2, 1			# endereco depois do ponto %
0000087f : 1860f1d3;   % 1386: 			fdiv.s 	ft3, ft1, ft6			# ft3 inicial 0.1 %
00000880 : 0332da63;   % 1388: loopfracreadFloat: 	bge 	t0, s3, fimfracreadFloat	# endereco eh 'e' 'E' ou >ultimo %
00000881 : 00028303;   % 1389: 			lb 	t1, 0(t0)			# le o caracter %
00000882 : 03000213;   % 1390: 			li	tp, '0'				# TP = 48 = '0' %
00000883 : 0c434863;   % 1391: 			blt 	t1, tp, erroreadFloat		# nao eh valido %
00000884 : 03900213;   % 1392: 			li	tp, '9'				# TP = 57 = '9' %
00000885 : 0c624463;   % 1393: 			bgt 	t1, tp, erroreadFloat		# nao eh valido %
00000886 : fd030313;   % 1394: 			addi 	t1, t1, -48			# converte ascii para decimal %
00000887 : d0037153;   % 1395: 			fcvt.s.w 	ft2, t1			# digito lido em float		 %
00000888 : 10317153;   % 1397: 			fmul.s 	ft2, ft2, ft3			# multiplica por ezena/centena %
00000889 : 00257553;   % 1398: 			fadd.s 	fa0, fa0, ft2			# soma no resultado %
0000088a : 1861f1d3;   % 1399: 			fdiv.s 	ft3, ft3, ft6			# proxima frac un/dezena/centena %
0000088b : 00128293;   % 1401: 			addi 	t0, t0, 1			# proximo endereco %
0000088c : fd1ff06f;   % 1402: 			j 	loopfracreadFloat		# volta ao loop		 %
0000088d : d0007153;   % 1407: potreadFloat:		fcvt.s.w 	ft2, zero		# zera potencia %
0000088e : 00198293;   % 1408: 			addi 	t0, s3, 1			# endereco seguinte ao 'e' %
0000088f : 00000a13;   % 1409: 			li 	s4, 0				# sinal do expoente positivo %
00000890 : 00028303;   % 1410: 			lb 	t1, 0(t0)			# le o caractere seguinte ao 'e' %
00000891 : 02d00213;   % 1411: 			li	tp, '-'				# TP = 45 = '-' %
00000892 : 00430863;   % 1412: 			beq	t1, tp, potsinalnegreadFloat	# sinal do expoente esta escrito e eh positivo %
00000893 : 02b00213;   % 1413: 			li	tp, '+'				# TP = 43 = '+' %
00000894 : 00430663;   % 1414: 			beq 	t1, tp, potsinalposreadFloat	# sinal do expoente eh negativo %
00000895 : 00c0006f;   % 1415: 			j 	pulapotsinalreadFloat		# nao esta escrito o sinal do expoente %
00000896 : 00100a13;   % 1416: potsinalnegreadFloat:	li 	s4, 1				# s4=1 expoente negativo %
00000897 : 00128293;   % 1417: potsinalposreadFloat:	addi 	t0, t0, 1			# se tiver '-' ou '+' avanca para o proximo endereco %
00000898 : 00500ab3;   % 1418: pulapotsinalreadFloat:	mv 	s5, t0 				# Neste ponto s5 contem o endereco do primeiro digito da pot e s4 o sinal do expoente		 %
00000899 : 201081d3;   % 1420: 			fmv.s 	ft3, ft1			# ft3 un/dez/cen = 1 %
0000089a : 00000393;   % 1423: expreadFloat:		li 	t2, 0				# zera expoente %
0000089b : 008002b3;   % 1424: 			mv 	t0, s0				# endereco do ultimo caractere da string %
0000089c : 00a00e13;   % 1425: 			li 	t3, 10				# numero dez %
0000089d : 00100e93;   % 1426: 			li 	t4, 1				# und/dez/cent %
0000089e : 0352c063;   % 1428: loopexpreadFloat:	blt 	t0, s5, fimexpreadFloat		# ainda nao eh o endereco do primeiro digito? %
0000089f : 00028303;   % 1429: 			lb 	t1, 0(t0)			# le o caracter %
000008a0 : fd030313;   % 1430: 			addi 	t1, t1, -48			# converte ascii para decimal %
000008a1 : 03d30333;   % 1431: 			mul 	t1, t1, t4			# mul digito %
000008a2 : 006383b3;   % 1432: 			add 	t2, t2, t1			# soma ao exp %
000008a3 : 03ce8eb3;   % 1433: 			mul 	t4, t4, t3			# proxima casa decimal %
000008a4 : fff28293;   % 1434: 			addi 	t0, t0, -1			# endereco anterior %
000008a5 : fe5ff06f;   % 1435: 			j loopexpreadFloat			# volta ao loop %
000008a6 : 20108153;   % 1439: 			fmv.s 	ft2, ft1			# numero 10^exp  inicial=1 %
000008a7 : 206301d3;   % 1440: 			fmv.s 	ft3, ft6			# se o sinal for + ft3 eh 10 %
000008a8 : 00000213;   % 1441: 			li	tp, 0x00000000			# TP = ZERO %
000008a9 : 004a0463;   % 1442: 			beq 	s4, tp, sinalexpPosreadFloat	# se sinal exp positivo %
000008aa : 1860f1d3;   % 1443: 			fdiv.s 	ft3, ft1, ft6			# se o final for - ft3 eh 0.1 %
000008ab : 00000293;   % 1444: sinalexpPosreadFloat:	li 	t0, 0				# contador  %
000008ac : 00728863;   % 1445: sinalexpreadFloat: 	beq 	t0, t2, fimsinalexpreadFloat	# se chegou ao fim %
000008ad : 10317153;   % 1446: 			fmul.s 	ft2, ft2, ft3			# multiplica pelo fator 10 ou 0.1 %
000008ae : 00128293;   % 1447: 			addi 	t0, t0, 1			# incrementa o contador %
000008af : ff5ff06f;   % 1448: 			j 	sinalexpreadFloat %
000008b0 : 10257553;   % 1451: 		fmul.s 	fa0, fa0, ft2		# multiplicacao final! %
000008b1 : 0fc0e297;   % 1453: 		la 	t0, TempBuffer		# ajuste final do sinal do numero %
000008b2 : 32c28293;   % 1453:  %
000008b3 : 00028303;   % 1454: 		lb 	t1, 0(t0)		# le primeiro caractere %
000008b4 : 02d00213;   % 1455: 		li	tp, '-'			# TP = 45 = '-' %
000008b5 : 00431463;   % 1456: 		bne 	t1, tp, fimreadFloat	# nao eh '-' entao fim %
000008b6 : 20a51553;   % 1457: 		fneg.s 	fa0, fa0		# nega o numero float %
000008b7 : 00012083;   % 1460: fimreadFloat: 	lw 	ra, 0(sp)		# recupera ra %
000008b8 : 00410113;   % 1461: 		addi 	sp, sp, 4		# libera espaco %
000008b9 : 00008067;   % 1462: 		ret				# retorna %
000008ba : 10008c37;   % 1470: <9> li s8, 0x10008000	# carrega tp %
000008bb : 000c0c13;   % 1470:  %
000008bc : 01819863;   % 1470: <10> bne gp, s8, Time.DE1	# Na DE1 gp = 0 ! N�o tem segmento .extern %
000008bd : 01e00893;   % 1471: 	li 	a7, 30				# Chama o ecall do Rars %
000008be : 00000073;   % 1472: 	ecall %
000008bf : 00008067;   % 1473: 	ret					# saida %
000008c0 : c0102573;   % 1475: Time.DE1:	csrr a0, time			#  Le time LOW %
000008c1 : c81025f3;   % 1476: 		csrr a1, timeh 			#  Le time HIGH %
000008c2 : 00008067;   % 1477: 		ret %
000008c3 : 10008c37;   % 1490: <9> li s8, 0x10008000	# carrega tp %
000008c4 : 000c0c13;   % 1490:  %
000008c5 : 01819863;   % 1490: <10> bne gp, s8, Sleep.DE1	# Na DE1 gp = 0 ! N�o tem segmento .extern %
000008c6 : 02000893;   % 1491: 	li 	a7, 32				# Chama o ecall do Rars %
000008c7 : 00000073;   % 1492: 	ecall %
000008c8 : 00008067;   % 1493: 	ret					#Saida %
000008c9 : c01022f3;   % 1495: Sleep.DE1:	csrr 	t0, time		# Le o tempo do sistema %
000008ca : 00a28333;   % 1496: 		add 	t1, t0, a0		# soma com o tempo solicitado %
000008cb : c01022f3;   % 1497: Sleep.Loop:	csrr	t0, time		# Le o tempo do sistema %
000008cc : fe62cee3;   % 1498: 		blt	t0, t1, Sleep.Loop	# t0<t1 ? %
000008cd : 00008067;   % 1499: 		ret %
000008ce : 10008c37;   % 1517: <9> li s8, 0x10008000	# carrega tp %
000008cf : 000c0c13;   % 1517:  %
000008d0 : 01819863;   % 1517: <10> bne gp, s8, Random.DE1	# Na DE1 gp = 0 ! N�o tem segmento .extern %
000008d1 : 02900893;   % 1518: 	li 	a7,41			# Chama o ecall do Rars %
000008d2 : 00000073;   % 1519: 	ecall	 %
000008d3 : 00008067;   % 1520: 	ret				# saida %
000008d4 : ff2002b7;   % 1522: Random.DE1: 	li 	t0, 0xFF200514	# carrega endereco do LFSR %
000008d5 : 51428293;   % 1522:  %
000008d6 : 0002a503;   % 1523: 		lw 	a0, 0(t0)	# le a word em a0 %
000008d7 : 00008067;   % 1524: 		ret			# retorna %
000008d8 : 00058c63;   % 1534: clsCLS:	beq 	a1, zero, CLS.frame0 %
000008d9 : ff100337;   % 1535: 	li      t1, 0xFF100000              # Memoria VGA 1 %
000008da : 00030313;   % 1535:  %
000008db : ff1133b7;   % 1536:    	li      t2, 0xFF112C00 %
000008dc : c0038393;   % 1536:  %
000008dd : 0140006f;   % 1537:    	j 	CLS.pula %
000008de : ff000337;   % 1538: CLS.frame0: 	li      t1, 0xFF000000           # Memoria VGA 0 %
000008df : 00030313;   % 1538:  %
000008e0 : ff0133b7;   % 1539:    	    	li      t2, 0xFF012C00   	 %
000008e1 : c0038393;   % 1539:  %
000008e2 : 0ff57513;   % 1540: CLS.pula:	andi    a0, a0, 0x00FF %
000008e3 : 00a002b3;   % 1543:  		mv 	t0, a0 %
000008e4 : 00851513;   % 1544:  		slli 	a0, a0, 8 %
000008e5 : 00a2e2b3;   % 1545:  		or 	t0, t0, a0 %
000008e6 : 00851513;   % 1546:  		slli 	a0, a0, 8 %
000008e7 : 00a2e2b3;   % 1547:  		or 	t0, t0, a0 %
000008e8 : 00851513;   % 1548:  		slli 	a0, a0, 8 %
000008e9 : 00a2e2b3;   % 1549:  		or 	t0, t0, a0 %
000008ea : 00730863;   % 1551: CLS.for:	beq     t1, t2, CLS.fim %
000008eb : 00532023;   % 1552: 		sw      t0, 0(t1) %
000008ec : 00430313;   % 1553:     		addi    t1, t1, 4 %
000008ed : ff5ff06f;   % 1554:     		j       CLS.for %
000008ee : 00008067;   % 1555: CLS.fim:	ret %
000008ef : ff000837;   % 1564: BRESENHAM: 	li	a6, 0xFF000000           	# Memoria VGA 0 %
000008f0 : 00080813;   % 1564:  %
000008f1 : 00078663;   % 1565: 	   	beq	a5, zero, pulaBRES %
000008f2 : ff100837;   % 1566: 	   	li 	a6, 0xFF100000              # Memoria VGA 1 %
000008f3 : 00080813;   % 1566:  %
000008f4 : 14000893;   % 1568: pulaBRES: 	li 	a7, 320 %
000008f5 : 40b682b3;   % 1569: 	  	sub 	t0, a3, a1 %
000008f6 : 0002d463;   % 1570: 	  	bge 	t0, zero, PULAABRES %
000008f7 : 405002b3;   % 1571: 	  	sub 	t0, zero, t0 %
000008f8 : 40a60333;   % 1572: PULAABRES:	sub 	t1, a2, a0 %
000008f9 : 00035463;   % 1573: 	   	bge  	t1, zero, PULABBRES %
000008fa : 40600333;   % 1574: 	   	sub  	t1, zero, t1	 %
000008fb : 0262d263;   % 1575: PULABBRES: 	bge  	t0, t1, PULACBRES %
000008fc : 00a65e63;   % 1576: 	   	ble  	a0, a2, PULAC1BRES %
000008fd : 00a007b3;   % 1577: 	   	mv 	a5, a0 %
000008fe : 00c00533;   % 1578: 	   	mv 	a0, a2 %
000008ff : 00f00633;   % 1579: 	   	mv 	a2, a5 %
00000900 : 00b007b3;   % 1580: 	   	mv	a5, a1 %
00000901 : 00d005b3;   % 1581: 	   	mv 	a1, a3 %
00000902 : 00f006b3;   % 1582: 	   	mv 	a3, a5 %
00000903 : 0240006f;   % 1583: PULAC1BRES:	j PLOTLOWBRES %
00000904 : 00b6de63;   % 1585: PULACBRES: 	ble  	a1, a3, PULAC2BRES %
00000905 : 00a007b3;   % 1586: 	   	mv 	a5, a0 %
00000906 : 00c00533;   % 1587: 	   	mv 	a0, a2 %
00000907 : 00f00633;   % 1588: 	   	mv 	a2, a5 %
00000908 : 00b007b3;   % 1589: 	   	mv 	a5, a1 %
00000909 : 00d005b3;   % 1590: 	   	mv 	a1, a3 %
0000090a : 00f006b3;   % 1591: 	   	mv 	a3, a5 %
0000090b : 0a80006f;   % 1592: PULAC2BRES:	j PLOTHIGHBRES %
0000090c : 40a602b3;   % 1594: PLOTLOWBRES:	sub 	t0, a2, a0		# dx=x1-x0 %
0000090d : 40b68333;   % 1595: 	 	sub 	t1, a3, a1		# dy y1-y0 %
0000090e : 00100393;   % 1596: 	 	li  	t2, 1			# yi=1 %
0000090f : 00035663;   % 1597: 	 	bge 	t1, zero, PULA1BRES	# dy>=0 PULA %
00000910 : fff00393;   % 1598: 	 	li  	t2, -1			# yi=-1 %
00000911 : 40600333;   % 1599: 	 	sub 	t1, zero, t1		# dy=-dy %
00000912 : 00131e13;   % 1600: PULA1BRES:	slli 	t3, t1, 1		# 2*dy %
00000913 : 405e0e33;   % 1601: 		sub 	t3, t3, t0		# D=2*dy-dx %
00000914 : 00b00eb3;   % 1602: 		mv 	t4, a1			# y=y0 %
00000915 : 00a00f33;   % 1603: 		mv 	t5, a0			# x=x0 %
00000916 : 30102c73;   % 1605: <29> csrr s8, misa %
00000917 : 00cc5c13;   % 1605: <30> srli s8, s8, 12 %
00000918 : 001c7c13;   % 1605: <31> andi s8, s8, 0x001 %
00000919 : 020c1e63;   % 1605: <32> bnez s8, BRESENHAM.mul1 %
0000091a : ff410113;   % 1606: <45> addi 	sp, sp, -12 %
0000091b : 00a12023;   % 1606: <46> sw	a0, 0(sp) %
0000091c : 00b12223;   % 1606: <47> sw	a1, 4(sp) %
0000091d : 00112423;   % 1606: <48> sw	ra, 8(sp) %
0000091e : 01d00533;   % 1606: <50> mv 	a0, t4 %
0000091f : 011005b3;   % 1606: <51> mv 	a1, a7 %
00000920 : 2d8000ef;   % 1606: <52> jal 	__mulsi3 %
00000921 : 04051073;   % 1606: <53> csrw	a0,uscratch %
00000922 : 00012503;   % 1606: <55> lw	a0, 0(sp) %
00000923 : 00412583;   % 1606: <56> lw	a1, 4(sp) %
00000924 : 00812083;   % 1606: <57> lw	ra, 8(sp) %
00000925 : 00c10113;   % 1606: <58> addi 	sp, sp, 12 %
00000926 : 04002ff3;   % 1606: <59> csrr	t6,uscratch %
00000927 : 0080006f;   % 1607: 		j BRESENHAM.mul1d %
00000928 : 031e8fb3;   % 1608: BRESENHAM.mul1:	mul 	t6, t4, a7		# y*320 %
00000929 : 01ef8fb3;   % 1609: BRESENHAM.mul1d:add 	t6, t6, t5		# y*320+x %
0000092a : 010f8fb3;   % 1610: 		add 	t6, t6, a6		# 0xFF000000+y*320+x %
0000092b : 00ef8023;   % 1611: 		sb 	a4, 0(t6)		# plot com cor a4 %
0000092c : 01c05863;   % 1613: 		ble 	t3, zero, PULA2BRES	# D<=0 %
0000092d : 007e8eb3;   % 1614: 		add 	t4, t4, t2		# y=y+yi %
0000092e : 00129f93;   % 1615: 		slli 	t6, t0, 1		# 2*dx %
0000092f : 41fe0e33;   % 1616: 		sub 	t3, t3, t6		# D=D-2dx %
00000930 : 00131f93;   % 1617: PULA2BRES:	slli 	t6, t1, 1		# 2*dy %
00000931 : 01fe0e33;   % 1618: 		add 	t3, t3, t6		# D=D+2dx %
00000932 : 001f0f13;   % 1619: 		addi	t5, t5, 1 %
00000933 : f8cf16e3;   % 1620: 		bne 	t5, a2, LOOPx1BRES %
00000934 : 00008067;   % 1621: 		ret %
00000935 : 40a602b3;   % 1623: PLOTHIGHBRES: 	sub 	t0, a2, a0		# dx=x1-x0 %
00000936 : 40b68333;   % 1624: 	 	sub 	t1, a3, a1		# dy y1-y0 %
00000937 : 00100393;   % 1625: 	 	li 	t2, 1			# xi=1 %
00000938 : 0002d663;   % 1626: 	 	bge 	t0, zero, PULA3BRES	# dy>=0 PULA %
00000939 : fff00393;   % 1627: 	 	li 	t2, -1			# xi=-1 %
0000093a : 405002b3;   % 1628: 	 	sub 	t0, zero, t0		# dx=-dx %
0000093b : 00129e13;   % 1629: PULA3BRES:	slli 	t3, t0, 1		# 2*dx %
0000093c : 406e0e33;   % 1630: 		sub 	t3, t3, t1		# D=2*dx-d1 %
0000093d : 00a00eb3;   % 1631: 		mv 	t4, a0			# x=x0 %
0000093e : 00b00f33;   % 1632: 		mv 	t5, a1			# y=y0 %
0000093f : 30102c73;   % 1634: <29> csrr s8, misa %
00000940 : 00cc5c13;   % 1634: <30> srli s8, s8, 12 %
00000941 : 001c7c13;   % 1634: <31> andi s8, s8, 0x001 %
00000942 : 020c1e63;   % 1634: <32> bnez s8, BRESENHAM.mul2 %
00000943 : ff410113;   % 1635: <45> addi 	sp, sp, -12 %
00000944 : 00a12023;   % 1635: <46> sw	a0, 0(sp) %
00000945 : 00b12223;   % 1635: <47> sw	a1, 4(sp) %
00000946 : 00112423;   % 1635: <48> sw	ra, 8(sp) %
00000947 : 01e00533;   % 1635: <50> mv 	a0, t5 %
00000948 : 011005b3;   % 1635: <51> mv 	a1, a7 %
00000949 : 234000ef;   % 1635: <52> jal 	__mulsi3 %
0000094a : 04051073;   % 1635: <53> csrw	a0,uscratch %
0000094b : 00012503;   % 1635: <55> lw	a0, 0(sp) %
0000094c : 00412583;   % 1635: <56> lw	a1, 4(sp) %
0000094d : 00812083;   % 1635: <57> lw	ra, 8(sp) %
0000094e : 00c10113;   % 1635: <58> addi 	sp, sp, 12 %
0000094f : 04002ff3;   % 1635: <59> csrr	t6,uscratch %
00000950 : 0080006f;   % 1636: 		j BRESENHAM.mul2d %
00000951 : 031f0fb3;   % 1637: BRESENHAM.mul2:	mul 	t6, t5, a7		# y*320 %
00000952 : 01df8fb3;   % 1638: BRESENHAM.mul2d:add 	t6, t6, t4		# y*320+x %
00000953 : 010f8fb3;   % 1639: 		add 	t6, t6, a6		# 0xFF000000+y*320+x %
00000954 : 00ef8023;   % 1640: 		sb 	a4, 0(t6)		# plot com cor a4 %
00000955 : 01c05863;   % 1642: 		ble 	t3, zero, PULA4BRES	# D<=0 %
00000956 : 007e8eb3;   % 1643: 		add 	t4, t4, t2		# x=x+xi %
00000957 : 00131f93;   % 1644: 		slli 	t6, t1, 1		# 2*dy %
00000958 : 41fe0e33;   % 1645: 		sub 	t3, t3, t6		# D=D-2dy %
00000959 : 00129f93;   % 1646: PULA4BRES: 	slli 	t6, t0, 1		# 2*dy %
0000095a : 01fe0e33;   % 1647: 		add 	t3, t3, t6		# D=D+2dx %
0000095b : 001f0f13;   % 1648: 		addi 	t5, t5, 1 %
0000095c : f8df16e3;   % 1649: 		bne 	t5, a3, LOOPx2BRES %
0000095d : 00008067;   % 1650: 		ret		 %
0000095e : ffc10113;   % 1665: printIntUnsigned:	addi 	sp, sp, -4		# Aloca espaco %
0000095f : 00112023;   % 1666: 		sw 	ra, 0(sp)			# salva ra %
00000960 : 0fc0e297;   % 1667: 		la 	t0, TempBuffer			# carrega o Endereco do Buffer da String %
00000961 : 07028293;   % 1667:  %
00000962 : 00a00393;   % 1669: 		li 	t2, 10				# carrega numero 10 %
00000963 : 00000313;   % 1670: 		li 	t1, 0				# carrega numero de digitos com 0 %
00000964 : 30102c73;   % 1672: <29> csrr s8, misa %
00000965 : 00cc5c13;   % 1672: <30> srli s8, s8, 12 %
00000966 : 001c7c13;   % 1672: <31> andi s8, s8, 0x001 %
00000967 : 160c1463;   % 1672: <32> bnez s8, printIntUnsigned.pula1 %
00000968 : ff010113;   % 1673: <65> addi 	sp, sp, -16 %
00000969 : 00a12023;   % 1673: <66> sw	a0, 0(sp) %
0000096a : 00e12223;   % 1673: <67> sw	a4, 4(sp) %
0000096b : 00f12423;   % 1673: <68> sw	a5, 8(sp) %
0000096c : 00112623;   % 1673: <69> sw	ra, 12(sp) %
0000096d : 00a00533;   % 1673: <70> mv 	a0, a0 %
0000096e : 00155713;   % 1673: <71> srli    a4,a0,1 %
0000096f : 00255793;   % 1673: <72> srli    a5,a0,2 %
00000970 : 00f707b3;   % 1673: <73> add     a5,a4,a5 %
00000971 : 0047d713;   % 1673: <74> srli    a4,a5,4 %
00000972 : 00f70733;   % 1673: <75> add     a4,a4,a5 %
00000973 : 00875793;   % 1673: <76> srli    a5,a4,8 %
00000974 : 00e78733;   % 1673: <77> add     a4,a5,a4 %
00000975 : 01075793;   % 1673: <78> srli    a5,a4,16 %
00000976 : 00e787b3;   % 1673: <79> add     a5,a5,a4 %
00000977 : 0037d793;   % 1673: <80> srli    a5,a5,3 %
00000978 : 00279713;   % 1673: <81> slli    a4,a5,2 %
00000979 : 00f70733;   % 1673: <82> add     a4,a4,a5 %
0000097a : 00171713;   % 1673: <83> slli    a4,a4,1 %
0000097b : 40e50533;   % 1673: <84> sub     a0,a0,a4 %
0000097c : 00a53513;   % 1673: <85> sltiu   a0,a0,10 %
0000097d : 00154513;   % 1673: <86> xori    a0,a0,1 %
0000097e : 00f50533;   % 1673: <87> add     a0,a0,a5 %
0000097f : 04051073;   % 1673: <88> csrw	a0,uscratch %
00000980 : 00012503;   % 1673: <89> lw	a0, 0(sp) %
00000981 : 00412703;   % 1673: <90> lw	a4, 4(sp) %
00000982 : 00812783;   % 1673: <91> lw	a5, 8(sp) %
00000983 : 00c12083;   % 1673: <92> lw	ra, 12(sp) %
00000984 : 01010113;   % 1673: <93> addi 	sp, sp, 16 %
00000985 : 04002ef3;   % 1673: <94> csrr	t4,uscratch %
00000986 : ff010113;   % 1674: <122> addi 	sp,sp,-16 %
00000987 : 00a12023;   % 1674: <123> sw	a0,0(sp) %
00000988 : 00b12223;   % 1674: <124> sw	a1,4(sp) %
00000989 : 00c12423;   % 1674: <125> sw	a2,8(sp) %
0000098a : 00d12623;   % 1674: <126> sw	a3,12(sp) %
0000098b : 00a006b3;   % 1674: <128> mv 	a3,a0 %
0000098c : 00a00613;   % 1674: <129> li 	a2,10 %
0000098d : ff010113;   % 1674: <65> addi 	sp, sp, -16 %
0000098e : 00a12023;   % 1674: <66> sw	a0, 0(sp) %
0000098f : 00e12223;   % 1674: <67> sw	a4, 4(sp) %
00000990 : 00f12423;   % 1674: <68> sw	a5, 8(sp) %
00000991 : 00112623;   % 1674: <69> sw	ra, 12(sp) %
00000992 : 00d00533;   % 1674: <70> mv 	a0, a3 %
00000993 : 00155713;   % 1674: <71> srli    a4,a0,1 %
00000994 : 00255793;   % 1674: <72> srli    a5,a0,2 %
00000995 : 00f707b3;   % 1674: <73> add     a5,a4,a5 %
00000996 : 0047d713;   % 1674: <74> srli    a4,a5,4 %
00000997 : 00f70733;   % 1674: <75> add     a4,a4,a5 %
00000998 : 00875793;   % 1674: <76> srli    a5,a4,8 %
00000999 : 00e78733;   % 1674: <77> add     a4,a5,a4 %
0000099a : 01075793;   % 1674: <78> srli    a5,a4,16 %
0000099b : 00e787b3;   % 1674: <79> add     a5,a5,a4 %
0000099c : 0037d793;   % 1674: <80> srli    a5,a5,3 %
0000099d : 00279713;   % 1674: <81> slli    a4,a5,2 %
0000099e : 00f70733;   % 1674: <82> add     a4,a4,a5 %
0000099f : 00171713;   % 1674: <83> slli    a4,a4,1 %
000009a0 : 40e50533;   % 1674: <84> sub     a0,a0,a4 %
000009a1 : 00a53513;   % 1674: <85> sltiu   a0,a0,10 %
000009a2 : 00154513;   % 1674: <86> xori    a0,a0,1 %
000009a3 : 00f50533;   % 1674: <87> add     a0,a0,a5 %
000009a4 : 04051073;   % 1674: <88> csrw	a0,uscratch %
000009a5 : 00012503;   % 1674: <89> lw	a0, 0(sp) %
000009a6 : 00412703;   % 1674: <90> lw	a4, 4(sp) %
000009a7 : 00812783;   % 1674: <91> lw	a5, 8(sp) %
000009a8 : 00c12083;   % 1674: <92> lw	ra, 12(sp) %
000009a9 : 01010113;   % 1674: <93> addi 	sp, sp, 16 %
000009aa : 04002573;   % 1674: <94> csrr	a0,uscratch %
000009ab : ff410113;   % 1674: <45> addi 	sp, sp, -12 %
000009ac : 00a12023;   % 1674: <46> sw	a0, 0(sp) %
000009ad : 00b12223;   % 1674: <47> sw	a1, 4(sp) %
000009ae : 00112423;   % 1674: <48> sw	ra, 8(sp) %
000009af : 00a00533;   % 1674: <50> mv 	a0, a0 %
000009b0 : 00c005b3;   % 1674: <51> mv 	a1, a2 %
000009b1 : 094000ef;   % 1674: <52> jal 	__mulsi3 %
000009b2 : 04051073;   % 1674: <53> csrw	a0,uscratch %
000009b3 : 00012503;   % 1674: <55> lw	a0, 0(sp) %
000009b4 : 00412583;   % 1674: <56> lw	a1, 4(sp) %
000009b5 : 00812083;   % 1674: <57> lw	ra, 8(sp) %
000009b6 : 00c10113;   % 1674: <58> addi 	sp, sp, 12 %
000009b7 : 040025f3;   % 1674: <59> csrr	a1,uscratch %
000009b8 : 40b68e33;   % 1674: <132> sub 	t3,a3,a1 %
000009b9 : 040e1073;   % 1674: <134> csrw	t3,uscratch %
000009ba : 00012503;   % 1674: <135> lw	a0,0(sp) %
000009bb : 00412583;   % 1674: <136> lw 	a1,4(sp) %
000009bc : 00812603;   % 1674: <137> lw	a2,8(sp) %
000009bd : 00c12683;   % 1674: <138> lw	a3,12(sp) %
000009be : 01010113;   % 1674: <139> addi 	sp,sp,16 %
000009bf : 04002e73;   % 1674: <140> csrr	t3,uscratch %
000009c0 : 00c0006f;   % 1675: 			j	printIntUnsigned.pula1d %
000009c1 : 02755eb3;   % 1676: printIntUnsigned.pula1:	divu 	t4, a0, t2			# divide por 10 (quociente) %
000009c2 : 02757e33;   % 1677: 			remu 	t3, a0, t2			# resto %
000009c3 : ffc10113;   % 1678: printIntUnsigned.pula1d:addi 	sp, sp, -4			# aloca espaco na pilha %
000009c4 : 01c12023;   % 1679: 		sw 	t3, 0(sp)			# coloca resto na pilha %
000009c5 : 01d00533;   % 1680: 		mv 	a0, t4				# atualiza o numero com o quociente %
000009c6 : 00130313;   % 1681: 		addi 	t1, t1, 1			# incrementa o contador de digitos %
000009c7 : e6051ae3;   % 1682: 		bne 	a0, zero, printIntUnsigned.loop1# verifica se o numero eh zero %
000009c8 : 00012383;   % 1684: printIntUnsigned.loop2:	lw 	t2, 0(sp)		# le digito da pilha %
000009c9 : 00410113;   % 1685: 		addi 	sp, sp, 4			# libera espaco %
000009ca : 03038393;   % 1686: 		addi 	t2, t2, 48			# converte o digito para ascii %
000009cb : 00728023;   % 1687: 		sb 	t2, 0(t0)			# coloca caractere no buffer %
000009cc : 00128293;   % 1688: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
000009cd : fff30313;   % 1689: 		addi 	t1, t1, -1			# decrementa contador de digitos %
000009ce : fe0314e3;   % 1690: 		bne 	t1, zero, printIntUnsigned.loop2# eh o ultimo? %
000009cf : 00028023;   % 1691: 		sb 	zero, 0(t0)			# insere \NULL na string %
000009d0 : 0fc0e517;   % 1693: 		la 	a0, TempBuffer			# Endereco do buffer da srting %
000009d1 : eb050513;   % 1693:  %
000009d2 : a6cff0ef;   % 1694: 		jal 	printString			# chama o print string %
000009d3 : 00012083;   % 1696: 		lw 	ra, 0(sp)			# recupera a %
000009d4 : 00410113;   % 1697: 		addi 	sp, sp, 4			# libera espaco %
000009d5 : 00008067;   % 1698: printIntUnsigned.fim:	ret %
000009d6 : ff410113;   % 1711: __mulsi3:	addi 	sp,sp,-12 %
000009d7 : 00b12023;   % 1712: 		sw 	a1,0(sp) %
000009d8 : 00e12223;   % 1713: 		sw 	a4,4(sp) %
000009d9 : 00f12423;   % 1714: 		sw	a5,8(sp) %
000009da : 00a007b3;   % 1716: 	 	mv      a5,a0 %
000009db : 00000513;   % 1717:         	li      a0,0 %
000009dc : 00078e63;   % 1718: mulsi3.L4: 	beqz    a5,mulsi3.L1 %
000009dd : 0017f713;   % 1719:         	andi    a4,a5,1 %
000009de : 00070463;   % 1720:         	beqz    a4,mulsi3.L3 %
000009df : 00b50533;   % 1721:         	add     a0,a0,a1 %
000009e0 : 0017d793;   % 1722: mulsi3.L3: 	srli    a5,a5,1 %
000009e1 : 00159593;   % 1723:         	slli    a1,a1,1 %
000009e2 : fe9ff06f;   % 1724:         	j       mulsi3.L4 %
000009e3 : 00012583;   % 1726: mulsi3.L1: 	lw 	a1,0(sp) %
000009e4 : 00412703;   % 1727: 		lw	a4,4(sp) %
000009e5 : 00812783;   % 1728: 		lw	a5,8(sp) %
000009e6 : 00c10113;   % 1729: 		addi 	sp,sp,12 %
000009e7 : 00008067;   % 1730: 		ret %
000009e8 : ff010113;   % 1734: __udivsi3:	addi 	sp,sp,-16 %
000009e9 : 00b12023;   % 1735: 		sw 	a1,0(sp) %
000009ea : 00d12223;   % 1736: 		sw	a3,4(sp) %
000009eb : 00e12423;   % 1737: 		sw 	a4,8(sp) %
000009ec : 00f12623;   % 1738: 		sw	a5,12(sp) %
000009ed : 00a00733;   % 1740:  		mv      a4,a0 %
000009ee : 00155693;   % 1741:         	srli    a3,a0,1 %
000009ef : 00100793;   % 1742:         	li      a5,1 %
000009f0 : 00b6e863;   % 1743: udivsi3.L3:    	bltu    a3,a1,udivsi3.L6 %
000009f1 : 00179793;   % 1744:         	slli    a5,a5,1 %
000009f2 : 00159593;   % 1745:         	slli    a1,a1,1 %
000009f3 : ff5ff06f;   % 1746:         	j       udivsi3.L3 %
000009f4 : 00000513;   % 1747: udivsi3.L6:    	li      a0,0 %
000009f5 : 00078e63;   % 1748: udivsi3.L2:   	beqz    a5,udivsi3.L1 %
000009f6 : 00b76663;   % 1749:         	bltu    a4,a1,udivsi3.L5 %
000009f7 : 40b70733;   % 1750:         	sub     a4,a4,a1 %
000009f8 : 00f50533;   % 1751:         	add     a0,a0,a5 %
000009f9 : 0017d793;   % 1752: udivsi3.L5:    	srli    a5,a5,1 %
000009fa : 0015d593;   % 1753:         	srli    a1,a1,1 %
000009fb : fe9ff06f;   % 1754:         	j       udivsi3.L2 %
000009fc : 00012583;   % 1756: udivsi3.L1: 	lw 	a1,0(sp) %
000009fd : 00412683;   % 1757: 		lw	a3,4(sp) %
000009fe : 00812703;   % 1758: 		lw	a4,8(sp) %
000009ff : 00c12783;   % 1759: 		lw	a5,12(sp) %
00000a00 : 01010113;   % 1760: 		addi 	sp,sp,16 %
00000a01 : 00008067;   % 1761:     		ret %
00000a02 : ff410113;   % 1764: __umodsi3:	addi	sp, sp, -12 %
00000a03 : 00512023;   % 1765: 		sw 	t0, 0(sp) %
00000a04 : 00612223;   % 1766: 		sw 	t1, 4(sp) %
00000a05 : 00112423;   % 1767: 		sw 	ra, 8(sp) %
00000a06 : 00a002b3;   % 1768: 	 	mv 	t0, a0		# dividendo %
00000a07 : 00b00333;   % 1769: 		mv 	t1, a1		# divisor %
00000a08 : f81ff0ef;   % 1770: 		jal 	__udivsi3 %
00000a09 : 006005b3;   % 1771: 		mv 	a1, t1		# quociente * divisor %
00000a0a : f31ff0ef;   % 1772: 		jal 	__mulsi3 %
00000a0b : 40a28533;   % 1773: 		sub 	a0, t0, a0	# dividendo-quociente*divisor %
00000a0c : 00012283;   % 1774: 		lw 	t0, 0(sp) %
00000a0d : 00412303;   % 1775: 		lw 	t1, 4(sp) %
00000a0e : 00812083;   % 1776: 		lw 	ra, 8(sp) %
00000a0f : 00c10113;   % 1777: 		addi 	sp, sp, 12 %
00000a10 : 00008067;   % 1778: 		ret %
00000a11 : ff010113;   % 1781: __divsi3:	addi	sp, sp, -16 %
00000a12 : 00512023;   % 1782: 		sw 	t0, 0(sp) %
00000a13 : 00612223;   % 1783: 		sw 	t1, 4(sp) %
00000a14 : 00712423;   % 1784: 		sw 	t2, 8(sp) %
00000a15 : 00112623;   % 1785: 		sw 	ra, 12(sp) %
00000a16 : 41f55293;   % 1786: 		srai	t0,a0,31	# indica se a0 � pos(0) ou neg (2^32-1) %
00000a17 : 41f5d313;   % 1787: 		srai 	t1,a1,31	# indica se a1 � pos(0) ou neg (2^32-1) %
00000a18 : 0062c3b3;   % 1788: 		xor	t2,t0,t1	# indica se deve(!=0) ou n�o(==0) inverter o sinal do resultado %
00000a19 : 00028463;   % 1789: 		beqz 	t0,divsi3.pula1 %
00000a1a : 40a00533;   % 1790: 		neg	a0,a0		# nega %
00000a1b : 00030463;   % 1791: divsi3.pula1:	beqz 	t1,divsi3.pula2 %
00000a1c : 40b005b3;   % 1792: 		neg	a1,a1		# nega %
00000a1d : f2dff0ef;   % 1793: divsi3.pula2:	jal 	__udivsi3	# divis�o unsigned %
00000a1e : 00038463;   % 1794: 		beqz	t2, divsi3.pula3	 %
00000a1f : 40a00533;   % 1795: 		neg	a0,a0		# nega %
00000a20 : 00012283;   % 1796: divsi3.pula3:	lw 	t0, 0(sp) %
00000a21 : 00412303;   % 1797: 		lw 	t1, 4(sp) %
00000a22 : 00812383;   % 1798: 		lw 	t2, 8(sp) %
00000a23 : 00c12083;   % 1799: 		lw 	ra, 12(sp) %
00000a24 : 01010113;   % 1800: 		addi 	sp, sp, 16 %
00000a25 : 00008067;   % 1801: 		ret %
00000a26 : ff410113;   % 1804: __modsi3:	addi	sp, sp, -12 %
00000a27 : 00512023;   % 1805: 		sw 	t0, 0(sp) %
00000a28 : 00612223;   % 1806: 		sw 	t1, 4(sp) %
00000a29 : 00112423;   % 1807: 		sw 	ra, 8(sp) %
00000a2a : 41f55293;   % 1808: 		srai	t0,a0,31	# indica se a0 � pos(0) ou neg (2^32-1) %
00000a2b : 41f5d313;   % 1809: 		srai 	t1,a1,31	# indica se a1 � pos(0) ou neg (2^32-1) %
00000a2c : 00028463;   % 1810: 		beqz 	t0,modsi3.pula1 %
00000a2d : 40a00533;   % 1811: 		neg	a0,a0		# nega %
00000a2e : 00030463;   % 1812: modsi3.pula1:	beqz 	t1,modsi3.pula2 %
00000a2f : 40b005b3;   % 1813: 		neg	a1,a1		# nega %
00000a30 : f49ff0ef;   % 1814: modsi3.pula2:	jal 	__umodsi3	# resto unsigned %
00000a31 : 00028463;   % 1815: 		beqz	t0, modsi3.pula3	# sinal do dividendo	 %
00000a32 : 40a00533;   % 1816: 		neg	a0,a0		# nega %
00000a33 : 00012283;   % 1817: modsi3.pula3:	lw 	t0, 0(sp) %
00000a34 : 00412303;   % 1818: 		lw 	t1, 4(sp) %
00000a35 : 00812083;   % 1819: 		lw 	ra, 8(sp) %
00000a36 : 00c10113;   % 1820: 		addi 	sp, sp, 12 %
00000a37 : 00008067;   % 1821: 		ret																				 %
END;
