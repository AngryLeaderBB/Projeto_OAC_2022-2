DEPTH = 16384;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
00000000 : 00001217;   % 224:  	la 	tp, ExceptionHandling	# carrega em tp o endere�o base das rotinas do sistema ECALL %
00000001 : 38c20213;   % 224:  %
00000002 : 00521073;   % 225:  	csrw 	tp, utvec 		# seta utvec para o endere�o tp %
00000003 : 0000e073;   % 226:  	csrsi 	ustatus, 1 		# seta o bit de habilita��o de interrup��o em ustatus (reg 0)																																																				 %
00000004 : ff200437;   % 245: li s0,0xFF200604	# %
00000005 : 60440413;   % 245:  %
00000006 : 00100293;   % 246: li t0, 1		# inicializa %
00000007 : 00542023;   % 247: sw t0,0(s0)		# %
00000008 : ff0004b7;   % 249: li s1,0xFF000000 # inicializa frame %
00000009 : 00048493;   % 249:  %
0000000a : 0fc36c97;   % 252: la s9,  main_track     # Endereco da track_1 %
0000000b : ff0c8c93;   % 252:  %
0000000c : 0fc36297;   % 257: la t0,pkmns_back %
0000000d : e5828293;   % 257:  %
0000000e : 0fc29317;   % 258: la t1,char %
0000000f : e6430313;   % 258:  %
00000010 : 0062a023;   % 259: sw t1,0(t0) %
00000011 : 0fc2d397;   % 260: la t2,squir %
00000012 : e7838393;   % 260:  %
00000013 : 0072a223;   % 261: sw t2,4(t0) %
00000014 : 0fc2b317;   % 262: la t1,bul %
00000015 : e5c30313;   % 262:  %
00000016 : 0062a423;   % 263: sw t1,8(t0) %
00000017 : 0fc31397;   % 264: la t2,mac %
00000018 : e8038393;   % 264:  %
00000019 : 0072a623;   % 265: sw t2,12(t0) %
0000001a : 0fc2f317;   % 266: la t1,rat %
0000001b : e6430313;   % 266:  %
0000001c : 0062a823;   % 267: sw t1,16(t0) %
0000001d : 0fc36297;   % 269: la t0,pkmns_front %
0000001e : e0028293;   % 269:  %
0000001f : 0fc2a317;   % 270: la t1,charFront %
00000020 : e2830313;   % 270:  %
00000021 : 0062a023;   % 271: sw t1,0(t0) %
00000022 : 0fc2e397;   % 272: la t2,squirFront %
00000023 : e3c38393;   % 272:  %
00000024 : 0072a223;   % 273: sw t2,4(t0) %
00000025 : 0fc2c317;   % 274: la t1,bulFront %
00000026 : e2030313;   % 274:  %
00000027 : 0062a423;   % 275: sw t1,8(t0) %
00000028 : 0fc32397;   % 276: la t2,macFront %
00000029 : e4438393;   % 276:  %
0000002a : 0072a623;   % 277: sw t2,12(t0) %
0000002b : 0fc30317;   % 278: la t1,ratFront %
0000002c : e2830313;   % 278:  %
0000002d : 0062a823;   % 279: sw t1,16(t0) %
0000002e : 0fc36517;   % 286: la a0,pkmns_array %
0000002f : c8450513;   % 286:  %
00000030 : 0fc36597;   % 287: la a1,enemy_array %
00000031 : cd058593;   % 287:  %
00000032 : 00000317;   % 288: call Battle %
00000033 : 0b8300e7;   % 288:  %
00000034 : 00000313;   % 293: li t1,0 %
00000035 : 00400393;   % 294: li t2,4 %
00000036 : 0fc36297;   % 295: la t0, pkmns_array %
00000037 : c6428293;   % 295:  %
00000038 : 08730c63;   % 297: beq t1,t2,end %
00000039 : 0002a503;   % 299: lw a0,0(t0) %
0000003a : 00100893;   % 300: li a7,1 %
0000003b : 00000073;   % 301: ecall %
0000003c : 00a00513;   % 302: <3> li a0,10 %
0000003d : 00b00893;   % 302: <4> li a7,11 %
0000003e : 00000073;   % 302: <5> ecall %
0000003f : 0042a507;   % 303: flw fa0,4(t0) %
00000040 : c0057553;   % 304: fcvt.w.s a0,fa0 %
00000041 : 00100893;   % 305: li a7,1 %
00000042 : 00000073;   % 306: ecall %
00000043 : 00a00513;   % 307: <3> li a0,10 %
00000044 : 00b00893;   % 307: <4> li a7,11 %
00000045 : 00000073;   % 307: <5> ecall %
00000046 : 0082a503;   % 308: lw a0,8(t0) %
00000047 : 00100893;   % 309: li a7,1 %
00000048 : 00000073;   % 310: ecall %
00000049 : 00a00513;   % 311: <3> li a0,10 %
0000004a : 00b00893;   % 311: <4> li a7,11 %
0000004b : 00000073;   % 311: <5> ecall %
0000004c : 00c2a503;   % 312: lw a0,12(t0) %
0000004d : 00100893;   % 313: li a7,1 %
0000004e : 00000073;   % 314: ecall %
0000004f : 00a00513;   % 315: <3> li a0,10 %
00000050 : 00b00893;   % 315: <4> li a7,11 %
00000051 : 00000073;   % 315: <5> ecall %
00000052 : 0102a503;   % 316: lw a0,16(t0) %
00000053 : 00100893;   % 317: li a7,1 %
00000054 : 00000073;   % 318: ecall %
00000055 : 00a00513;   % 319: <3> li a0,10 %
00000056 : 00b00893;   % 319: <4> li a7,11 %
00000057 : 00000073;   % 319: <5> ecall %
00000058 : 00a00513;   % 320: <3> li a0,10 %
00000059 : 00b00893;   % 320: <4> li a7,11 %
0000005a : 00000073;   % 320: <5> ecall %
0000005b : 01428293;   % 322: addi t0,t0,20 %
0000005c : 00130313;   % 323: addi t1,t1,1 %
0000005d : f6dff06f;   % 324: j loop %
0000005e : 00a00893;   % 327: li a7,10 %
0000005f : 00000073;   % 328: ecall %
00000060 : ff410113;   % 334: addi sp,sp,-12 %
00000061 : 00112023;   % 335: sw ra,0(sp) %
00000062 : 00a12223;   % 336: sw a0,4(sp) %
00000063 : 00b12423;   % 337: sw a1,8(sp) %
00000064 : 0fc33517;   % 341: la a0, attackSelec	# Load map %
00000065 : d5c50513;   % 341:  %
00000066 : 00a00533;   % 342: <11> mv a0,a0 %
00000067 : 00000593;   % 342: <12> li a1,0 %
00000068 : 0a800613;   % 342: <13> li a2,168 %
00000069 : 00000793;   % 342: <14> li a5, 0 %
0000006a : 00001317;   % 342: <15> call,Image %
0000006b : a10300e7;   % 342:  %
0000006c : 00412503;   % 343: lw a0,4(sp) %
0000006d : 00001317;   % 344: call select_pkmn %
0000006e : 0c4300e7;   % 344:  %
0000006f : 00812283;   % 346: lw t0,8(sp) %
00000070 : 0002a303;   % 347: lw t1,0(t0) %
00000071 : 0042a383;   % 348: lw t2,4(t0) %
00000072 : 0082ae03;   % 349: lw t3,8(t0) %
00000073 : 00c2ae83;   % 350: lw t4,12(t0) %
00000074 : 0102af03;   % 351: lw t5,16(t0) %
00000075 : 0fc36297;   % 352: la t0,current_enemy_pkmn %
00000076 : d8828293;   % 352:  %
00000077 : 0062a023;   % 353: sw t1,0(t0) %
00000078 : 0072a223;   % 354: sw t2,4(t0) %
00000079 : 01c2a423;   % 355: sw t3,8(t0) %
0000007a : 01d2a623;   % 356: sw t4,12(t0) %
0000007b : 01e2a823;   % 357: sw t5,16(t0) %
0000007c : 0002aa23;   % 358: sw zero,20(t0)                   %
0000007d : 00001317;   % 361: call refresh_battle_screen %
0000007e : e40300e7;   % 361:  %
0000007f : 00001317;   % 362: call Frame_changer %
00000080 : 998300e7;   % 362:  %
00000081 : 00001317;   % 363: call refresh_battle_screen %
00000082 : e30300e7;   % 363:  %
00000083 : 00200513;   % 364: li a0,2 %
00000084 : 02900893;   % 365: li a7,41 %
00000085 : 00000073;   % 366: ecall %
00000086 : 00157513;   % 367: andi a0,a0,0x1 %
00000087 : 66050a63;   % 368: beq a0,zero,Enemy_turn %
00000088 : 00001317;   % 383: call refresh_battle_screen %
00000089 : e14300e7;   % 383:  %
0000008a : 00001317;   % 385: call key %
0000008b : 838300e7;   % 385:  %
0000008c : 01b00293;   % 388: li t0, 27 %
0000008d : 0fc36317;   % 389: la t1, menu_state %
0000008e : d0c30313;   % 389:  %
0000008f : 00551463;   % 390: bne a0, t0, not_back %
00000090 : 00032023;   % 391: sw zero, 0(t1) %
00000091 : 0fc36e17;   % 394: la t3, current_menu %
00000092 : cf0e0e13;   % 394:  %
00000093 : 00a00293;   % 398: li t0, 10 %
00000094 : 00551663;   % 399: bne a0, t0, end_select %
00000095 : 000e2283;   % 400: lw t0, 0(t3) %
00000096 : 00532023;   % 401: sw t0, 0(t1) %
00000097 : 0fc36317;   % 408: la t1, menu_state %
00000098 : ce430313;   % 408:  %
00000099 : 00032283;   % 409: lw t0,0(t1) %
0000009a : 00100313;   % 410: li t1, 1 %
0000009b : 1c628263;   % 411: beq t0, t1, battle_state %
0000009c : 00200313;   % 412: li t1, 2 %
0000009d : 2e628263;   % 413: beq t0, t1, pkmn_state %
0000009e : 00300313;   % 414: li t1, 3 %
0000009f : 30628c63;   % 415: beq t0, t1, talk_state %
000000a0 : 00400313;   % 416: li t1,4 %
000000a1 : 4a628063;   % 417: beq t0, t1, attack_state %
000000a2 : 00500313;   % 418: li t1,5 %
000000a3 : 48628c63;   % 419: beq t0, t1, attack_state %
000000a4 : 005323b3;   % 420: slt t2,t1,t0 %
000000a5 : 00a00313;   % 421: li t1,10 %
000000a6 : 0062ae33;   % 422: slt t3,t0,t1 %
000000a7 : 01c3f333;   % 423: and t1,t2,t3 %
000000a8 : fff30313;   % 424: addi t1,t1,-1 %
000000a9 : 40600463;   % 425: beq zero,t1, pkmn_select_state %
000000aa : 00a00313;   % 427: li t1,10 %
000000ab : 16628263;   % 428: beq t0,t1, run_state %
000000ac : ffc10113;   % 430: 	addi sp,sp, -4 %
000000ad : 00a12023;   % 431: 	sw a0,0(sp) %
000000ae : 0fc23517;   % 433: 	la a0, battleSelect	# Load map %
000000af : 95850513;   % 433:  %
000000b0 : 00a00533;   % 434: <11> mv a0,a0 %
000000b1 : 0a000593;   % 434: <12> li a1,160 %
000000b2 : 0a800613;   % 434: <13> li a2,168 %
000000b3 : 00000793;   % 434: <14> li a5, 0 %
000000b4 : 00001317;   % 434: <15> call,Image %
000000b5 : 8e8300e7;   % 434:  %
000000b6 : 00012503;   % 436: 	lw a0,0(sp) %
000000b7 : 00410113;   % 437: 	addi sp,sp, 4 %
000000b8 : 0fc36597;   % 439: 	la a1, menu_position %
000000b9 : bbc58593;   % 439:  %
000000ba : 0fc36617;   % 440: 	la a2, lines_columns_select %
000000bb : bbc60613;   % 440:  %
000000bc : 0fc36697;   % 441: 	la a3, states_positions_select %
000000bd : bbc68693;   % 441:  %
000000be : 0fc36717;   % 442: 	la a4, current_menu %
000000bf : c3c70713;   % 442:  %
000000c0 : 00000317;   % 443: 	call menu %
000000c1 : 77c300e7;   % 443:  %
000000c2 : 00452583;   % 445: 	lw a1, 4 (a0) %
000000c3 : 00852603;   % 446: 	lw a2, 8 (a0) %
000000c4 : 02a00513;   % 447: 	li a0, 42	# eh relativa a cada jogada %
000000c5 : 000106b7;   % 449: 	li a3, 0xff00 %
000000c6 : f0068693;   % 449:  %
000000c7 : 0144d293;   % 450: 	srli t0, s1, 20 %
000000c8 : 0012f713;   % 451: 	andi a4, t0, 1 	# %
000000c9 : 06f00893;   % 452: 	li a7, 111	# %
000000ca : 00000073;   % 453: 	ecall  %
000000cb : 0fc36297;   % 455: 	la t0,fight %
000000cc : 9e028293;   % 455:  %
000000cd : 0be00313;   % 456: 	li t1, 190 %
000000ce : 0bc00393;   % 457: 	li t2, 188 %
000000cf : 00500533;   % 458: <39> mv a0, t0, %
000000d0 : 006005b3;   % 458: <40> mv a1, t1, %
000000d1 : 00700633;   % 458: <41> mv a2, t2 %
000000d2 : 000006b3;   % 458: <42> mv a3, zero %
000000d3 : 02300713;   % 458: <43> li a4, 35 %
000000d4 : 00500793;   % 458: <44> li a5, 5 %
000000d5 : 0000c837;   % 458: <45> li a6, 0xC700 %
000000d6 : 70080813;   % 458:  %
000000d7 : 00001317;   % 458: <46> call PrintDialog %
000000d8 : bc0300e7;   % 458:  %
000000d9 : 0fc36297;   % 460: 	la t0,run %
000000da : 9cc28293;   % 460:  %
000000db : 0ff00313;   % 461: 	li t1, 255 %
000000dc : 0bc00393;   % 462: 	li t2, 188 %
000000dd : 00500533;   % 463: <39> mv a0, t0, %
000000de : 006005b3;   % 463: <40> mv a1, t1, %
000000df : 00700633;   % 463: <41> mv a2, t2 %
000000e0 : 000006b3;   % 463: <42> mv a3, zero %
000000e1 : 02300713;   % 463: <43> li a4, 35 %
000000e2 : 00500793;   % 463: <44> li a5, 5 %
000000e3 : 0000c837;   % 463: <45> li a6, 0xC700 %
000000e4 : 70080813;   % 463:  %
000000e5 : 00001317;   % 463: <46> call PrintDialog %
000000e6 : b88300e7;   % 463:  %
000000e7 : 0fc36297;   % 465: 	la t0,pkmn %
000000e8 : 97c28293;   % 465:  %
000000e9 : 0be00313;   % 466: 	li t1, 190 %
000000ea : 0d000393;   % 467: 	li t2, 208 %
000000eb : 00500533;   % 468: <39> mv a0, t0, %
000000ec : 006005b3;   % 468: <40> mv a1, t1, %
000000ed : 00700633;   % 468: <41> mv a2, t2 %
000000ee : 000006b3;   % 468: <42> mv a3, zero %
000000ef : 02300713;   % 468: <43> li a4, 35 %
000000f0 : 00500793;   % 468: <44> li a5, 5 %
000000f1 : 0000c837;   % 468: <45> li a6, 0xC700 %
000000f2 : 70080813;   % 468:  %
000000f3 : 00001317;   % 468: <46> call PrintDialog %
000000f4 : b50300e7;   % 468:  %
000000f5 : 0fc36297;   % 470: 	la t0,bag %
000000f6 : 95028293;   % 470:  %
000000f7 : 0ff00313;   % 471: 	li t1, 255 %
000000f8 : 0d000393;   % 472: 	li t2, 208 %
000000f9 : 00500533;   % 473: <39> mv a0, t0, %
000000fa : 006005b3;   % 473: <40> mv a1, t1, %
000000fb : 00700633;   % 473: <41> mv a2, t2 %
000000fc : 000006b3;   % 473: <42> mv a3, zero %
000000fd : 02300713;   % 473: <43> li a4, 35 %
000000fe : 00500793;   % 473: <44> li a5, 5 %
000000ff : 0000c837;   % 473: <45> li a6, 0xC700 %
00000100 : 70080813;   % 473:  %
00000101 : 00001317;   % 473: <46> call PrintDialog %
00000102 : b18300e7;   % 473:  %
00000103 : 46c0006f;   % 474: j end_state %
00000104 : 0fc36397;   % 478: la t2,menu_state %
00000105 : b3038393;   % 478:  %
00000106 : 0003a023;   % 479: sw zero,0(t2) %
00000107 : 00412503;   % 481: lw a0,4(sp) %
00000108 : 00001317;   % 482: call calculate_chance %
00000109 : efc300e7;   % 482:  %
0000010a : 58051863;   % 483: bne a0,zero,End_battle %
0000010b : 4640006f;   % 486: j Enemy_turn %
0000010c : ffc10113;   % 490: 	addi sp,sp, -4 %
0000010d : 00a12023;   % 491: 	sw a0,0(sp) %
0000010e : 0fc33517;   % 493: 	la a0, attackSelec	# Load map %
0000010f : ab450513;   % 493:  %
00000110 : 00a00533;   % 494: <11> mv a0,a0 %
00000111 : 00000593;   % 494: <12> li a1,0 %
00000112 : 0a800613;   % 494: <13> li a2,168 %
00000113 : 00000793;   % 494: <14> li a5, 0 %
00000114 : 00000317;   % 494: <15> call,Image %
00000115 : 768300e7;   % 494:  %
00000116 : 00012503;   % 496: 	lw a0,0(sp) %
00000117 : 00410113;   % 497: 	addi sp,sp, 4 %
00000118 : 0fc36597;   % 499: 	la a1, menu_position %
00000119 : a3c58593;   % 499:  %
0000011a : 0fc36617;   % 500: 	la a2, lines_columns_battle %
0000011b : a7460613;   % 500:  %
0000011c : 0fc36697;   % 501: 	la a3, states_positions_battle %
0000011d : a7468693;   % 501:  %
0000011e : 0fc36717;   % 502: 	la a4, current_menu %
0000011f : abc70713;   % 502:  %
00000120 : 00000317;   % 503: 	call menu %
00000121 : 5fc300e7;   % 503:  %
00000122 : 00452583;   % 505: 	lw a1, 4 (a0) %
00000123 : 00852603;   % 506: 	lw a2, 8 (a0) %
00000124 : 02a00513;   % 507: 	li a0, 42	# eh relativa a cada jogada %
00000125 : 000106b7;   % 509: 	li a3, 0xff00 %
00000126 : f0068693;   % 509:  %
00000127 : 0144d293;   % 510: 	srli t0, s1, 20 %
00000128 : 0012f713;   % 511: 	andi a4, t0, 1 	# %
00000129 : 06f00893;   % 512: 	li a7, 111	# %
0000012a : 00000073;   % 513: 	ecall  %
0000012b : 0fc36297;   % 517: 	la t0,current_player_pkmn %
0000012c : a9828293;   % 517:  %
0000012d : 0002a303;   % 518: 	lw t1,0(t0) %
0000012e : 00131313;   % 519: 	slli t1,t1,1  %
0000012f : 0fc36297;   % 520: 	la t0,player_attacks %
00000130 : 9ad28293;   % 520:  %
00000131 : 006282b3;   % 521: 	add t0,t0,t1 %
00000132 : 00028583;   % 522: 	lb a1,0(t0) %
00000133 : 0fc36517;   % 523: 	la a0,attack_section %
00000134 : 94550513;   % 523:  %
00000135 : 00001317;   % 524: 	call select_battle_section %
00000136 : 85c300e7;   % 524:  %
00000137 : 00150513;   % 526: 	addi a0,a0,1 %
00000138 : 01400593;   % 527: 	li a1,20 %
00000139 : 0bc00613;   % 528: 	li a2,188 %
0000013a : 0000c6b7;   % 529: 	li a3,0xC700 %
0000013b : 70068693;   % 529:  %
0000013c : 4144d713;   % 530: 	srai a4,s1,20 %
0000013d : 00177713;   % 531: 	andi a4,a4,1 %
0000013e : 06800893;   % 532: 	li a7,104 %
0000013f : 00000073;   % 533: 	ecall %
00000140 : 0fc36297;   % 535: 	la t0,current_player_pkmn %
00000141 : a4428293;   % 535:  %
00000142 : 0002a303;   % 536: 	lw t1,0(t0) %
00000143 : 00131313;   % 537: 	slli t1,t1,1  %
00000144 : 0fc36297;   % 538: 	la t0,player_attacks %
00000145 : 95928293;   % 538:  %
00000146 : 006282b3;   % 539: 	add t0,t0,t1 %
00000147 : 00128583;   % 540: 	lb a1,1(t0) %
00000148 : 0fc36517;   % 541: 	la a0,attack_section %
00000149 : 8f150513;   % 541:  %
0000014a : 00001317;   % 542: 	call select_battle_section %
0000014b : 808300e7;   % 542:  %
0000014c : 00150513;   % 543: 	addi a0,a0,1 %
0000014d : 01400593;   % 544: 	li a1,20 %
0000014e : 0d000613;   % 545: 	li a2,208 %
0000014f : 0000c6b7;   % 546: 	li a3,0xC700 %
00000150 : 70068693;   % 546:  %
00000151 : 4144d713;   % 547: 	srai a4,s1,20 %
00000152 : 00177713;   % 548: 	andi a4,a4,1 %
00000153 : 06800893;   % 549: 	li a7,104 %
00000154 : 00000073;   % 550: 	ecall %
00000155 : 3240006f;   % 552: j end_state %
00000156 : ffc10113;   % 556: 	addi sp,sp, -4 %
00000157 : 00a12023;   % 557: 	sw a0,0(sp) %
00000158 : 0fc33517;   % 559: 	la a0, attackSelec	# Load map %
00000159 : 98c50513;   % 559:  %
0000015a : 00a00533;   % 560: <11> mv a0,a0 %
0000015b : 00000593;   % 560: <12> li a1,0 %
0000015c : 0a800613;   % 560: <13> li a2,168 %
0000015d : 00000793;   % 560: <14> li a5, 0 %
0000015e : 00000317;   % 560: <15> call,Image %
0000015f : 640300e7;   % 560:  %
00000160 : 00012503;   % 562: 	lw a0,0(sp) %
00000161 : 00410113;   % 563: 	addi sp,sp, 4 %
00000162 : 00001317;   % 565: 	call pkmn_select_menu %
00000163 : c1c300e7;   % 565:  %
00000164 : 2e80006f;   % 567: j end_state %
00000165 : 0fc36397;   % 579: 	la t2,menu_state %
00000166 : 9ac38393;   % 579:  %
00000167 : 0003a023;   % 580: 	sw zero,0(t2) %
00000168 : 0fc35517;   % 582: 	la a0,enemy_array %
00000169 : 7f050513;   % 582:  %
0000016a : 00001317;   % 583: 	call calculate_chance %
0000016b : d74300e7;   % 583:  %
0000016c : 2e050063;   % 584: 	beq a0,zero,Enemy_turn %
0000016d : 0fc1d517;   % 586: 	la a0, battleText	# Load map %
0000016e : c5450513;   % 586:  %
0000016f : 00000793;   % 587: 	li a5,0 %
00000170 : 00a00533;   % 588: <11> mv a0,a0 %
00000171 : 00000593;   % 588: <12> li a1,0 %
00000172 : 0a800613;   % 588: <13> li a2,168 %
00000173 : 00100793;   % 588: <14> li a5, 1 %
00000174 : 00000317;   % 588: <15> call,Image %
00000175 : 5e8300e7;   % 588:  %
00000176 : 00000317;   % 589: 	call print_lifes %
00000177 : 41c300e7;   % 589:  %
00000178 : 00000317;   % 590: 	call Frame_changer %
00000179 : 5b4300e7;   % 590:  %
0000017a : 0fc1d517;   % 591: 	la a0, battleText	# Load map %
0000017b : c2050513;   % 591:  %
0000017c : 00000793;   % 592: 	li a5,0 %
0000017d : 00a00533;   % 593: <11> mv a0,a0 %
0000017e : 00000593;   % 593: <12> li a1,0 %
0000017f : 0a800613;   % 593: <13> li a2,168 %
00000180 : 00100793;   % 593: <14> li a5, 1 %
00000181 : 00000317;   % 593: <15> call,Image %
00000182 : 5b4300e7;   % 593:  %
00000183 : 00000317;   % 594: 	call print_lifes %
00000184 : 3e8300e7;   % 594:  %
00000185 : 00000317;   % 595: 	call Frame_changer %
00000186 : 580300e7;   % 595:  %
00000187 : 00000317;   % 598: 	call key %
00000188 : 444300e7;   % 598:  %
00000189 : 00a00293;   % 599: 	li t0,10 %
0000018a : 00a28c63;   % 600: 	beq t0,a0,end_pkmn_change %
0000018b : 00001317;   % 601: 	call pkmn_select_menu %
0000018c : b78300e7;   % 601:  %
0000018d : 00000317;   % 602: 	call Frame_changer %
0000018e : 560300e7;   % 602:  %
0000018f : fe1ff06f;   % 604: 	j loop_pkmn_change %
00000190 : 0fc36297;   % 608: 	la t0,current_menu %
00000191 : 8f428293;   % 608:  %
00000192 : 0002ae03;   % 609: 	lw t3,0(t0)	 %
00000193 : ffae0293;   % 610: 	addi t0,t3,-6 %
00000194 : 01400313;   % 611: 	li t1,20 %
00000195 : 026282b3;   % 612: 	mul t0,t0,t1 %
00000196 : 00412383;   % 613: 	lw t2,4(sp) %
00000197 : 00538fb3;   % 614: 	add t6,t2,t0 %
00000198 : 0fc36317;   % 616: 	la t1,enemy_pkmn_index %
00000199 : 91030313;   % 616:  %
0000019a : 00032283;   % 617: 	lw t0,(t1) %
0000019b : 01400313;   % 618: 	li t1,20 %
0000019c : 026282b3;   % 619: 	mul t0,t0,t1 %
0000019d : 0fc35397;   % 620: 	la t2,enemy_array %
0000019e : 71c38393;   % 620:  %
0000019f : 005382b3;   % 621: 	add t0,t2,t0 %
000001a0 : 0002a303;   % 623: 	lw t1,0(t0) %
000001a1 : 0042a383;   % 624: 	lw t2,4(t0) %
000001a2 : 0082ae03;   % 625: 	lw t3,8(t0) %
000001a3 : 00c2ae83;   % 626: 	lw t4,12(t0) %
000001a4 : 0102af03;   % 627: 	lw t5,16(t0) %
000001a5 : 006fa023;   % 629: 	sw t1,0(t6) %
000001a6 : 007fa223;   % 630: 	sw t2,4(t6) %
000001a7 : 01cfa423;   % 631: 	sw t3,8(t6) %
000001a8 : 01dfa623;   % 632: 	sw t4,12(t6) %
000001a9 : 01efa823;   % 633: 	sw t5,16(t6) %
000001aa : 3100006f;   % 635: 	j End_battle %
000001ab : ffa28293;   % 639: 	addi t0,t0,-6 %
000001ac : 00500fb3;   % 640: 	mv t6,t0 %
000001ad : 01400313;   % 641: 	li t1,20 %
000001ae : 026282b3;   % 642: 	mul t0,t0,t1 %
000001af : 0fc36397;   % 644: 	la t2,menu_state %
000001b0 : 88438393;   % 644:  %
000001b1 : 0003a023;   % 645: 	sw zero,0(t2) %
000001b2 : 00412383;   % 647: 	lw t2,4(sp) %
000001b3 : 005382b3;   % 648: 	add t0,t2,t0 %
000001b4 : 0002a303;   % 650: 	lw t1,0(t0) %
000001b5 : 1a034263;   % 652: 	blt t1,zero,end_state %
000001b6 : 0042a383;   % 654: 	lw t2,4(t0) %
000001b7 : 0082ae03;   % 655: 	lw t3,8(t0) %
000001b8 : 00c2ae83;   % 656: 	lw t4,12(t0) %
000001b9 : 0102af03;   % 657: 	lw t5,16(t0) %
000001ba : 0fc36297;   % 659: 	la t0,current_player_pkmn %
000001bb : 85c28293;   % 659:  %
000001bc : 0062a023;   % 661: 	sw t1,0(t0) %
000001bd : 0072a223;   % 662: 	sw t2,4(t0) %
000001be : 01c2a423;   % 663: 	sw t3,8(t0) %
000001bf : 01d2a623;   % 664: 	sw t4,12(t0) %
000001c0 : 01e2a823;   % 665: 	sw t5,16(t0) %
000001c1 : 01f2aa23;   % 666: 	sw t6,20(t0) %
000001c2 : 00001317;   % 671: 	call refresh_battle_screen %
000001c3 : 92c300e7;   % 671:  %
000001c4 : 00000317;   % 672: 	call Frame_changer %
000001c5 : 484300e7;   % 672:  %
000001c6 : 00001317;   % 673: 	call refresh_battle_screen	 %
000001c7 : 91c300e7;   % 673:  %
000001c8 : 1700006f;   % 675: 	j Enemy_turn %
000001c9 : 00400e13;   % 682: 	li t3,4 %
000001ca : 41c28e33;   % 683: 	sub t3,t0,t3 %
000001cb : 0fc36297;   % 685: 	la t0,current_player_pkmn %
000001cc : 81828293;   % 685:  %
000001cd : 0002a303;   % 686: 	lw t1,0(t0) %
000001ce : 00131393;   % 687: 	slli t2,t1,1 %
000001cf : 01c383b3;   % 688: 	add t2,t2,t3 %
000001d0 : 0fc35297;   % 690: 	la t0, player_attacks %
000001d1 : 72928293;   % 690:  %
000001d2 : 007283b3;   % 691: 	add t2,t0,t2 %
000001d3 : 00038503;   % 692: 	lb a0,0(t2) %
000001d4 : 0fc35597;   % 694: 	la a1, level %
000001d5 : 7fc58593;   % 694:  %
000001d6 : 0fc35617;   % 695: 	la a2, stats %
000001d7 : 7f860613;   % 695:  %
000001d8 : 0fc36697;   % 696: 	la a3, enemy_stats %
000001d9 : 80868693;   % 696:  %
000001da : 0fc35297;   % 697: 	la t0,current_enemy_pkmn %
000001db : 7f428293;   % 697:  %
000001dc : 0002a703;   % 698: 	lw a4,0(t0) %
000001dd : 00170713;   % 699: 	addi a4,a4,1 %
000001de : 00000317;   % 700: 	call attack %
000001df : 64c300e7;   % 700:  %
000001e0 : 0fc35297;   % 702: 	la t0,life_enemy %
000001e1 : 7e028293;   % 702:  %
000001e2 : 0002a087;   % 703: 	flw ft1,0(t0) %
000001e3 : 08a0f0d3;   % 704: 	fsub.s ft1,ft1,fa0 %
000001e4 : 0012a027;   % 705: 	fsw ft1,0(t0) %
000001e5 : 0fc35297;   % 707: 	la t0,menu_state %
000001e6 : 7ac28293;   % 707:  %
000001e7 : 0002a023;   % 708: 	sw zero,0(t0) %
000001e8 : 0fc35517;   % 710: 	la a0,atacou %
000001e9 : 4d050513;   % 710:  %
000001ea : c00575d3;   % 711: 	fcvt.w.s a1,fa0 %
000001eb : 00000317;   % 712: 	call Dialog_stop %
000001ec : 698300e7;   % 712:  %
000001ed : f0000053;   % 715: 	fmv.s.x ft0,zero %
000001ee : a00082d3;   % 716: 	fle.s t0,ft1,ft0 %
000001ef : 0c028a63;   % 717: 	beq t0,zero,Enemy_turn %
000001f0 : 00812283;   % 719: 	lw t0,8(sp) %
000001f1 : 0fc35317;   % 720: 	la t1, enemy_pkmn_index %
000001f2 : 7ac30313;   % 720:  %
000001f3 : 00032303;   % 721: 	lw t1,0(t1) %
000001f4 : 01400393;   % 722: 	li t2,20 %
000001f5 : 02730333;   % 723: 	mul t1,t1,t2 %
000001f6 : 006282b3;   % 724: 	add t0,t0,t1 %
000001f7 : 0002a303;   % 726: 	lw t1,0(t0) %
000001f8 : ffb30313;   % 727: 	addi t1,t1,-5	# correct this funct %
000001f9 : 0062a023;   % 728: 	sw t1,0(t0) %
000001fa : 0fc35317;   % 731: 	la t1, enemy_pkmns %
000001fb : 5a430313;   % 731:  %
000001fc : 00032383;   % 732: 	lw t2,0(t1) %
000001fd : fff38393;   % 733: 	addi t2,t2,-1 %
000001fe : 00732023;   % 734: 	sw t2,0(t1) %
000001ff : 02039063;   % 736: 	bne t2,zero,dont_win %
00000200 : 0fc35517;   % 737: 	la a0,ganhou %
00000201 : 4ac50513;   % 737:  %
00000202 : 00000593;   % 738: 	li a1,0 %
00000203 : 00000317;   % 739: 	call Dialog_stop %
00000204 : 638300e7;   % 739:  %
00000205 : 00000513;   % 740: 	li a0,0 %
00000206 : 1a00006f;   % 741: 	j End_battle %
00000207 : 0fc35317;   % 744: 	la t1, enemy_pkmn_index %
00000208 : 75430313;   % 744:  %
00000209 : 00032283;   % 745: 	lw t0,0(t1) %
0000020a : 00128293;   % 746: 	addi t0,t0,1 %
0000020b : 00500fb3;   % 748: 	mv t6,t0 %
0000020c : 01400313;   % 749: 	li t1,20 %
0000020d : 026282b3;   % 750: 	mul t0,t0,t1 %
0000020e : 00812383;   % 752: 	lw t2,8(sp) %
0000020f : 005382b3;   % 753: 	add t0,t2,t0 %
00000210 : 0002a303;   % 756: 	lw t1,0(t0) %
00000211 : 0042a383;   % 759: 	lw t2,4(t0) %
00000212 : 0082ae03;   % 760: 	lw t3,8(t0) %
00000213 : 00c2ae83;   % 761: 	lw t4,12(t0) %
00000214 : 0102af03;   % 762: 	lw t5,16(t0) %
00000215 : 0fc35297;   % 764: 	la t0,current_enemy_pkmn %
00000216 : 70828293;   % 764:  %
00000217 : 0062a023;   % 766: 	sw t1,0(t0) %
00000218 : 0072a223;   % 767: 	sw t2,4(t0) %
00000219 : 01c2a423;   % 768: 	sw t3,8(t0) %
0000021a : 01d2a623;   % 769: 	sw t4,12(t0) %
0000021b : 01e2a823;   % 770: 	sw t5,16(t0) %
0000021c : 01f2aa23;   % 771: 	sw t6,20(t0)	 %
0000021d : 01c0006f;   % 773: 	j Enemy_turn %
0000021e : 00000317;   % 777: call print_lifes %
0000021f : 17c300e7;   % 777:  %
00000220 : 00000317;   % 778: call Frame_changer %
00000221 : 314300e7;   % 778:  %
00000222 : 3c4000ef;   % 779: jal BGM %
00000223 : 995ff06f;   % 780: j Player_Loop %
00000224 : 00200513;   % 784: 	li a0,2 %
00000225 : 02900893;   % 785: 	li a7,41 %
00000226 : 00000073;   % 786: 	ecall	 %
00000227 : 00157e13;   % 787: 	andi t3,a0,1 %
00000228 : 0fc35297;   % 788: 	la t0,current_enemy_pkmn %
00000229 : 6bc28293;   % 788:  %
0000022a : 0002a303;   % 789: 	lw t1,0(t0) %
0000022b : 00131393;   % 790: 	slli t2,t1,1 %
0000022c : 01c383b3;   % 791: 	add t2,t2,t3 %
0000022d : 0fc35297;   % 793: 	la t0, player_attacks %
0000022e : 5b528293;   % 793:  %
0000022f : 007283b3;   % 794: 	add t2,t0,t2 %
00000230 : 00038503;   % 795: 	lb a0,0(t2) %
00000231 : 0fc35597;   % 797: 	la a1, enemy_level %
00000232 : 6a058593;   % 797:  %
00000233 : 0fc35617;   % 798: 	la a2, enemy_stats %
00000234 : 69c60613;   % 798:  %
00000235 : 0fc35697;   % 799: 	la a3, stats %
00000236 : 67c68693;   % 799:  %
00000237 : 0fc35297;   % 800: 	la t0,current_player_pkmn %
00000238 : 66828293;   % 800:  %
00000239 : 0002a703;   % 801: 	lw a4,0(t0) %
0000023a : 00170713;   % 802: 	addi a4,a4,1 %
0000023b : 00000317;   % 803: 	call attack %
0000023c : 4d8300e7;   % 803:  %
0000023d : 0fc35297;   % 805: 	la t0,current_player_pkmn %
0000023e : 65028293;   % 805:  %
0000023f : 0002a283;   % 806: 	lw t0,0(t0) %
00000240 : 00412303;   % 807: 	lw t1,4(sp) %
00000241 : 01400393;   % 808: 	li t2,20 %
00000242 : 027282b3;   % 809: 	mul t0,t0,t2 %
00000243 : 00628333;   % 810: 	add t1,t0,t1 %
00000244 : 0fc35297;   % 812: 	la t0,life_player %
00000245 : 63828293;   % 812:  %
00000246 : 0002a087;   % 813: 	flw ft1,0(t0) %
00000247 : 08a0f0d3;   % 814: 	fsub.s ft1,ft1,fa0 %
00000248 : 0012a027;   % 815: 	fsw ft1,0(t0) %
00000249 : 00132227;   % 816: 	fsw ft1,4(t1) %
0000024a : 0fc35517;   % 818: 	la a0,recebeu %
0000024b : 36450513;   % 818:  %
0000024c : c00575d3;   % 819: 	fcvt.w.s a1,fa0 %
0000024d : 00000317;   % 820: 	call Dialog_stop %
0000024e : 510300e7;   % 820:  %
0000024f : f0000053;   % 822: 	fmv.s.x ft0,zero %
00000250 : a00082d3;   % 823: 	fle.s t0,ft1,ft0 %
00000251 : 8c028ee3;   % 824: 	beq t0,zero,Player_Loop %
00000252 : 00412283;   % 826: 	lw t0,4(sp) %
00000253 : 0fc35317;   % 827: 	la t1, player_pkmn_index %
00000254 : 60c30313;   % 827:  %
00000255 : 00032303;   % 828: 	lw t1,0(t1) %
00000256 : 01400393;   % 829: 	li t2,20 %
00000257 : 02730333;   % 830: 	mul t1,t1,t2 %
00000258 : 006282b3;   % 831: 	add t0,t0,t1 %
00000259 : 0002a303;   % 833: 	lw t1,0(t0) %
0000025a : ffb30313;   % 834: 	addi t1,t1,-5	# correct this funct %
0000025b : 0062a023;   % 835: 	sw t1,0(t0) %
0000025c : 0fc35317;   % 837: 	la t1, player_pkmns %
0000025d : 3c830313;   % 837:  %
0000025e : 00032383;   % 838: 	lw t2,0(t1) %
0000025f : fff38393;   % 839: 	addi t2,t2,-1 %
00000260 : 00732023;   % 840: 	sw t2,0(t1) %
00000261 : 02039063;   % 842: 	bne t2,zero,dont_lose %
00000262 : 0fc35517;   % 843: 	la a0,perdeu %
00000263 : 34850513;   % 843:  %
00000264 : 00000593;   % 844: 	li a1,0 %
00000265 : 00000317;   % 845: 	call Dialog_stop %
00000266 : 4b0300e7;   % 845:  %
00000267 : 00100513;   % 846: 	li a0,1 %
00000268 : 0180006f;   % 847: 	j End_battle %
00000269 : 00000513;   % 849: 	li a0,0 %
0000026a : 00412503;   % 850: 	lw a0,4(sp) %
0000026b : 00001317;   % 851: 	call select_pkmn			 %
0000026c : 8cc300e7;   % 851:  %
0000026d : 86dff06f;   % 855: 	j Player_Loop %
0000026e : 00412283;   % 860: lw t0,4(sp) %
0000026f : 00000313;   % 861: li t1,0 %
00000270 : 00400393;   % 862: li t2,4 %
00000271 : 02730263;   % 865: beq t1,t2,end_recover_vals %
00000272 : 0002ae03;   % 866: lw t3,0(t0) %
00000273 : fff00e93;   % 867: li t4,-1 %
00000274 : 01de5663;   % 868: bge t3,t4,valid_val %
00000275 : 005e0e13;   % 869: addi t3,t3,5 %
00000276 : 01c2a023;   % 870: sw t3,0(t0) %
00000277 : 01428293;   % 872: addi t0,t0,20 %
00000278 : 00130313;   % 873: addi t1,t1,1 %
00000279 : fe1ff06f;   % 874: j recover_vals %
0000027a : 00012083;   % 877: lw ra,0(sp) %
0000027b : 00c10113;   % 878: addi sp,sp,12 %
0000027c : 00008067;   % 880: ret  %
0000027d : ffc10113;   % 884: addi sp,sp,-4 %
0000027e : 00112023;   % 885: sw ra,0(sp) %
0000027f : 00700513;   % 888: li a0, 0x07 # color %
00000280 : 0e800593;   % 889: li a1, 232   # x %
00000281 : 08a00613;   % 890: li a2, 138    # y %
00000282 : 0fc35297;   % 892: la t0, life_player %
00000283 : 54028293;   % 892:  %
00000284 : 0002a007;   % 893: flw ft0,0(t0) %
00000285 : c00076d3;   % 894: fcvt.w.s a3,ft0 %
00000286 : 04000713;   % 897: li a4, 64   # total length %
00000287 : 00500793;   % 898: li a5, 5   # thickness %
00000288 : 00000317;   % 899: call bar %
00000289 : 2ac300e7;   % 899:  %
0000028a : 07700513;   % 904: li a0, 0x77 # color %
0000028b : 04400593;   % 905: li a1, 68   # x %
0000028c : 03200613;   % 906: li a2, 50   # y %
0000028d : 0fc35297;   % 908: la t0, life_enemy %
0000028e : 52c28293;   % 908:  %
0000028f : 0002a007;   % 909: flw ft0,0(t0) %
00000290 : c00076d3;   % 910: fcvt.w.s a3,ft0 %
00000291 : 04000713;   % 913: li a4, 64 %
00000292 : 00500793;   % 914: li a5, 5 %
00000293 : 00000317;   % 915: call bar %
00000294 : 280300e7;   % 915:  %
00000295 : 00012083;   % 917: lw ra,0(sp) %
00000296 : 00410113;   % 918: addi sp,sp,4	 %
00000297 : 00008067;   % 920: ret			 %
00000298 : ff200337;   % 922: key:	li t1,0xFF200000		#  %
00000299 : 00030313;   % 922:  %
0000029a : 00030283;   % 923: 	lb t0,0(t1)			#  %
0000029b : 0012f293;   % 924: 	andi t0,t0,0x0001		# Copiei do exemplo mesmo %
0000029c : 00028463;   % 925:    	beq t0,zero,fim  	   	# pode denunciar %
0000029d : 00432503;   % 926:   	lw a0,4(t1)  			#  %
0000029e : 00008067;   % 927: fim:	ret	 %
0000029f : 00a00833;   % 930:         mv      a6,a0 %
000002a0 : 07300313;   % 931:         li      t1,115 %
000002a1 : 0005a883;   % 932:         lw      a7,0(a1) %
000002a2 : 0045a783;   % 933:         lw      a5,4(a1) %
000002a3 : 00e00533;   % 934:         mv      a0,a4 %
000002a4 : 0c680c63;   % 935:         beq     a6,t1,M2 %
000002a5 : 07036e63;   % 936:         bgtu    a6,t1,M3 %
000002a6 : 06100713;   % 937:         li      a4,97 %
000002a7 : 0ee80063;   % 938:         beq     a6,a4,M4 %
000002a8 : 06400713;   % 939:         li      a4,100 %
000002a9 : 08e81663;   % 940:         bne     a6,a4,M6 %
000002aa : 00462703;   % 941:         lw      a4,4(a2) %
000002ab : 00188893;   % 942:         addi    a7,a7,1 %
000002ac : 02e8e8b3;   % 943:         rem     a7,a7,a4 %
000002ad : 0115a023;   % 944:         sw      a7,0(a1) %
000002ae : 00462703;   % 946:         lw      a4,4(a2) %
000002af : 02e787b3;   % 947:         mul     a5,a5,a4 %
000002b0 : 011787b3;   % 948:         add     a5,a5,a7 %
000002b1 : 00179713;   % 949:         slli    a4,a5,1 %
000002b2 : 00f707b3;   % 950:         add     a5,a4,a5 %
000002b3 : 00279793;   % 951:         slli    a5,a5,2 %
000002b4 : 00f687b3;   % 952:         add     a5,a3,a5 %
000002b5 : 0007a703;   % 953:         lw      a4,0(a5) %
000002b6 : 00e52023;   % 954:         sw      a4,0(a0) %
000002b7 : 0047a703;   % 955:         lw      a4,4(a5) %
000002b8 : 00e52223;   % 956:         sw      a4,4(a0) %
000002b9 : 0087a783;   % 957:         lw      a5,8(a5) %
000002ba : 00f52423;   % 958:         sw      a5,8(a0) %
000002bb : 00a00733;   % 959:         mv a4,a0 %
000002bc : 03e00513;   % 960:         li a0,62	# nota %
000002bd : 07800593;   % 961:         li a1,120	# duracao %
000002be : 00b00613;   % 962:         li a2,11	# instrumento %
000002bf : 03200693;   % 963:         li a3,50	# volume %
000002c0 : 01f00893;   % 964:         li a7,31 %
000002c1 : 00000073;   % 965:         ecall %
000002c2 : 00e00533;   % 966:         mv a0,a4 %
000002c3 : 00008067;   % 967:         ret %
000002c4 : 07700713;   % 969:         li      a4,119 %
000002c5 : 00e81e63;   % 970:         bne     a6,a4,M6 %
000002c6 : 00062703;   % 971:         lw      a4,0(a2) %
000002c7 : 00f70833;   % 972:         add     a6,a4,a5 %
000002c8 : fff80813;   % 973:         addi    a6,a6,-1 %
000002c9 : 02e867b3;   % 974:         rem     a5,a6,a4 %
000002ca : 00f5a223;   % 975:         sw      a5,4(a1) %
000002cb : f8dff06f;   % 976:         j       M8 %
000002cc : 00462703;   % 978:         lw      a4,4(a2) %
000002cd : 02e787b3;   % 979:         mul     a5,a5,a4 %
000002ce : 011787b3;   % 980:         add     a5,a5,a7 %
000002cf : 00179713;   % 981:         slli    a4,a5,1 %
000002d0 : 00f707b3;   % 982:         add     a5,a4,a5 %
000002d1 : 00279793;   % 983:         slli    a5,a5,2 %
000002d2 : 00f687b3;   % 984:         add     a5,a3,a5 %
000002d3 : 0007a703;   % 985:         lw      a4,0(a5) %
000002d4 : 00e52023;   % 986:         sw      a4,0(a0) %
000002d5 : 0047a703;   % 987:         lw      a4,4(a5) %
000002d6 : 00e52223;   % 988:         sw      a4,4(a0) %
000002d7 : 0087a783;   % 989:         lw      a5,8(a5) %
000002d8 : 00f52423;   % 990:         sw      a5,8(a0) %
000002d9 : 00008067;   % 991:         ret %
000002da : 00062703;   % 993:         lw      a4,0(a2) %
000002db : 00178793;   % 994:         addi    a5,a5,1 %
000002dc : 02e7e7b3;   % 995:         rem     a5,a5,a4 %
000002dd : 00f5a223;   % 996:         sw      a5,4(a1) %
000002de : f41ff06f;   % 997:         j       M8 %
000002df : 00462703;   % 999:         lw      a4,4(a2) %
000002e0 : 011708b3;   % 1000:         add     a7,a4,a7 %
000002e1 : fff88893;   % 1001:         addi    a7,a7,-1 %
000002e2 : 02e8e8b3;   % 1002:         rem     a7,a7,a4 %
000002e3 : 0115a023;   % 1003:         sw      a7,0(a1) %
000002e4 : f29ff06f;   % 1004:         j       M8 %
000002e5 : 001002b7;   % 1007: 	li t0,0x00100000 %
000002e6 : 00028293;   % 1007:  %
000002e7 : 0054c4b3;   % 1008: 	xor s1,s1,t0 %
000002e8 : ff2002b7;   % 1009: 	li t0,0xFF200604 %
000002e9 : 60428293;   % 1009:  %
000002ea : 0002a303;   % 1010: 	lw t1,0(t0) %
000002eb : 00134313;   % 1011: 	xori t1,t1,0x01 %
000002ec : 0062a023;   % 1012: 	sw t1,0(t0) %
000002ed : 00008067;   % 1013: 	ret %
000002ee : 00052283;   % 1017: 	lw t0,0(a0) %
000002ef : 005586b3;   % 1018: 	add a3,a1,t0 %
000002f0 : 00452303;   % 1020: 	lw t1,4(a0) %
000002f1 : 00660733;   % 1021: 	add a4,a2,t1 %
000002f2 : 405002b3;   % 1023: 	neg  t0,t0	# t6 = t0 % 4 %
000002f3 : 0032ff93;   % 1024:         andi t6,t0,3	# %
000002f4 : 00850513;   % 1026: 	addi a0,a0,8 %
000002f5 : 00100f13;   % 1028: 	li t5, 1 %
000002f6 : 00078a63;   % 1029: 	beq a5,zero,Right_Orientation %
000002f7 : 00b003b3;   % 1030: 	mv t2,a1 %
000002f8 : 00d005b3;   % 1031: 	mv a1,a3 %
000002f9 : 007006b3;   % 1032: 	mv a3,t2 %
000002fa : ffef0f13;   % 1033: 	addi t5,t5,-2 %
000002fb : 00b002b3;   % 1036: 	mv t0,a1 %
000002fc : 00c00333;   % 1037: 	mv t1,a2 %
000002fd : 14000393;   % 1038: 	li t2,320 %
000002fe : 027303b3;   % 1039: 	mul t2,t1,t2 %
000002ff : 005383b3;   % 1040: 	add t2,t2,t0 %
00000300 : 007483b3;   % 1041: 	add t2,s1,t2 %
00000301 : fc700e93;   % 1043: 	li t4,-57 %
00000302 : 04e30063;   % 1045: 	beq t1,a4, END_I %
00000303 : 02d28063;   % 1047: 	beq t0,a3, END_Inner_I %
00000304 : 00050e03;   % 1048: 	lb t3,0(a0) %
00000305 : 01de0463;   % 1049: 	beq t3,t4,Transparent %
00000306 : 01c38023;   % 1050: 	sb t3,0(t2) %
00000307 : 01e383b3;   % 1053: 	add t2,t2,t5 %
00000308 : 01e282b3;   % 1054: 	add t0,t0,t5 %
00000309 : 00150513;   % 1055: 	addi a0,a0,1 %
0000030a : fe5ff06f;   % 1056: 	j INNER_Loop_I1 %
0000030b : 00b383b3;   % 1059: 	add t2,t2,a1 %
0000030c : 40d383b3;   % 1060: 	sub t2,t2,a3 %
0000030d : 14038393;   % 1061: 	addi t2,t2,320 %
0000030e : 00b002b3;   % 1062: 	mv t0,a1 %
0000030f : 00130313;   % 1063: 	addi t1,t1,1 %
00000310 : 01f50533;   % 1064: 	add a0,a0,t6	# %
00000311 : fc5ff06f;   % 1065: 	j Loop_I1 %
00000312 : 00008067;   % 1067: 	ret %
00000313 : 00a00fb3;   % 1070: 	mv t6, a0		 %
00000314 : 03200693;   % 1071: 	li a3,50		# define o volume %
00000315 : 01e00893;   % 1073: 	li a7,30 %
00000316 : 00000073;   % 1074: 	ecall %
00000317 : 41350333;   % 1076: 	sub t1,a0,s3 %
00000318 : 000ca503;   % 1077: 	lw a0,0(s9) %
00000319 : 00050463;   % 1078: 	beq a0,zero,erro %
0000031a : 02a36333;   % 1079: 	rem t1,t1,a0 %
0000031b : 04a35a63;   % 1081: 	bge t1,a0,pulou_nota %
0000031c : 05000613;   % 1083: 	li a2,80 	       # define o instrumento %
0000031d : 000ca503;   % 1084: 	lw a0,0(s9)		# le o valor da nota %
0000031e : 40650533;   % 1085: 	sub a0,a0,t1 %
0000031f : 004ca583;   % 1086: 	lw a1,4(s9)		# le a duracao da nota %
00000320 : 01f00893;   % 1087: 	li a7,31		# define a chamada de syscall %
00000321 : 00000073;   % 1088: 	ecall			# toca a nota		 %
00000322 : 000ca503;   % 1090: 	lw a0,0(s9)		# le o valor da nota %
00000323 : 40650533;   % 1091: 	sub a0,a0,t1 %
00000324 : 00c00293;   % 1092: 	li t0, 12 %
00000325 : 40550533;   % 1093: 	sub a0, a0, t0 %
00000326 : 004ca583;   % 1094: 	lw a1,4(s9)		# le a duracao da nota %
00000327 : 01f00893;   % 1095: 	li a7,31		# define a chamada de syscall %
00000328 : 00000073;   % 1096: 	ecall			# toca a nota %
00000329 : 000ca503;   % 1098: 	lw a0,0(s9)		# le o valor da nota %
0000032a : 40650533;   % 1099: 	sub a0,a0,t1 %
0000032b : 01800293;   % 1100: 	li t0, 24 %
0000032c : 40550533;   % 1101: 	sub a0, a0, t0 %
0000032d : 004ca583;   % 1102: 	lw a1,4(s9)		# le a duracao da nota %
0000032e : 01f00893;   % 1103: 	li a7,31		# define a chamada de syscall %
0000032f : 00000073;   % 1104: 	ecall			# toca a nota %
00000330 : 008c8c93;   % 1106: 	addi s9,s9,8		# incrementa para o endere?o da pr?xima nota %
00000331 : 01f00533;   % 1113: 	mv a0, t6 %
00000332 : 00008067;   % 1115: 	ret %
00000333 : 02e686b3;   % 1120:         mul     a3,a3,a4 %
00000334 : 06400893;   % 1121:         li      a7,100 %
00000335 : 0316c6b3;   % 1122:         div     a3,a3,a7 %
00000336 : 00b688b3;   % 1123:         add     a7,a3,a1 %
00000337 : 0515d863;   % 1124:         bge     a1,a7,.L1 %
00000338 : 00f607b3;   % 1125:         add     a5,a2,a5 %
00000339 : 04f65463;   % 1126:         bge     a2,a5,.L1 %
0000033a : 00279713;   % 1127:         slli    a4,a5,2 %
0000033b : 00f70733;   % 1128:         add     a4,a4,a5 %
0000033c : 00261793;   % 1129:         slli    a5,a2,2 %
0000033d : 00671713;   % 1130:         slli    a4,a4,6 %
0000033e : 00c78633;   % 1131:         add     a2,a5,a2 %
0000033f : 00970733;   % 1132:         add     a4,a4,s1 %
00000340 : 00661613;   % 1133:         slli    a2,a2,6 %
00000341 : 00b70733;   % 1134:         add     a4,a4,a1 %
00000342 : 00960633;   % 1135:         add     a2,a2,s1 %
00000343 : 0ff57693;   % 1136:         andi    a3,a0,0xff %
00000344 : 00c587b3;   % 1138:         add     a5,a1,a2 %
00000345 : 00d78023;   % 1140:         sb      a3,0(a5) %
00000346 : 14078793;   % 1141:         addi    a5,a5,320 %
00000347 : fef71ce3;   % 1142:         bne     a4,a5,.L4 %
00000348 : 00158593;   % 1143:         addi    a1,a1,1 %
00000349 : 00170713;   % 1144:         addi    a4,a4,1 %
0000034a : ff1594e3;   % 1145:         bne     a1,a7,.L6 %
0000034b : 00008067;   % 1147:         ret %
0000034c : 00b05e63;   % 1151:         ble     a1,zero,.L2 %
0000034d : 00000713;   % 1152:         li      a4,0 %
0000034e : 00054783;   % 1154:         lbu     a5,0(a0) %
0000034f : 00170713;   % 1155:         addi    a4,a4,1 %
00000350 : 00478793;   % 1156:         addi    a5,a5,4 %
00000351 : 00f50533;   % 1157:         add     a0,a0,a5 %
00000352 : fee598e3;   % 1158:         bne     a1,a4,.L3 %
00000353 : 00054783;   % 1160: 	lbu     a5,0(a0) %
00000354 : 00278793;   % 1161:         addi    a5,a5,2 %
00000355 : 00f505b3;   % 1162:         add     a1,a0,a5 %
00000356 : 00008067;   % 1164:         ret %
00000357 : 0005a783;   % 1167:         lw      a5,0(a1) %
00000358 : 0fc35717;   % 1170:         la a4,.LC0 %
00000359 : 21470713;   % 1170:  %
0000035a : 00072687;   % 1171:         flw fa3,0(a4) %
0000035b : d007f7d3;   % 1173:         fcvt.s.w        fa5,a5 %
0000035c : 0fc35797;   % 1176:         la a5,.LC1 %
0000035d : 20878793;   % 1176:  %
0000035e : 0007a707;   % 1177:         flw fa4,0(a5) %
0000035f : 00f7f7d3;   % 1179:         fadd.s  fa5,fa5,fa5 %
00000360 : 00062783;   % 1180:         lw      a5,0(a2) %
00000361 : d0057653;   % 1181:         fcvt.s.w        fa2,a0 %
00000362 : d007f5d3;   % 1182:         fcvt.s.w        fa1,a5 %
00000363 : 18d7f7d3;   % 1183:         fdiv.s  fa5,fa5,fa3 %
00000364 : 0046a783;   % 1184:         lw      a5,4(a3) %
00000365 : d007f6d3;   % 1185:         fcvt.s.w        fa3,a5 %
00000366 : 0fc35797;   % 1187:         la a5,.LC2 %
00000367 : 1e478793;   % 1187:  %
00000368 : 00e7f7d3;   % 1189:         fadd.s  fa5,fa5,fa4 %
00000369 : 10b7f7d3;   % 1190:         fmul.s  fa5,fa5,fa1 %
0000036a : 10c7f7d3;   % 1191:         fmul.s  fa5,fa5,fa2 %
0000036b : 18d7f7d3;   % 1192:         fdiv.s  fa5,fa5,fa3 %
0000036c : 0007a687;   % 1194:         flw fa3,0(a5) %
0000036d : 18d7f7d3;   % 1195:         fdiv.s  fa5,fa5,fa3 %
0000036e : 00e7f7d3;   % 1196:         fadd.s  fa5,fa5,fa4 %
0000036f : 10a7f553;   % 1197:         fmul.s  fa0,fa5,fa0 %
00000370 : 00008067;   % 1198:         ret %
00000371 : fec10113;   % 1209: addi sp,sp,-20 %
00000372 : 00112023;   % 1210: sw ra,0(sp) %
00000373 : 00b12223;   % 1211: sw a1,4(sp) %
00000374 : 00c12423;   % 1212: sw a2,8(sp) %
00000375 : 00d12623;   % 1213: sw a3,12(sp) %
00000376 : 00e12823;   % 1214: sw a4,16(sp) %
00000377 : 00a005b3;   % 1217: mv a1,a0 %
00000378 : 0fc35517;   % 1219: la a0, attack_section  %
00000379 : 03150513;   % 1219:  %
0000037a : f49ff0ef;   % 1221: jal select_battle_section %
0000037b : 00158683;   % 1223: lb a3,1(a1)	# attack base damage %
0000037c : 00058583;   % 1224: lb a1,0(a1)	# attack type %
0000037d : 0fc35517;   % 1234: la a0, types_matrix %
0000037e : 19450513;   % 1234:  %
0000037f : 01012603;   % 1237: lw a2,16(sp) %
00000380 : 024000ef;   % 1239: jal access_matrix %
00000381 : 00d00533;   % 1246: mv a0, a3 %
00000382 : 00412583;   % 1247: lw a1,4(sp) %
00000383 : 00812603;   % 1248: lw a2,8(sp) %
00000384 : 00c12683;   % 1249: lw a3,12(sp) %
00000385 : f49ff0ef;   % 1250: jal damage %
00000386 : 00012083;   % 1253: lw ra,0(sp) %
00000387 : 01410113;   % 1254: addi sp,sp,20 %
00000388 : 00008067;   % 1256: ret             %
00000389 : 00159793;   % 1260:         slli    a5,a1,1 %
0000038a : 00b785b3;   % 1261:         add     a1,a5,a1 %
0000038b : 00359593;   % 1262:         slli    a1,a1,3 %
0000038c : 00b50533;   % 1263:         add     a0,a0,a1 %
0000038d : 00261613;   % 1264:         slli    a2,a2,2 %
0000038e : 00c50533;   % 1265:         add     a0,a0,a2 %
0000038f : 00052507;   % 1266:         flw     fa0,0(a0) %
00000390 : 00008067;   % 1267:         ret                                                %
00000391 : ff010113;   % 1273: addi sp,sp,-16 %
00000392 : 00112023;   % 1274: sw ra,0(sp) %
00000393 : 00012223;   % 1275: sw zero,4(sp) %
00000394 : 00a12423;   % 1276: sw a0,8(sp) %
00000395 : 00b12623;   % 1277: sw a1,12(sp) %
00000396 : df5ff0ef;   % 1281: jal BGM %
00000397 : 0fc1c517;   % 1283: la a0, battleText	# Load map %
00000398 : 3ac50513;   % 1283:  %
00000399 : 00000793;   % 1284: li a5,0 %
0000039a : 00a00533;   % 1285: <11> mv a0,a0 %
0000039b : 00000593;   % 1285: <12> li a1,0 %
0000039c : 0a800613;   % 1285: <13> li a2,168 %
0000039d : 00100793;   % 1285: <14> li a5, 1 %
0000039e : 00000317;   % 1285: <15> call,Image %
0000039f : d40300e7;   % 1285:  %
000003a0 : 00412e03;   % 1288: lw t3,4(sp) %
000003a1 : 00812283;   % 1290: lw t0,8(sp) %
000003a2 : 00f00313;   % 1291: li t1, 15 %
000003a3 : 0b600393;   % 1292: li t2, 182 %
000003a4 : 00500533;   % 1293: <39> mv a0, t0, %
000003a5 : 006005b3;   % 1293: <40> mv a1, t1, %
000003a6 : 00700633;   % 1293: <41> mv a2, t2 %
000003a7 : 01c006b3;   % 1293: <42> mv a3, t3 %
000003a8 : 02300713;   % 1293: <43> li a4, 35 %
000003a9 : 00500793;   % 1293: <44> li a5, 5 %
000003aa : 00005837;   % 1293: <45> li a6, 0x51FF %
000003ab : 1ff80813;   % 1293:  %
000003ac : 00000317;   % 1293: <46> call PrintDialog %
000003ad : 06c300e7;   % 1293:  %
000003ae : 00a003b3;   % 1296: mv t2,a0 %
000003af : 06500893;   % 1298: li a7,101 %
000003b0 : 00c12503;   % 1299: lw a0,12(sp) %
000003b1 : 02050063;   % 1300: beq a0,zero,dont_print_val %
000003b2 : 00f00593;   % 1301: li a1,15 %
000003b3 : 0c000613;   % 1302: li a2,192 %
000003b4 : 0000c6b7;   % 1303: li a3,0xc7ff %
000003b5 : 7ff68693;   % 1303:  %
000003b6 : 4144d713;   % 1304: srai a4,s1,20 %
000003b7 : 00177713;   % 1305: andi a4,a4,1 %
000003b8 : 00000073;   % 1306: ecall %
000003b9 : 00000317;   % 1309: call key %
000003ba : b7c300e7;   % 1309:  %
000003bb : 00a00313;   % 1311: li t1, 10 %
000003bc : 00651663;   % 1312: bne a0,t1, End_If_DS %
000003bd : 00038e63;   % 1314: 	beq t2,zero,end_Loop_DS %
000003be : 00712223;   % 1315: 	sw t2,4(sp) %
000003bf : 00000317;   % 1320: call print_lifes %
000003c0 : af8300e7;   % 1320:  %
000003c1 : 00000317;   % 1321: call Frame_changer %
000003c2 : c90300e7;   % 1321:  %
000003c3 : f4dff06f;   % 1323: j Loop_DS %
000003c4 : 00012083;   % 1326: lw ra,0(sp) %
000003c5 : 01010113;   % 1327: addi sp,sp,16 %
000003c6 : 00008067;   % 1329: ret %
000003c7 : 00052283;   % 1339: 	lw t0,0(a0)  # t0 = length %
000003c8 : 00450513;   % 1340: 	addi a0,a0,4 # addrress of string %
000003c9 : 00e00333;   % 1341: 	mv t1,a4     # max letters per line %
000003ca : 00f003b3;   % 1342: 	mv t2,a5     # max lines per textBox %
000003cb : 00000e13;   % 1344: 	li t3,0	     # index of the letter  %
000003cc : 00000e93;   % 1345: 	li t4,0	     # index of the line %
000003cd : 00d00f33;   % 1346: 	mv t5,a3     # num of letters written %
000003ce : 00b00fb3;   % 1348: 	mv t6, a1 %
000003cf : 00c007b3;   % 1349: 	mv a5, a2 %
000003d0 : 01e50533;   % 1351: 	add a0,a0,t5 %
000003d1 : 06f00893;   % 1353: 	li a7,111    # Print char %
000003d2 : 010006b3;   % 1354: 	mv a3, a6   # Color %
000003d3 : 4144d713;   % 1356: 	srai a4,s1,20 %
000003d4 : 00177713;   % 1357: 	andi a4,a4,1 %
000003d5 : 07d38463;   % 1361: 	beq t2,t4,End_PD %
000003d6 : 05c30c63;   % 1363: 	beq t1,t3,End_Inner_PD %
000003d7 : 07e28063;   % 1364: 	beq t0,t5,End_PD %
000003d8 : 003e1593;   % 1366: 	slli a1,t3,3 %
000003d9 : 01f585b3;   % 1367: 	add a1,a1,t6   #  x  %
000003da : 003e9613;   % 1368: 	slli a2,t4,3 %
000003db : 00f60633;   % 1369: 	add a2,a2,a5   # y %
000003dc : ff810113;   % 1371: 	addi sp,sp,-8 %
000003dd : 00a12023;   % 1372: 	sw a0,0(sp) %
000003de : 00812223;   % 1373: 	sw s0,4(sp) %
000003df : 00050503;   % 1375: 	lb a0,0(a0) %
000003e0 : 00a00413;   % 1376: 	li s0,10 %
000003e1 : 00851663;   % 1377: 	bne a0,s0,not_new_line %
000003e2 : 00600e33;   % 1379: 	mv t3,t1 %
000003e3 : fffe0e13;   % 1380: 	addi t3,t3,-1 %
000003e4 : 00000073;   % 1382: not_new_line:	ecall	 %
000003e5 : 00012503;   % 1384: 	lw a0,0(sp) %
000003e6 : 00412403;   % 1385: 	lw s0,4(sp) %
000003e7 : 00810113;   % 1386: 	addi sp,sp,8 %
000003e8 : 001e0e13;   % 1388: 	addi t3,t3,1 %
000003e9 : 001f0f13;   % 1389: 	addi t5,t5,1 %
000003ea : 00150513;   % 1390: 	addi a0,a0,1 %
000003eb : fadff06f;   % 1391: 	j Inner_Loop_PB %
000003ec : 00000e13;   % 1394: 	li t3,0 %
000003ed : 001e8e93;   % 1395: 	addi t4,t4,1 %
000003ee : f9dff06f;   % 1396: 	j Loop_PD %
000003ef : fff50383;   % 1399: 	lb t2,-1(a0) %
000003f0 : ff638393;   % 1400: 	addi t2,t2,-10 %
000003f1 : 02038c63;   % 1402: 	beq t2,zero,End_Next_Symbol %
000003f2 : 005f2333;   % 1404: 	slt t1,t5,t0 %
000003f3 : 02030863;   % 1405: 	beq t1,zero,End_Next_Symbol %
000003f4 : 00858593;   % 1407: 	addi a1, a1, 8 %
000003f5 : 04900513;   % 1409: 	li a0,73 %
000003f6 : 0000c6b7;   % 1410: 	li a3,0xC7FF %
000003f7 : 7ff68693;   % 1410:  %
000003f8 : 06f00893;   % 1416: 	li a7,111 %
000003f9 : 00000073;   % 1417: 	ecall %
000003fa : 03e00513;   % 1419: 	li a0,62 %
000003fb : 00258593;   % 1420: 	addi a1,a1,2 %
000003fc : 0000c6b7;   % 1421: 	li a3,0xC7FF %
000003fd : 7ff68693;   % 1421:  %
000003fe : 00000073;   % 1423: 	ecall %
000003ff : 005f0663;   % 1425: 	beq t5,t0,If_PD %
00000400 : 01e00533;   % 1426: 	mv a0, t5 %
00000401 : 00008067;   % 1427: 	ret %
00000402 : 00000513;   % 1428: If_PD:	li a0,0 %
00000403 : 00008067;   % 1429: 	ret %
00000404 : 00000293;   % 1437: li t0, 0 %
00000405 : 00b28c63;   % 1439: loop_AN: beq t0,a1,end_AN %
00000406 : 00050303;   % 1441: lb t1,0(a0) %
00000407 : 00650533;   % 1442: add a0,a0,t1 %
00000408 : 00250513;   % 1443: addi a0,a0,2 %
00000409 : 00128293;   % 1445: addi t0,t0,1 %
0000040a : fedff06f;   % 1447: j loop_AN %
0000040b : 00150513;   % 1450: addi a0,a0,1 %
0000040c : 00008067;   % 1452: ret %
0000040d : ffc10113;   % 1459: addi sp,sp,-4 %
0000040e : 00112023;   % 1460: sw ra,0(sp) %
0000040f : 0fc0f517;   % 1462: la a0, battleBG		# background %
00000410 : fc450513;   % 1462:  %
00000411 : 00a00533;   % 1463: <11> mv a0,a0 %
00000412 : 00000593;   % 1463: <12> li a1,0 %
00000413 : 00000613;   % 1463: <13> li a2,0 %
00000414 : 00000793;   % 1463: <14> li a5, 0 %
00000415 : 00000317;   % 1463: <15> call,Image %
00000416 : b64300e7;   % 1463:  %
00000417 : 0fc1c517;   % 1465: la a0, battleText	# texto %
00000418 : 1ac50513;   % 1465:  %
00000419 : 00a00533;   % 1466: <11> mv a0,a0 %
0000041a : 00000593;   % 1466: <12> li a1,0 %
0000041b : 0a800613;   % 1466: <13> li a2,168 %
0000041c : 00000793;   % 1466: <14> li a5, 0 %
0000041d : 00000317;   % 1466: <15> call,Image %
0000041e : b44300e7;   % 1466:  %
0000041f : 0fc26517;   % 1468: la a0, battleEnemy	# janela de vida do inimigo %
00000420 : 6b850513;   % 1468:  %
00000421 : 00a00533;   % 1469: <11> mv a0,a0 %
00000422 : 01100593;   % 1469: <12> li a1,17 %
00000423 : 01900613;   % 1469: <13> li a2,25 %
00000424 : 00000793;   % 1469: <14> li a5, 0 %
00000425 : 00000317;   % 1469: <15> call,Image %
00000426 : b24300e7;   % 1469:  %
00000427 : 0fc25517;   % 1471: la a0, battlePlayer	# janela de vida do jogador %
00000428 : 87c50513;   % 1471:  %
00000429 : 00a00533;   % 1472: <11> mv a0,a0 %
0000042a : 0a800593;   % 1472: <12> li a1,168 %
0000042b : 07100613;   % 1472: <13> li a2,113 %
0000042c : 00000793;   % 1472: <14> li a5, 0 %
0000042d : 00000317;   % 1472: <15> call,Image %
0000042e : b04300e7;   % 1472:  %
0000042f : 0fc35297;   % 1474: la t0, current_player_pkmn %
00000430 : e8828293;   % 1474:  %
00000431 : 0002a583;   % 1475: lw a1,0(t0) %
00000432 : 0fc35517;   % 1476: la a0, pkmns_names %
00000433 : d1850513;   % 1476:  %
00000434 : 00000317;   % 1477: call access_name %
00000435 : f40300e7;   % 1477:  %
00000436 : 0bc00593;   % 1479: li a1, 188 %
00000437 : 07900613;   % 1480: li a2, 121 %
00000438 : 0000c6b7;   % 1481: li a3, 0xc700 %
00000439 : 70068693;   % 1481:  %
0000043a : 4144d713;   % 1482: srai a4,s1,20 %
0000043b : 00177713;   % 1483: andi a4,a4,1 %
0000043c : 06800893;   % 1484: li a7,104 %
0000043d : 00000073;   % 1485: ecall %
0000043e : 0fc35297;   % 1487: la t0, current_enemy_pkmn %
0000043f : e6428293;   % 1487:  %
00000440 : 0002a583;   % 1488: lw a1,0(t0) %
00000441 : 0fc35517;   % 1489: la a0, pkmns_names %
00000442 : cdc50513;   % 1489:  %
00000443 : 00000317;   % 1490: call access_name %
00000444 : f04300e7;   % 1490:  %
00000445 : 01700593;   % 1492: li a1, 23 %
00000446 : 02000613;   % 1493: li a2, 32 %
00000447 : 00000073;   % 1494: ecall %
00000448 : 0fc35297;   % 1496: 	la t0, pkmns_back %
00000449 : d6828293;   % 1496:  %
0000044a : 0fc35317;   % 1497: 	la t1,current_player_pkmn %
0000044b : e1c30313;   % 1497:  %
0000044c : 00032303;   % 1498: 	lw t1,0(t1) %
0000044d : 00231313;   % 1499: 	slli t1,t1,2 %
0000044e : 006282b3;   % 1500: 	add t0,t0,t1 %
0000044f : 0002a503;   % 1501: 	lw a0,0(t0) %
00000450 : 00000793;   % 1502: 	li a5, 0 %
00000451 : 00a00533;   % 1503: <11> mv a0,a0 %
00000452 : 03700593;   % 1503: <12> li a1,55 %
00000453 : 07200613;   % 1503: <13> li a2,114 %
00000454 : 00000793;   % 1503: <14> li a5, 0 %
00000455 : 00000317;   % 1503: <15> call,Image %
00000456 : a64300e7;   % 1503:  %
00000457 : 0fc35297;   % 1505: 	la t0, pkmns_front %
00000458 : d1828293;   % 1505:  %
00000459 : 0fc35317;   % 1506: 	la t1,current_enemy_pkmn %
0000045a : df830313;   % 1506:  %
0000045b : 00032303;   % 1507: 	lw t1,0(t1) %
0000045c : 00231313;   % 1508: 	slli t1,t1,2 %
0000045d : 006282b3;   % 1509: 	add t0,t0,t1 %
0000045e : 0002a503;   % 1510: 	lw a0,0(t0) %
0000045f : 00000793;   % 1511: 	li a5, 0 %
00000460 : 00a00533;   % 1512: <11> mv a0,a0 %
00000461 : 0d300593;   % 1512: <12> li a1,211 %
00000462 : 02f00613;   % 1512: <13> li a2,47 %
00000463 : 00000793;   % 1512: <14> li a5, 0 %
00000464 : 00000317;   % 1512: <15> call,Image %
00000465 : a28300e7;   % 1512:  %
00000466 : 00012083;   % 1514: lw ra,0(sp) %
00000467 : 00410113;   % 1515: addi sp,sp,4 %
00000468 : 00008067;   % 1517: ret  %
00000469 : ff810113;   % 1524: addi sp,sp,-8 %
0000046a : 00112023;   % 1525: sw ra,0(sp) %
0000046b : 00a12223;   % 1526: sw a0,4(sp) %
0000046c : 0fc32517;   % 1528: la a0, attackSelec	# Load map %
0000046d : d3c50513;   % 1528:  %
0000046e : 00a00533;   % 1529: <11> mv a0,a0 %
0000046f : 00000593;   % 1529: <12> li a1,0 %
00000470 : 0a800613;   % 1529: <13> li a2,168 %
00000471 : 00000793;   % 1529: <14> li a5, 0 %
00000472 : 00000317;   % 1529: <15> call,Image %
00000473 : 9f0300e7;   % 1529:  %
00000474 : 00412503;   % 1531: lw a0,4(sp) %
00000475 : 0fc35597;   % 1533: la a1, menu_position %
00000476 : cc858593;   % 1533:  %
00000477 : 0fc35617;   % 1534: la a2, lines_columns_pkmns %
00000478 : d2060613;   % 1534:  %
00000479 : 0fc35697;   % 1535: la a3, states_positions_pkmns %
0000047a : d2068693;   % 1535:  %
0000047b : 0fc35717;   % 1536: la a4, current_menu %
0000047c : d4870713;   % 1536:  %
0000047d : 00000317;   % 1537: call menu %
0000047e : 888300e7;   % 1537:  %
0000047f : 00452583;   % 1539: lw a1, 4 (a0) %
00000480 : 00852603;   % 1540: lw a2, 8 (a0) %
00000481 : 02a00513;   % 1541: li a0, 42	# eh relativa a cada jogada %
00000482 : 000106b7;   % 1543: li a3, 0xff00 %
00000483 : f0068693;   % 1543:  %
00000484 : 0144d293;   % 1544: srli t0, s1, 20 %
00000485 : 0012f713;   % 1545: andi a4, t0, 1 	# %
00000486 : 06f00893;   % 1546: li a7, 111	# %
00000487 : 00000073;   % 1547: ecall %
00000488 : 00100513;   % 1554: li a0,1 %
00000489 : 03000593;   % 1555: li a1,48 %
0000048a : 0bc00613;   % 1556: li a2,188 %
0000048b : 0000c6b7;   % 1557: li a3,0xc700 %
0000048c : 70068693;   % 1557:  %
0000048d : 4144d713;   % 1558: srai a4,s1,20 %
0000048e : 00177713;   % 1559: andi a4,a4,1 %
0000048f : 06500893;   % 1560: li a7,101 %
00000490 : 00000073;   % 1561: ecall %
00000491 : 00200513;   % 1563: li a0,2 %
00000492 : 03458593;   % 1564: addi a1,a1,52 %
00000493 : 00000073;   % 1565: ecall %
00000494 : 00300513;   % 1567: li a0,3 %
00000495 : 03000593;   % 1568: li a1,48 %
00000496 : 0d000613;   % 1569: li a2,208 %
00000497 : 00000073;   % 1570: ecall %
00000498 : 00400513;   % 1572: li a0,4 %
00000499 : 03458593;   % 1573: addi a1,a1,52 %
0000049a : 00000073;   % 1574: ecall %
0000049b : 00012083;   % 1576: lw ra,0(sp)  %
0000049c : 00810113;   % 1577: addi sp,sp,8 %
0000049d : 00008067;   % 1579: ret %
0000049e : ff810113;   % 1584: addi sp,sp,-8 %
0000049f : 00112023;   % 1585: sw ra,0(sp) %
000004a0 : 00a12223;   % 1586: sw a0,4(sp) %
000004a1 : fffff317;   % 1590: 	call key %
000004a2 : 7dc300e7;   % 1590:  %
000004a3 : 00a00293;   % 1591: 	li t0,10 %
000004a4 : 00a28c63;   % 1592: 	beq t0,a0,end_pkmn_select %
000004a5 : 00000317;   % 1593: 	call pkmn_select_menu %
000004a6 : f10300e7;   % 1593:  %
000004a7 : 00000317;   % 1594: 	call Frame_changer %
000004a8 : 8f8300e7;   % 1594:  %
000004a9 : fe1ff06f;   % 1596: 	j loop_pkmn_select %
000004aa : 0fc35297;   % 1600: 	la t0,current_menu %
000004ab : c8c28293;   % 1600:  %
000004ac : 0002a503;   % 1601: 	lw a0,0(t0)	 %
000004ad : ffa50293;   % 1603: 	addi t0,a0,-6 %
000004ae : 00500fb3;   % 1604: 	mv t6,t0 %
000004af : 01400313;   % 1605: 	li t1,20 %
000004b0 : 026282b3;   % 1606: 	mul t0,t0,t1 %
000004b1 : 0fc35397;   % 1608: 	la t2,menu_state %
000004b2 : c7c38393;   % 1608:  %
000004b3 : 0003a023;   % 1609: 	sw zero,0(t2) %
000004b4 : 00412383;   % 1611: 	lw t2,4(sp) %
000004b5 : 005382b3;   % 1612: 	add t0,t2,t0 %
000004b6 : 0002a303;   % 1614: 	lw t1,0(t0) %
000004b7 : fa0344e3;   % 1616: 	blt t1,zero,loop_pkmn_select %
000004b8 : 0042a383;   % 1618: 	lw t2,4(t0) %
000004b9 : 0082ae03;   % 1619: 	lw t3,8(t0) %
000004ba : 00c2ae83;   % 1620: 	lw t4,12(t0) %
000004bb : 0102af03;   % 1621: 	lw t5,16(t0) %
000004bc : 0fc35297;   % 1623: 	la t0,current_player_pkmn %
000004bd : c5428293;   % 1623:  %
000004be : 0062a023;   % 1625: 	sw t1,0(t0) %
000004bf : 0072a223;   % 1626: 	sw t2,4(t0) %
000004c0 : 01c2a423;   % 1627: 	sw t3,8(t0) %
000004c1 : 01d2a623;   % 1628: 	sw t4,12(t0) %
000004c2 : 01e2a823;   % 1629: 	sw t5,16(t0) %
000004c3 : 01f2aa23;   % 1630: 	sw t6,20(t0)	 %
000004c4 : 00012083;   % 1632: lw ra,0(sp) %
000004c5 : 00810113;   % 1633: addi sp,sp,8	 %
000004c6 : 00008067;   % 1634: ret %
000004c7 : 00450513;   % 1641: addi a0,a0,4 %
000004c8 : 00000593;   % 1642: li a1,0 %
000004c9 : 00400613;   % 1643: li a2,4 %
000004ca : d0007553;   % 1645: fcvt.s.w fa0,zero %
000004cb : 00c58c63;   % 1648: beq a1,a2,end_CC %
000004cc : 00052587;   % 1650: flw fa1,0(a0) %
000004cd : 00b57553;   % 1651: fadd.s fa0,fa0,fa1 %
000004ce : 01450513;   % 1653: addi a0,a0,20 %
000004cf : 00158593;   % 1654: addi a1,a1,1 %
000004d0 : fedff06f;   % 1655: j loop_CC %
000004d1 : 06400593;   % 1658: li a1, 100 %
000004d2 : d005f5d3;   % 1659: fcvt.s.w fa1,a1 %
000004d3 : 18b57553;   % 1660: fdiv.s fa0,fa0,fa1 %
000004d4 : 0fc35297;   % 1662: la t0,constCP1 %
000004d5 : c3028293;   % 1662:  %
000004d6 : 0002a607;   % 1663: flw fa2,0(t0) %
000004d7 : 0fc35297;   % 1664: la t0,constCP2 %
000004d8 : c2828293;   % 1664:  %
000004d9 : 0002a687;   % 1665: flw fa3,0(t0) %
000004da : 10a67653;   % 1667: fmul.s fa2,fa2,fa0 %
000004db : 00d67653;   % 1668: fadd.s fa2,fa2,fa3 %
000004dc : 10c575d3;   % 1669: fmul.s fa1,fa0,fa2 %
000004dd : 00200513;   % 1671: li a0,2 %
000004de : 02b00893;   % 1672: li a7,43 %
000004df : 00000073;   % 1673: ecall %
000004e0 : a0b50553;   % 1675: fle.s a0,fa0,fa1 %
000004e1 : 00008067;   % 1677: ret %
000004e2 : 0420d073;   % 107: 	csrwi ucause,1		# caso ocorra dropdown vai gerar exce��o de instru��o inv�lida %
000004e3 : ff810113;   % 109: ExceptionHandling:	addi 	sp, sp, -8 	# salva 2 registradores utilizados para comparar ucause %
000004e4 : 00512023;   % 110: 	sw 	t0, 0(sp) %
000004e5 : 01a12223;   % 111: 	sw 	s10, 4(sp) %
000004e6 : 04202d73;   % 113: 	csrr	s10,ucause     # le o ucause e salva em s10 %
000004e7 : 00800293;   % 115: 	li 	t0, 8 %
000004e8 : 01a29a63;   % 116: 	bne 	t0, s10, errorExceptions  	# N�o � ecall - nem precisa arrumar a pilha! %
000004e9 : 00012283;   % 118: 	lw 	t0, 0(sp)			# � ecall %
000004ea : 00412d03;   % 119:     	lw 	s10, 4(sp)  			# recupera registradores usados %
000004eb : 00810113;   % 120:     	addi 	sp, sp, 8			 %
000004ec : 1e00006f;   % 121: 	j 	ecallException %
000004ed : 04302df3;   % 127: errorExceptions: csrr 	s11, utval      # le o utval da exce��o e salva em s11	 %
000004ee : 0c000513;   % 128: 	addi 	a0, zero, 0xc0 		## printa tela de azul %
000004ef : 00000593;   % 129: 	addi 	a1, zero, 0 %
000004f0 : 09400893;   % 130: 	addi 	a7, zero, 148 %
000004f1 : 2d8010ef;   % 131: 	jal 	clsCLS %
000004f2 : 00000293;   % 134: End_Cause0:	li 	t0, 0 %
000004f3 : 03a29263;   % 135: 		bne 	t0, s10, End_Cause1 %
000004f4 : 0fc37517;   % 136: 		la 	a0, Cause0 %
000004f5 : e1450513;   % 136:  %
000004f6 : 00000593;   % 137: 		li 	a1, 0 %
000004f7 : 00100613;   % 138: 		li 	a2, 1 %
000004f8 : 0000c6b7;   % 139: 		li 	a3, 0x0000c0ff %
000004f9 : 0ff68693;   % 139:  %
000004fa : 109000ef;   % 140: 		jal	printString %
000004fb : 16c0006f;   % 141: 		j	End_uepc %
000004fc : 00100293;   % 144: End_Cause1:	li 	t0, 1 %
000004fd : 03a29263;   % 145: 		bne 	t0, s10, End_Cause2 %
000004fe : 0fc37517;   % 146: 		la 	a0, Cause1 %
000004ff : e1550513;   % 146:  %
00000500 : 00000593;   % 147: 		li 	a1, 0 %
00000501 : 00100613;   % 148: 		li 	a2, 1 %
00000502 : 0000c6b7;   % 149: 		li 	a3, 0x0000c0ff %
00000503 : 0ff68693;   % 149:  %
00000504 : 0e1000ef;   % 150: 		jal 	printString	 %
00000505 : 1440006f;   % 151: 		j	End_uepc %
00000506 : 00200293;   % 154: End_Cause2:	li 	t0, 2 %
00000507 : 03a29663;   % 155: 		bne 	t0, s10, End_Cause4 %
00000508 : 0fc37517;   % 156: 		la 	a0, Cause2 %
00000509 : e1050513;   % 156:  %
0000050a : 00000593;   % 157: 		li 	a1, 0 %
0000050b : 00100613;   % 158: 		li 	a2, 1 %
0000050c : 0000c6b7;   % 159: 		li 	a3, 0x0000c0ff %
0000050d : 0ff68693;   % 159:  %
0000050e : 0b9000ef;   % 160: 		jal 	printString %
0000050f : 0fc37517;   % 162: 		la 	a0, Instr %
00000510 : eba50513;   % 162:  %
00000511 : 0e80006f;   % 163: 		j	End_utval %
00000512 : 00400293;   % 166: End_Cause4:	addi 	t0, zero, 4 %
00000513 : 03a29663;   % 167: 		bne	t0, s10, End_Cause5 %
00000514 : 0fc37517;   % 168: 		la 	a0, Cause4 %
00000515 : dfd50513;   % 168:  %
00000516 : 00000593;   % 169: 		li 	a1, 0 %
00000517 : 00100613;   % 170: 		li 	a2, 1 %
00000518 : 0000c6b7;   % 171: 		li 	a3, 0x0000c0ff %
00000519 : 0ff68693;   % 171:  %
0000051a : 089000ef;   % 172: 		jal	printString %
0000051b : 0fc37517;   % 174: 		la 	a0, Addrs %
0000051c : e8250513;   % 174:  %
0000051d : 0b80006f;   % 175: 		j	End_utval %
0000051e : 00500293;   % 178: End_Cause5:	li 	t0, 5 %
0000051f : 03a29663;   % 179: 		bne 	t0, s10, End_Cause6 %
00000520 : 0fc37517;   % 180: 		la 	a0, Cause5 %
00000521 : def50513;   % 180:  %
00000522 : 00000593;   % 181: 		li 	a1, 0 %
00000523 : 00100613;   % 182: 		li 	a2, 1 %
00000524 : 0000c6b7;   % 183: 		li 	a3, 0x0000c0ff %
00000525 : 0ff68693;   % 183:  %
00000526 : 059000ef;   % 184: 		jal 	printString	 %
00000527 : 0fc37517;   % 186: 		la 	a0, Addrs %
00000528 : e5250513;   % 186:  %
00000529 : 0880006f;   % 187: 		j	End_utval %
0000052a : 00600293;   % 190: End_Cause6:	li 	t0, 6 %
0000052b : 03a29663;   % 191: 		bne 	t0, s10, End_Cause7 %
0000052c : 0fc37517;   % 192: 		la 	a0, Cause6 %
0000052d : ddb50513;   % 192:  %
0000052e : 00000593;   % 193: 		li 	a1, 0 %
0000052f : 00100613;   % 194: 		li 	a2, 1 %
00000530 : 0000c6b7;   % 195: 		li 	a3, 0x0000c0ff %
00000531 : 0ff68693;   % 195:  %
00000532 : 029000ef;   % 196: 		jal 	printString %
00000533 : 0fc37517;   % 198: 		la 	a0, Addrs %
00000534 : e2250513;   % 198:  %
00000535 : 0580006f;   % 199: 		j	End_utval %
00000536 : 00700293;   % 202: End_Cause7:	li 	t0, 7 %
00000537 : 03a29663;   % 203: 		bne 	t0, s10, End_CauseD %
00000538 : 0fc37517;   % 204: 		la 	a0, Cause7 %
00000539 : dce50513;   % 204:  %
0000053a : 00000593;   % 205: 		li 	a1, 0 %
0000053b : 00100613;   % 206: 		li 	a2, 1 %
0000053c : 0000c6b7;   % 207: 		li 	a3, 0x0000c0ff %
0000053d : 0ff68693;   % 207:  %
0000053e : 7f8000ef;   % 208: 		jal 	printString %
0000053f : 0fc37517;   % 210: 		la 	a0, Addrs %
00000540 : df250513;   % 210:  %
00000541 : 0280006f;   % 211: 		j	End_utval %
00000542 : 0fc37517;   % 214: End_CauseD: 	la 	a0, CauseD %
00000543 : dc350513;   % 214:  %
00000544 : 00000593;   % 215: 		li 	a1, 0 %
00000545 : 00100613;   % 216: 		li 	a2, 1 %
00000546 : 0000c6b7;   % 217: 		li 	a3, 0x0000c0ff %
00000547 : 0ff68693;   % 217:  %
00000548 : 7d0000ef;   % 218: 		jal 	printString %
00000549 : 0fc37517;   % 220: 		la 	a0, Addrs %
0000054a : dca50513;   % 220:  %
0000054b : 00000593;   % 223: End_utval:	li 	a1, 0 %
0000054c : 01800613;   % 224: 		li 	a2, 24 %
0000054d : 0000c6b7;   % 225: 		li 	a3, 0x000c0ff %
0000054e : 0ff68693;   % 225:  %
0000054f : 7b4000ef;   % 226: 		jal	printString %
00000550 : 01b00533;   % 228: 		mv 	a0, s11 %
00000551 : 03800593;   % 229: 		li 	a1, 56 %
00000552 : 01800613;   % 230: 		li 	a2, 24 %
00000553 : 0000c6b7;   % 231: 		li 	a3, 0x0000c0ff %
00000554 : 0ff68693;   % 231:  %
00000555 : 728000ef;   % 232: 		jal 	printHex %
00000556 : 0fc37517;   % 235: End_uepc: 	la 	a0, PC 		# Imprime o pc em que a exce��o ocorreu %
00000557 : d9150513;   % 235:  %
00000558 : 00000593;   % 236: 		li 	a1, 0 %
00000559 : 00c00613;   % 237: 		li 	a2, 12 %
0000055a : 0000c6b7;   % 238: 		li 	a3, 0x000c0ff %
0000055b : 0ff68693;   % 238:  %
0000055c : 780000ef;   % 239: 		jal 	printString %
0000055d : 04102573;   % 241: 		csrr 	a0, uepc	# Le uepc	 %
0000055e : 01c00593;   % 242: 		li	a1, 28 %
0000055f : 00c00613;   % 243: 		li 	a2, 12 %
00000560 : 0000c6b7;   % 244: 		li 	a3, 0x0000c0ff %
00000561 : 0ff68693;   % 244:  %
00000562 : 6f4000ef;   % 245: 		jal 	printHex	 %
00000563 : 24c0006f;   % 247: 		j goToExit 		# encerra execu��o %
00000564 : ef810113;   % 254: ecallException:   addi    sp, sp, -264              # Salva todos os registradores na pilha %
00000565 : 00112023;   % 255:     sw     x1,    0(sp) %
00000566 : 00212223;   % 256:     sw     x2,    4(sp) %
00000567 : 00312423;   % 257:     sw     x3,    8(sp) %
00000568 : 00412623;   % 258:     sw     x4,   12(sp) %
00000569 : 00512823;   % 259:     sw     x5,   16(sp) %
0000056a : 00612a23;   % 260:     sw     x6,   20(sp) %
0000056b : 00712c23;   % 261:     sw     x7,   24(sp) %
0000056c : 00812e23;   % 262:     sw     x8,   28(sp) %
0000056d : 02912023;   % 263:     sw     x9,   32(sp) %
0000056e : 02a12223;   % 264:     sw     x10,  36(sp) %
0000056f : 02b12423;   % 265:     sw     x11,  40(sp) %
00000570 : 02c12623;   % 266:     sw     x12,  44(sp) %
00000571 : 02d12823;   % 267:     sw     x13,  48(sp) %
00000572 : 02e12a23;   % 268:     sw     x14,  52(sp) %
00000573 : 02f12c23;   % 269:     sw     x15,  56(sp) %
00000574 : 03012e23;   % 270:     sw     x16,  60(sp) %
00000575 : 05112023;   % 271:     sw     x17,  64(sp) %
00000576 : 05212223;   % 272:     sw     x18,  68(sp) %
00000577 : 05312423;   % 273:     sw     x19,  72(sp) %
00000578 : 05412623;   % 274:     sw     x20,  76(sp) %
00000579 : 05512823;   % 275:     sw     x21,  80(sp) %
0000057a : 05612a23;   % 276:     sw     x22,  84(sp) %
0000057b : 05712c23;   % 277:     sw     x23,  88(sp) %
0000057c : 05812e23;   % 278:     sw     x24,  92(sp) %
0000057d : 07912023;   % 279:     sw     x25,  96(sp) %
0000057e : 07a12223;   % 280:     sw     x26, 100(sp) %
0000057f : 07b12423;   % 281:     sw     x27, 104(sp) %
00000580 : 07c12623;   % 282:     sw     x28, 108(sp) %
00000581 : 07d12823;   % 283:     sw     x29, 112(sp) %
00000582 : 07e12a23;   % 284:     sw     x30, 116(sp) %
00000583 : 07f12c23;   % 285:     sw     x31, 120(sp) %
00000584 : 30102c73;   % 286: <22> csrr s8, misa %
00000585 : 020c7c13;   % 286: <23> andi s8, s8, 0x020 %
00000586 : 080c0263;   % 286: <24> beqz s8, ecallException.pula %
00000587 : 06012e27;   % 287:     fsw    f0,  124(sp) %
00000588 : 08112027;   % 288:     fsw    f1,  128(sp) %
00000589 : 08212227;   % 289:     fsw    f2,  132(sp) %
0000058a : 08312427;   % 290:     fsw    f3,  136(sp) %
0000058b : 08412627;   % 291:     fsw    f4,  140(sp) %
0000058c : 08512827;   % 292:     fsw    f5,  144(sp) %
0000058d : 08612a27;   % 293:     fsw    f6,  148(sp) %
0000058e : 08712c27;   % 294:     fsw    f7,  152(sp) %
0000058f : 08812e27;   % 295:     fsw    f8,  156(sp) %
00000590 : 0a912027;   % 296:     fsw    f9,  160(sp) %
00000591 : 0aa12227;   % 297:     fsw    f10, 164(sp) %
00000592 : 0ab12427;   % 298:     fsw    f11, 168(sp) %
00000593 : 0ac12627;   % 299:     fsw    f12, 172(sp) %
00000594 : 0ad12827;   % 300:     fsw    f13, 176(sp) %
00000595 : 0ae12a27;   % 301:     fsw    f14, 180(sp) %
00000596 : 0af12c27;   % 302:     fsw    f15, 184(sp) %
00000597 : 0b012e27;   % 303:     fsw    f16, 188(sp) %
00000598 : 0d112027;   % 304:     fsw    f17, 192(sp) %
00000599 : 0d212227;   % 305:     fsw    f18, 196(sp) %
0000059a : 0d312427;   % 306:     fsw    f19, 200(sp) %
0000059b : 0d412627;   % 307:     fsw    f20, 204(sp) %
0000059c : 0d512827;   % 308:     fsw    f21, 208(sp) %
0000059d : 0d612a27;   % 309:     fsw    f22, 212(sp) %
0000059e : 0d712c27;   % 310:     fsw    f23, 216(sp) %
0000059f : 0d812e27;   % 311:     fsw    f24, 220(sp) %
000005a0 : 0f912027;   % 312:     fsw    f25, 224(sp) %
000005a1 : 0fa12227;   % 313:     fsw    f26, 228(sp) %
000005a2 : 0fb12427;   % 314:     fsw    f27, 232(sp) %
000005a3 : 0fc12627;   % 315:     fsw    f28, 236(sp) %
000005a4 : 0fd12827;   % 316:     fsw    f29, 240(sp) %
000005a5 : 0fe12a27;   % 317:     fsw    f30, 244(sp) %
000005a6 : 0ff12c27;   % 318:     fsw    f31, 248(sp) %
000005a7 : 000002b3;   % 321:     add     t0, zero, zero %
000005a8 : 00000333;   % 322:     add     t1, zero, zero %
000005a9 : 000003b3;   % 323:     add     t2, zero, zero %
000005aa : 00000e33;   % 324:     add     t3, zero, zero %
000005ab : 00000eb3;   % 325:     add     t4, zero, zero %
000005ac : 00000f33;   % 326:     add     t5, zero, zero %
000005ad : 00000fb3;   % 327:     add     t6, zero, zero %
000005ae : 00a00293;   % 332:     addi    t0, zero, 10 %
000005af : 11128e63;   % 333:     beq     t0, a7, goToExit          # ecall exit %
000005b0 : 06e00293;   % 334:     addi    t0, zero, 110 %
000005b1 : 11128a63;   % 335:     beq     t0, a7, goToExit          # ecall exit %
000005b2 : 00100293;   % 337:     addi    t0, zero, 1               # ecall 1 = print int %
000005b3 : 13128263;   % 338:     beq     t0, a7, goToPrintInt %
000005b4 : 06500293;   % 339:     addi    t0, zero, 101             # ecall 1 = print int %
000005b5 : 11128e63;   % 340:     beq     t0, a7, goToPrintInt %
000005b6 : 00200293;   % 342:     addi    t0, zero, 2               # ecall 2 = print float %
000005b7 : 13128663;   % 343:     beq     t0, a7, goToPrintFloat %
000005b8 : 06600293;   % 344:     addi    t0, zero, 102             # ecall 2 = print float %
000005b9 : 13128263;   % 345:     beq     t0, a7, goToPrintFloat %
000005ba : 00400293;   % 347:     addi    t0, zero, 4               # ecall 4 = print string %
000005bb : 11128663;   % 348:     beq     t0, a7, goToPrintString %
000005bc : 06800293;   % 349:     addi    t0, zero, 104             # ecall 4 = print string %
000005bd : 11128263;   % 350:     beq     t0, a7, goToPrintString %
000005be : 00500293;   % 352:     addi    t0, zero, 5               # ecall 5 = read int %
000005bf : 13128463;   % 353:     beq     t0, a7, goToReadInt %
000005c0 : 06900293;   % 354:     addi    t0, zero, 105             # ecall 5 = read int %
000005c1 : 13128063;   % 355:     beq     t0, a7, goToReadInt %
000005c2 : 00600293;   % 357:     addi    t0, zero, 6               # ecall 6 = read float %
000005c3 : 13128463;   % 358:     beq     t0, a7, goToReadFloat %
000005c4 : 06a00293;   % 359:     addi    t0, zero, 106             # ecall 6 = read float %
000005c5 : 13128063;   % 360:     beq     t0, a7, goToReadFloat %
000005c6 : 00800293;   % 362:     addi    t0, zero, 8               # ecall 8 = read string %
000005c7 : 11128863;   % 363:     beq     t0, a7, goToReadString %
000005c8 : 06c00293;   % 364:     addi    t0, zero, 108             # ecall 8 = read string %
000005c9 : 11128463;   % 365:     beq     t0, a7, goToReadString %
000005ca : 00b00293;   % 367:     addi    t0, zero, 11              # ecall 11 = print char %
000005cb : 0d128a63;   % 368:     beq     t0, a7, goToPrintChar %
000005cc : 06f00293;   % 369:     addi    t0, zero, 111             # ecall 11 = print char %
000005cd : 0d128663;   % 370:     beq     t0, a7, goToPrintChar %
000005ce : 00c00293;   % 372:     addi    t0, zero, 12              # ecall 12 = read char %
000005cf : 0f128063;   % 373:     beq     t0, a7, goToReadChar %
000005d0 : 07000293;   % 374:     addi    t0, zero, 112             # ecall 12 = read char %
000005d1 : 0d128c63;   % 375:     beq     t0, a7, goToReadChar %
000005d2 : 01e00293;   % 377:     addi    t0, zero, 30              # ecall 30 = time %
000005d3 : 11128e63;   % 378:     beq     t0, a7, goToTime %
000005d4 : 08200293;   % 379:     addi    t0, zero, 130             # ecall 30 = time %
000005d5 : 11128a63;   % 380:     beq     t0, a7, goToTime %
000005d6 : 02000293;   % 382:     addi    t0, zero, 32              # ecall 32 = sleep %
000005d7 : 11128a63;   % 383:     beq     t0, a7, goToSleep %
000005d8 : 08400293;   % 384:     addi    t0, zero, 132             # ecall 32 = sleep %
000005d9 : 11128663;   % 385:     beq     t0, a7, goToSleep %
000005da : 02900293;   % 387:     addi    t0, zero, 41              # ecall 41 = random %
000005db : 11128663;   % 388:     beq     t0, a7, goToRandom %
000005dc : 08d00293;   % 389:     addi    t0, zero, 141             # ecall 41 = random %
000005dd : 11128263;   % 390:     beq     t0, a7, goToRandom %
000005de : 02200293;   % 392:     addi    t0, zero, 34       		# ecall 34 = print hex %
000005df : 0d128663;   % 393:     beq     t0, a7, goToPrintHex %
000005e0 : 08600293;   % 394:     addi    t0, zero, 134		# ecall 34 = print hex %
000005e1 : 0d128263;   % 395:     beq     t0, a7, goToPrintHex %
000005e2 : 01f00293;   % 397:     addi    t0, zero, 31              # ecall 31 = MIDI out %
000005e3 : 0d128663;   % 398:     beq     t0, a7, goToMidiOut       # Generate tone and return immediately %
000005e4 : 08300293;   % 399:     addi    t0, zero, 131             # ecall 31 = MIDI out %
000005e5 : 0d128263;   % 400:     beq     t0, a7, goToMidiOut %
000005e6 : 02100293;   % 402:     addi    t0, zero, 33              # ecall 33 = MIDI out synchronous %
000005e7 : 0d128263;   % 403:     beq     t0, a7, goToMidiOutSync   # Generate tone and return upon tone completion %
000005e8 : 08500293;   % 404:     addi    t0, zero, 133             # ecall 33 = MIDI out synchronous %
000005e9 : 0b128e63;   % 405:     beq     t0, a7, goToMidiOutSync %
000005ea : 03000293;   % 407:     addi    t0, zero, 48              # ecall 48 = CLS %
000005eb : 0d128a63;   % 408:     beq     t0, a7, goToCLS %
000005ec : 09400293;   % 409:     addi    t0, zero, 148              # ecall 48 = CLS %
000005ed : 0d128663;   % 410:     beq     t0, a7, goToCLS %
000005ee : 02f00293;   % 412:     addi    t0, zero, 47              # ecall 47 = DrawLine %
000005ef : 0d128663;   % 413:     beq     t0, a7, goToBRES %
000005f0 : 09300293;   % 414:     addi    t0, zero, 147              # ecall 47 = DrawLine %
000005f1 : 0d128263;   % 415:     beq     t0, a7, goToBRES     %
000005f2 : 02400293;   % 418:     addi    t0, zero, 36              # ecall 36 = PrintIntUnsigned %
000005f3 : 09128263;   % 419:     beq     t0, a7, goToPrintIntUnsigned %
000005f4 : 08800293;   % 420:     addi    t0, zero, 136             # ecall 36 = PrintIntUnsigned %
000005f5 : 07128e63;   % 421:     beq     t0, a7, goToPrintIntUnsigned %
000005f6 : 10008c37;   % 425: <9> li s8, 0x10008000	# carrega tp %
000005f7 : 000c0c13;   % 425:  %
000005f8 : 01819663;   % 425: <10> bne gp, s8, goToExitDE2	# Na DE1 gp = 0 ! N�o tem segmento .extern %
000005f9 : 00a00893;   % 426: 			li 	a7, 10			# chama o ecall normal do Rars %
000005fa : 00000073;   % 427: 			ecall				# exit ecall	 %
000005fb : 0000006f;   % 428: 	goToExitDE2:	j 	goToExitDE2		# trava o processador : N�o tem sistema operacional! %
000005fc : 210000ef;   % 430: 	goToPrintInt:	jal     printInt               	# chama printInt %
000005fd : 09c0006f;   % 431: 			j       endEcall %
000005fe : 4f8000ef;   % 433: 	goToPrintString: jal     printString           	# chama printString %
000005ff : 0940006f;   % 434: 			 j       endEcall %
00000600 : 538000ef;   % 436: 	goToPrintChar:	jal     printChar		# chama printChar %
00000601 : 08c0006f;   % 437: 			j       endEcall %
00000602 : 30102c73;   % 439: <22> csrr s8, misa %
00000603 : 020c7c13;   % 439: <23> andi s8, s8, 0x020 %
00000604 : 180c0663;   % 439: <24> beqz s8, NaoExisteEcall %
00000605 : 1a9000ef;   % 440: 			jal     printFloat		# chama printFloat %
00000606 : 0780006f;   % 441: 			j       endEcall %
00000607 : 658000ef;   % 443: 	goToReadChar:	jal     readChar              	# chama readChar %
00000608 : 0700006f;   % 444: 			j       endEcall %
00000609 : 780000ef;   % 446: 	goToReadInt:   	jal     readInt                 # chama readInt %
0000060a : 0680006f;   % 447: 			j       endEcall %
0000060b : 6e8000ef;   % 449: 	goToReadString:	jal     readString              # chama readString %
0000060c : 0600006f;   % 450: 			j       endEcall %
0000060d : 30102c73;   % 452: <22> csrr s8, misa %
0000060e : 020c7c13;   % 452: <23> andi s8, s8, 0x020 %
0000060f : 160c0063;   % 452: <24> beqz s8, NaoExisteEcall %
00000610 : 381000ef;   % 453: 			jal     readFloat               # chama readFloat %
00000611 : 04c0006f;   % 454: 			j       endEcall %
00000612 : 434000ef;   % 456: 	goToPrintHex:	jal     printHex                # chama printHex %
00000613 : 0440006f;   % 457: 			j       endEcall %
00000614 : 064010ef;   % 459: 	goToPrintIntUnsigned: 	jal	printIntUnsigned	# chama Print Unsigned Int %
00000615 : 03c0006f;   % 460: 				j	endEcall   %
00000616 : 05d000ef;   % 462: 	goToMidiOut:	jal     midiOut                 # chama MIDIout %
00000617 : 0340006f;   % 463: 			j       endEcall %
00000618 : 0cd000ef;   % 465: 	goToMidiOutSync: jal     midiOutSync   		# chama MIDIoutSync %
00000619 : 02c0006f;   % 466: 			 j       endEcall %
0000061a : 5bd000ef;   % 468: 	goToTime:	jal     Time                    # chama time %
0000061b : 0240006f;   % 469: 			j       endEcall %
0000061c : 5d9000ef;   % 471: 	goToSleep:	jal     Sleep                  	# chama sleep %
0000061d : 01c0006f;   % 472: 			j       endEcall %
0000061e : 5fd000ef;   % 474: 	goToRandom:	jal     Random                 	# chama random %
0000061f : 0140006f;   % 475: 			j       endEcall %
00000620 : 61d000ef;   % 477: 	goToCLS:	jal     clsCLS                 	# chama CLS %
00000621 : 00c0006f;   % 478: 			j       endEcall %
00000622 : 671000ef;   % 480: 	goToBRES:	jal     BRESENHAM               # chama BRESENHAM %
00000623 : 0040006f;   % 481: 			j       endEcall    	 %
00000624 : 00012083;   % 485: endEcall:  	lw	x1,   0(sp)  # recupera QUASE todos os registradores na pilha %
00000625 : 00412103;   % 486: 		lw	x2,   4(sp)	 %
00000626 : 00812183;   % 487: 		lw	x3,   8(sp)	 %
00000627 : 00c12203;   % 488: 		lw	x4,  12(sp)      	 %
00000628 : 01012283;   % 489: 		lw	x5,  16(sp)      	 %
00000629 : 01412303;   % 490: 		lw	x6,  20(sp)	 %
0000062a : 01812383;   % 491: 		lw	x7,  24(sp) %
0000062b : 01c12403;   % 492: 		lw	x8,  28(sp) %
0000062c : 02012483;   % 493: 		lw	x9,  32(sp) %
0000062d : 02c12603;   % 496: 		lw     x12, 44(sp) %
0000062e : 03012683;   % 497: 		lw     x13, 48(sp) %
0000062f : 03412703;   % 498: 		lw     x14, 52(sp) %
00000630 : 03812783;   % 499: 		lw     x15, 56(sp) %
00000631 : 03c12803;   % 500: 		lw     x16, 60(sp) %
00000632 : 04012883;   % 501: 		lw     x17, 64(sp) %
00000633 : 04412903;   % 502: 		lw     x18, 68(sp) %
00000634 : 04812983;   % 503: 		lw     x19, 72(sp) %
00000635 : 04c12a03;   % 504: 		lw     x20, 76(sp) %
00000636 : 05012a83;   % 505: 		lw     x21, 80(sp) %
00000637 : 05412b03;   % 506: 		lw     x22, 84(sp) %
00000638 : 05812b83;   % 507: 		lw     x23, 88(sp) %
00000639 : 05c12c03;   % 508: 		lw     x24, 92(sp) %
0000063a : 06012c83;   % 509: 		lw     x25, 96(sp) %
0000063b : 06412d03;   % 510: 		lw     x26, 100(sp) %
0000063c : 06812d83;   % 511: 		lw     x27, 104(sp) %
0000063d : 06c12e03;   % 512: 		lw     x28, 108(sp) %
0000063e : 07012e83;   % 513: 		lw     x29, 112(sp) %
0000063f : 07412f03;   % 514: 		lw     x30, 116(sp) %
00000640 : 07812f83;   % 515: 		lw     x31, 120(sp) %
00000641 : 30102c73;   % 516: <22> csrr s8, misa %
00000642 : 020c7c13;   % 516: <23> andi s8, s8, 0x020 %
00000643 : 060c0e63;   % 516: <24> beqz s8, endEcall.pula %
00000644 : 07c12007;   % 517: 		flw    f0,  124(sp) %
00000645 : 08012087;   % 518: 		flw    f1,  128(sp) %
00000646 : 08412107;   % 519: 		flw    f2,  132(sp) %
00000647 : 08812187;   % 520: 		flw    f3,  136(sp) %
00000648 : 08c12207;   % 521: 		flw    f4,  140(sp) %
00000649 : 09012287;   % 522: 		flw    f5,  144(sp) %
0000064a : 09412307;   % 523: 		flw    f6,  148(sp) %
0000064b : 09812387;   % 524: 		flw    f7,  152(sp) %
0000064c : 09c12407;   % 525: 		flw    f8,  156(sp) %
0000064d : 0a012487;   % 526: 		flw    f9,  160(sp) %
0000064e : 0ac12607;   % 529: 		flw    f12, 172(sp) %
0000064f : 0b012687;   % 530: 		flw    f13, 176(sp) %
00000650 : 0b412707;   % 531: 		flw    f14, 180(sp) %
00000651 : 0b812787;   % 532: 		flw    f15, 184(sp) %
00000652 : 0bc12807;   % 533: 		flw    f16, 188(sp) %
00000653 : 0c012887;   % 534: 		flw    f17, 192(sp) %
00000654 : 0c412907;   % 535: 		flw    f18, 196(sp) %
00000655 : 0c812987;   % 536: 		flw    f19, 200(sp) %
00000656 : 0cc12a07;   % 537: 		flw    f20, 204(sp) %
00000657 : 0d012a87;   % 538: 		flw    f21, 208(sp) %
00000658 : 0d412b07;   % 539: 		flw    f22, 212(sp) %
00000659 : 0d812b87;   % 540: 		flw    f23, 216(sp) %
0000065a : 0dc12c07;   % 541: 		flw    f24, 220(sp) %
0000065b : 0e012c87;   % 542: 		flw    f25, 224(sp) %
0000065c : 0e412d07;   % 543: 		flw    f26, 228(sp) %
0000065d : 0e812d87;   % 544: 		flw    f27, 232(sp) %
0000065e : 0ec12e07;   % 545: 		flw    f28, 236(sp) %
0000065f : 0f012e87;   % 546: 		flw    f29, 240(sp) %
00000660 : 0f412f07;   % 547: 		flw    f30, 244(sp) %
00000661 : 0f812f87;   % 548: 		flw    f31, 248(sp) %
00000662 : 10810113;   % 550: endEcall.pula:	addi    sp, sp, 264 %
00000663 : 04102273;   % 552: 		csrr 	tp, uepc 	# le o valor de EPC salvo no registrador uepc (reg 65) %
00000664 : 00420213;   % 553: 		addi 	tp, tp, 4	# soma 4 para obter a instrucao seguinte ao ecall %
00000665 : 04121073;   % 554: 		csrw 	tp, uepc	# coloca no registrador uepc %
00000666 : 00200073;   % 555: 		uret			# retorna PC=uepc %
00000667 : 0c000513;   % 563: NaoExisteEcall: addi 	a0, zero, 0xc0 		## printa tela de azul %
00000668 : 00000593;   % 564: 		addi 	a1, zero, 0 %
00000669 : 01100833;   % 565: 		mv 	a6, a7 %
0000066a : 09400893;   % 566: 		addi 	a7, zero, 148 %
0000066b : 4f1000ef;   % 567: 		jal 	clsCLS %
0000066c : 0fc37517;   % 568:   		la 	a0, CauseE %
0000066d : 92b50513;   % 568:  %
0000066e : 00000593;   % 569: 		li 	a1, 0 %
0000066f : 00100613;   % 570: 		li 	a2, 1 %
00000670 : 0000c6b7;   % 571: 		li 	a3, 0x0000c0ff %
00000671 : 0ff68693;   % 571:  %
00000672 : 328000ef;   % 572: 		jal 	printString %
00000673 : 01000533;   % 573: 		mv 	a0, a6 %
00000674 : 06800593;   % 574: 		li 	a1, 104 %
00000675 : 00100613;   % 575: 		li 	a2, 1 %
00000676 : 0000c6b7;   % 576: 		li 	a3, 0x0000c0ff %
00000677 : 0ff68693;   % 576:  %
00000678 : 020000ef;   % 577: 		jal 	printInt %
00000679 : 04102573;   % 578: 		csrr	a0,uepc %
0000067a : 08800593;   % 579: 		li 	a1, 136 %
0000067b : 00100613;   % 580: 		li 	a2, 1 %
0000067c : 0000c6b7;   % 581: 		li 	a3, 0x0000c0ff %
0000067d : 0ff68693;   % 581:  %
0000067e : 284000ef;   % 582: 		jal 	printHex		 %
0000067f : dddff06f;   % 583: 		j 	goToExit %
00000680 : ffc10113;   % 595: printInt:	addi 	sp, sp, -4			# Aloca espaco %
00000681 : 00112023;   % 596: 		sw 	ra, 0(sp)			# salva ra %
00000682 : 0fc36297;   % 597: 		la 	t0, TempBuffer			# carrega o Endereco do Buffer da String %
00000683 : 59428293;   % 597:  %
00000684 : 00055a63;   % 599: 		bge 	a0, zero, ehposprintInt		# Se eh positvo %
00000685 : 02d00313;   % 600: 		li 	t1, '-'				# carrega o sinal - %
00000686 : 00628023;   % 601: 		sb 	t1, 0(t0)			# coloca no buffer %
00000687 : 00128293;   % 602: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
00000688 : 40a00533;   % 603: 		sub 	a0, zero, a0			# torna o numero positivo %
00000689 : 00a00393;   % 605: ehposprintInt:  li 	t2, 10				# carrega numero 10 %
0000068a : 00000313;   % 606: 		li 	t1, 0				# carrega numero de digitos com 0 %
0000068b : 30102c73;   % 608: <29> csrr s8, misa %
0000068c : 00cc5c13;   % 608: <30> srli s8, s8, 12 %
0000068d : 001c7c13;   % 608: <31> andi s8, s8, 0x001 %
0000068e : 1e0c1863;   % 608: <32> bnez s8, printInt.pula1 %
0000068f : ff410113;   % 609: <99> addi 	sp,sp,-12 %
00000690 : 00a12023;   % 609: <100> sw	a0,0(sp) %
00000691 : 00b12223;   % 609: <101> sw	a1,4(sp) %
00000692 : 00c12423;   % 609: <102> sw	a2,8(sp) %
00000693 : 00a00633;   % 609: <103> mv 	a2,a0 %
00000694 : 41f65593;   % 609: <104> srai 	a1,a2,31 %
00000695 : 00c00533;   % 609: <105> mv 	a0,a2 %
00000696 : 00058463;   % 609: <106> beqz 	a1,div10.pula1_M31 %
00000697 : 40c00533;   % 609: <107> neg 	a0,a2 %
00000698 : ff010113;   % 609: <65> addi 	sp, sp, -16 %
00000699 : 00a12023;   % 609: <66> sw	a0, 0(sp) %
0000069a : 00e12223;   % 609: <67> sw	a4, 4(sp) %
0000069b : 00f12423;   % 609: <68> sw	a5, 8(sp) %
0000069c : 00112623;   % 609: <69> sw	ra, 12(sp) %
0000069d : 00a00533;   % 609: <70> mv 	a0, a0 %
0000069e : 00155713;   % 609: <71> srli    a4,a0,1 %
0000069f : 00255793;   % 609: <72> srli    a5,a0,2 %
000006a0 : 00f707b3;   % 609: <73> add     a5,a4,a5 %
000006a1 : 0047d713;   % 609: <74> srli    a4,a5,4 %
000006a2 : 00f70733;   % 609: <75> add     a4,a4,a5 %
000006a3 : 00875793;   % 609: <76> srli    a5,a4,8 %
000006a4 : 00e78733;   % 609: <77> add     a4,a5,a4 %
000006a5 : 01075793;   % 609: <78> srli    a5,a4,16 %
000006a6 : 00e787b3;   % 609: <79> add     a5,a5,a4 %
000006a7 : 0037d793;   % 609: <80> srli    a5,a5,3 %
000006a8 : 00279713;   % 609: <81> slli    a4,a5,2 %
000006a9 : 00f70733;   % 609: <82> add     a4,a4,a5 %
000006aa : 00171713;   % 609: <83> slli    a4,a4,1 %
000006ab : 40e50533;   % 609: <84> sub     a0,a0,a4 %
000006ac : 00a53513;   % 609: <85> sltiu   a0,a0,10 %
000006ad : 00154513;   % 609: <86> xori    a0,a0,1 %
000006ae : 00f50533;   % 609: <87> add     a0,a0,a5 %
000006af : 04051073;   % 609: <88> csrw	a0,uscratch %
000006b0 : 00012503;   % 609: <89> lw	a0, 0(sp) %
000006b1 : 00412703;   % 609: <90> lw	a4, 4(sp) %
000006b2 : 00812783;   % 609: <91> lw	a5, 8(sp) %
000006b3 : 00c12083;   % 609: <92> lw	ra, 12(sp) %
000006b4 : 01010113;   % 609: <93> addi 	sp, sp, 16 %
000006b5 : 04002ef3;   % 609: <94> csrr	t4,uscratch %
000006b6 : 00058463;   % 609: <109> beqz 	a1,div10.pula2_M31 %
000006b7 : 41d00eb3;   % 609: <110> neg 	t4,t4 %
000006b8 : 040e9073;   % 609: <111> div10.pula2_M31:	csrw	t4,uscratch %
000006b9 : 00012503;   % 609: <112> lw	a0,0(sp) %
000006ba : 00412583;   % 609: <113> lw 	a1,4(sp) %
000006bb : 00812603;   % 609: <114> lw	a2,8(sp) %
000006bc : 00c10113;   % 609: <115> addi 	sp,sp,12 %
000006bd : 04002ef3;   % 609: <116> csrr	t4,uscratch %
000006be : ff010113;   % 610: <145> addi 	sp,sp,-16 %
000006bf : 00a12023;   % 610: <146> sw	a0,0(sp) %
000006c0 : 00b12223;   % 610: <147> sw	a1,4(sp) %
000006c1 : 00c12423;   % 610: <148> sw	a2,8(sp) %
000006c2 : 00d12623;   % 610: <149> sw	a3,12(sp) %
000006c3 : 00a006b3;   % 610: <151> mv 	a3,a0 %
000006c4 : 00a00613;   % 610: <152> li 	a2,10 %
000006c5 : ff410113;   % 610: <99> addi 	sp,sp,-12 %
000006c6 : 00a12023;   % 610: <100> sw	a0,0(sp) %
000006c7 : 00b12223;   % 610: <101> sw	a1,4(sp) %
000006c8 : 00c12423;   % 610: <102> sw	a2,8(sp) %
000006c9 : 00d00633;   % 610: <103> mv 	a2,a3 %
000006ca : 41f65593;   % 610: <104> srai 	a1,a2,31 %
000006cb : 00c00533;   % 610: <105> mv 	a0,a2 %
000006cc : 00058463;   % 610: <106> beqz 	a1,div10.pula1_M34 %
000006cd : 40c00533;   % 610: <107> neg 	a0,a2 %
000006ce : ff010113;   % 610: <65> addi 	sp, sp, -16 %
000006cf : 00a12023;   % 610: <66> sw	a0, 0(sp) %
000006d0 : 00e12223;   % 610: <67> sw	a4, 4(sp) %
000006d1 : 00f12423;   % 610: <68> sw	a5, 8(sp) %
000006d2 : 00112623;   % 610: <69> sw	ra, 12(sp) %
000006d3 : 00a00533;   % 610: <70> mv 	a0, a0 %
000006d4 : 00155713;   % 610: <71> srli    a4,a0,1 %
000006d5 : 00255793;   % 610: <72> srli    a5,a0,2 %
000006d6 : 00f707b3;   % 610: <73> add     a5,a4,a5 %
000006d7 : 0047d713;   % 610: <74> srli    a4,a5,4 %
000006d8 : 00f70733;   % 610: <75> add     a4,a4,a5 %
000006d9 : 00875793;   % 610: <76> srli    a5,a4,8 %
000006da : 00e78733;   % 610: <77> add     a4,a5,a4 %
000006db : 01075793;   % 610: <78> srli    a5,a4,16 %
000006dc : 00e787b3;   % 610: <79> add     a5,a5,a4 %
000006dd : 0037d793;   % 610: <80> srli    a5,a5,3 %
000006de : 00279713;   % 610: <81> slli    a4,a5,2 %
000006df : 00f70733;   % 610: <82> add     a4,a4,a5 %
000006e0 : 00171713;   % 610: <83> slli    a4,a4,1 %
000006e1 : 40e50533;   % 610: <84> sub     a0,a0,a4 %
000006e2 : 00a53513;   % 610: <85> sltiu   a0,a0,10 %
000006e3 : 00154513;   % 610: <86> xori    a0,a0,1 %
000006e4 : 00f50533;   % 610: <87> add     a0,a0,a5 %
000006e5 : 04051073;   % 610: <88> csrw	a0,uscratch %
000006e6 : 00012503;   % 610: <89> lw	a0, 0(sp) %
000006e7 : 00412703;   % 610: <90> lw	a4, 4(sp) %
000006e8 : 00812783;   % 610: <91> lw	a5, 8(sp) %
000006e9 : 00c12083;   % 610: <92> lw	ra, 12(sp) %
000006ea : 01010113;   % 610: <93> addi 	sp, sp, 16 %
000006eb : 04002573;   % 610: <94> csrr	a0,uscratch %
000006ec : 00058463;   % 610: <109> beqz 	a1,div10.pula2_M34 %
000006ed : 40a00533;   % 610: <110> neg 	a0,a0 %
000006ee : 04051073;   % 610: <111> div10.pula2_M34:	csrw	a0,uscratch %
000006ef : 00012503;   % 610: <112> lw	a0,0(sp) %
000006f0 : 00412583;   % 610: <113> lw 	a1,4(sp) %
000006f1 : 00812603;   % 610: <114> lw	a2,8(sp) %
000006f2 : 00c10113;   % 610: <115> addi 	sp,sp,12 %
000006f3 : 04002573;   % 610: <116> csrr	a0,uscratch %
000006f4 : ff410113;   % 610: <45> addi 	sp, sp, -12 %
000006f5 : 00a12023;   % 610: <46> sw	a0, 0(sp) %
000006f6 : 00b12223;   % 610: <47> sw	a1, 4(sp) %
000006f7 : 00112423;   % 610: <48> sw	ra, 8(sp) %
000006f8 : 00a00533;   % 610: <50> mv 	a0, a0 %
000006f9 : 00c005b3;   % 610: <51> mv 	a1, a2 %
000006fa : 6ad000ef;   % 610: <52> jal 	__mulsi3 %
000006fb : 04051073;   % 610: <53> csrw	a0,uscratch %
000006fc : 00012503;   % 610: <55> lw	a0, 0(sp) %
000006fd : 00412583;   % 610: <56> lw	a1, 4(sp) %
000006fe : 00812083;   % 610: <57> lw	ra, 8(sp) %
000006ff : 00c10113;   % 610: <58> addi 	sp, sp, 12 %
00000700 : 040025f3;   % 610: <59> csrr	a1,uscratch %
00000701 : 40b68e33;   % 610: <155> sub 	t3,a3,a1 %
00000702 : 040e1073;   % 610: <157> csrw	t3,uscratch %
00000703 : 00012503;   % 610: <158> lw	a0,0(sp) %
00000704 : 00412583;   % 610: <159> lw 	a1,4(sp) %
00000705 : 00812603;   % 610: <160> lw	a2,8(sp) %
00000706 : 00c12683;   % 610: <161> lw 	a3,12(sp) %
00000707 : 01010113;   % 610: <162> addi 	sp,sp,16 %
00000708 : 04002e73;   % 610: <163> csrr	t3,uscratch %
00000709 : 00c0006f;   % 611: 		j 	printInt.pula1d %
0000070a : 02754eb3;   % 612: printInt.pula1:	div 	t4, a0, t2			# divide por 10 (quociente) %
0000070b : 02756e33;   % 613: 		rem 	t3, a0, t2			# resto %
0000070c : ffc10113;   % 614: printInt.pula1d:addi 	sp, sp, -4			# aloca espaco na pilha %
0000070d : 01c12023;   % 615: 		sw 	t3, 0(sp)			# coloca resto na pilha %
0000070e : 01d00533;   % 616: 		mv 	a0, t4				# atualiza o numero com o quociente %
0000070f : 00130313;   % 617: 		addi 	t1, t1, 1			# incrementa o contador de digitos %
00000710 : de0516e3;   % 618: 		bne 	a0, zero, loop1printInt		# verifica se o numero eh zero %
00000711 : 00012383;   % 620: loop2printInt:	lw 	t2, 0(sp)			# le digito da pilha %
00000712 : 00410113;   % 621: 		addi 	sp, sp, 4			# libera espaco %
00000713 : 03038393;   % 622: 		addi 	t2, t2, 48			# converte o digito para ascii %
00000714 : 00728023;   % 623: 		sb 	t2, 0(t0)			# coloca caractere no buffer %
00000715 : 00128293;   % 624: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
00000716 : fff30313;   % 625: 		addi 	t1, t1, -1			# decrementa contador de digitos %
00000717 : fe0314e3;   % 626: 		bne 	t1, zero, loop2printInt		# eh o ultimo? %
00000718 : 00028023;   % 627: 		sb 	zero, 0(t0)			# insere \NULL na string %
00000719 : 0fc36517;   % 629: 		la 	a0, TempBuffer			# Endereco do buffer da srting %
0000071a : 33850513;   % 629:  %
0000071b : 084000ef;   % 630: 		jal 	printString			# chama o print string %
0000071c : 00012083;   % 632: 		lw 	ra, 0(sp)			# recupera a %
0000071d : 00410113;   % 633: 		addi 	sp, sp, 4			# libera espaco %
0000071e : 00008067;   % 634: fimprintInt:	ret					# retorna %
0000071f : ffc10113;   % 646: printHex:	addi    sp, sp, -4    		# aloca espaco %
00000720 : 00112023;   % 647:     		sw      ra, 0(sp)		# salva ra %
00000721 : 00a002b3;   % 648: 		mv 	t0, a0			# Inteiro de 32 bits a ser impresso em Hexa %
00000722 : 0fc36317;   % 649: 		la 	t1, TabelaHexASCII	# endereco da tabela HEX->ASCII %
00000723 : 51430313;   % 649:  %
00000724 : 0fc36397;   % 650: 		la 	t2, TempBuffer		# onde a string sera montada %
00000725 : 30c38393;   % 650:  %
00000726 : 03000e13;   % 652: 		li 	t3,'0'			# Caractere '0' %
00000727 : 01c38023;   % 653: 		sb 	t3,0(t2)		# Escreve '0' no Buffer da String %
00000728 : 07800e13;   % 654: 		li 	t3,'x'			# Caractere 'x' %
00000729 : 01c380a3;   % 655: 		sb 	t3,1(t2)		# Escreve 'x' no Buffer da String %
0000072a : 00238393;   % 656: 		addi 	t2,t2,2			# novo endereco inicial da string %
0000072b : 01c00e13;   % 658: 		li 	t3, 28			# contador de nibble   inicio = 28 %
0000072c : 020e4263;   % 659: loopprintHex:	blt 	t3, zero, fimloopprintHex	# terminou? t3<0? %
0000072d : 01c2deb3;   % 660: 		srl 	t4, t0, t3		# desloca o nibble para direita %
0000072e : 00fefe93;   % 661: 		andi 	t4, t4, 0x000F		# mascara o nibble	 %
0000072f : 01d30eb3;   % 662: 		add 	t4, t1, t4		# endereco do ascii do nibble %
00000730 : 000e8e83;   % 663: 		lb 	t4, 0(t4)		# le ascii do nibble %
00000731 : 01d38023;   % 664: 		sb 	t4, 0(t2)		# armazena o ascii do nibble no buffer da string %
00000732 : 00138393;   % 665: 		addi 	t2, t2, 1		# incrementa o endereco do buffer %
00000733 : ffce0e13;   % 666: 		addi 	t3, t3, -4		# decrementa o numero do nibble %
00000734 : fe1ff06f;   % 667: 		j 	loopprintHex %
00000735 : 00038023;   % 669: fimloopprintHex: sb 	zero,0(t2)		# grava \null na string %
00000736 : 0fc36517;   % 670: 		la 	a0, TempBuffer		# Argumento do print String %
00000737 : 2c450513;   % 670:  %
00000738 : 010000ef;   % 671:     		jal	printString		# Chama o print string %
00000739 : 00012083;   % 673: 		lw 	ra, 0(sp)		# recupera ra %
0000073a : 00410113;   % 674: 		addi 	sp, sp, 4		# libera espaco %
0000073b : 00008067;   % 675: fimprintHex:	ret				# retorna %
0000073c : ff810113;   % 686: printString:	addi	sp, sp, -8			# aloca espaco %
0000073d : 00112023;   % 687:     		sw	ra, 0(sp)			# salva ra %
0000073e : 00812223;   % 688:     		sw	s0, 4(sp)			# salva s0 %
0000073f : 00a00433;   % 689:     		mv	s0, a0              		# s0 = endereco do caractere na string %
00000740 : 00040503;   % 691: loopprintString:lb	a0, 0(s0)                 	# le em a0 o caracter a ser impresso %
00000741 : 02050263;   % 693:     		beq     a0, zero, fimloopprintString	# string ASCIIZ termina com NULL %
00000742 : 030000ef;   % 695:     		jal     printChar       		# imprime char %
00000743 : 00858593;   % 697: 		addi    a1, a1, 8                 	# incrementa a coluna %
00000744 : 13900f93;   % 698: 		li 	t6, 313		 %
00000745 : 01f5c663;   % 699: 		blt	a1, t6, NaoPulaLinha	    	# se ainda tiver lugar na linha %
00000746 : 00860613;   % 700:     		addi    a2, a2, 8                 	# incrementa a linha %
00000747 : 000005b3;   % 701:     		mv    	a1, zero			# volta a coluna zero %
00000748 : 00140413;   % 703: NaoPulaLinha:	addi    s0, s0, 1			# proximo caractere %
00000749 : fddff06f;   % 704:     		j       loopprintString       		# volta ao loop %
0000074a : 00012083;   % 706: fimloopprintString:	lw      ra, 0(sp)    		# recupera ra %
0000074b : 00012403;   % 707: 			lw 	s0, 0(sp)		# recupera s0 original %
0000074c : 00810113;   % 708:     			addi    sp, sp, 8		# libera espaco %
0000074d : 00008067;   % 709: fimprintString:	ret      	    			# retorna %
0000074e : 0ff00e93;   % 731: printChar:	li 	t4, 0xFF	# t4 temporario %
0000074f : 008e9e93;   % 732: 		slli 	t4, t4, 8	# t4 = 0x0000FF00 (no RARS, nao podemos fazer diretamente "andi rd, rs1, 0xFF00") %
00000750 : 01d6ff33;   % 733: 		and    	t5, a3, t4   	# t5 obtem cor de fundo %
00000751 : 008f5f13;   % 734:     		srli	t5, t5, 8	# numero da cor de fundo %
00000752 : 0ff6ff93;   % 735: 		andi   	t6, a3, 0xFF    # t6 obtem cor de frente %
00000753 : 02000213;   % 737: 		li 	tp, ' ' %
00000754 : 00454863;   % 738: 		blt 	a0, tp, printChar.NAOIMPRIMIVEL	# ascii menor que 32 nao eh imprimivel %
00000755 : 07e00213;   % 739: 		li 	tp, '~' %
00000756 : 00a24463;   % 740: 		bgt	a0, tp, printChar.NAOIMPRIMIVEL	# ascii Maior que 126  nao eh imprimivel %
00000757 : 0080006f;   % 741:     		j       printChar.IMPRIMIVEL %
00000758 : 02000513;   % 743: printChar.NAOIMPRIMIVEL: li      a0, 32		# Imprime espaco %
00000759 : 14000213;   % 745: printChar.IMPRIMIVEL:	li	tp, 320		# Num colunas 320 %
0000075a : 30102c73;   % 746: <29> csrr s8, misa %
0000075b : 00cc5c13;   % 746: <30> srli s8, s8, 12 %
0000075c : 001c7c13;   % 746: <31> andi s8, s8, 0x001 %
0000075d : 020c1e63;   % 746: <32> bnez s8, printChar.mul1 %
0000075e : ff410113;   % 747: <45> addi 	sp, sp, -12 %
0000075f : 00a12023;   % 747: <46> sw	a0, 0(sp) %
00000760 : 00b12223;   % 747: <47> sw	a1, 4(sp) %
00000761 : 00112423;   % 747: <48> sw	ra, 8(sp) %
00000762 : 00400533;   % 747: <50> mv 	a0, tp %
00000763 : 00c005b3;   % 747: <51> mv 	a1, a2 %
00000764 : 505000ef;   % 747: <52> jal 	__mulsi3 %
00000765 : 04051073;   % 747: <53> csrw	a0,uscratch %
00000766 : 00012503;   % 747: <55> lw	a0, 0(sp) %
00000767 : 00412583;   % 747: <56> lw	a1, 4(sp) %
00000768 : 00812083;   % 747: <57> lw	ra, 8(sp) %
00000769 : 00c10113;   % 747: <58> addi 	sp, sp, 12 %
0000076a : 04002ef3;   % 747: <59> csrr	t4,uscratch %
0000076b : 0080006f;   % 748: 			j printChar.mul1d %
0000076c : 02c20eb3;   % 749: printChar.mul1:		mul     t4, tp, a2			# multiplica a2x320  t4 = coordenada y %
0000076d : 00be8eb3;   % 750: printChar.mul1d:	add     t4, t4, a1               	# t4 = 320*y + x %
0000076e : 007e8e93;   % 751: 			addi    t4, t4, 7                 	# t4 = 320*y + (x+7) %
0000076f : ff000237;   % 752: 			li      tp, 0xFF000000          	# Endereco de inicio da memoria VGA0 %
00000770 : 00020213;   % 752:  %
00000771 : 00070663;   % 753: 			beq 	a4, zero, printChar.PULAFRAME		# Verifica qual o frame a ser usado em a4 %
00000772 : ff100237;   % 754: 			li      tp, 0xFF100000          	# Endereco de inicio da memoria VGA1 %
00000773 : 00020213;   % 754:  %
00000774 : 004e8eb3;   % 755: printChar.PULAFRAME:	add     t4, t4, tp               	# t4 = endereco de impressao do ultimo pixel da primeira linha do char %
00000775 : fe050393;   % 756: 			addi    t2, a0, -32               	# indice do char na memoria %
00000776 : 00339393;   % 757: 			slli    t2, t2, 3                 	# offset em bytes em relacao ao endereco inicial %
00000777 : 0fc36e17;   % 758: 			la      t3, LabelTabChar		# endereco dos caracteres na memoria %
00000778 : d9ce0e13;   % 758:  %
00000779 : 01c383b3;   % 759: 			add     t2, t2, t3               	# endereco do caractere na memoria %
0000077a : 0003ae03;   % 760: 			lw      t3, 0(t2)                 	# carrega a primeira word do char %
0000077b : 00400293;   % 761: 			li 	t0, 4				# i=4 %
0000077c : 02028e63;   % 763: printChar.forChar1I:	beq     t0, zero, printChar.endForChar1I # if(i == 0) end for i %
0000077d : 00800313;   % 764:     			addi    t1, zero, 8               	# j = 8 %
0000077e : 02030463;   % 766: printChar.forChar1J:	beq     t1, zero, printChar.endForChar1J # if(j == 0) end for j %
0000077f : 001e7c93;   % 767:         		andi    s9, t3, 0x001			# primeiro bit do caracter %
00000780 : 001e5e13;   % 768:         		srli    t3, t3, 1             		# retira o primeiro bit %
00000781 : 000c8663;   % 769:         		beq     s9, zero, printChar.printCharPixelbg1	# pixel eh fundo? %
00000782 : 01fe8023;   % 770:         		sb      t6, 0(t4)             		# imprime pixel com cor de frente %
00000783 : 0080006f;   % 771:         		j       printChar.endCharPixel1 %
00000784 : 01ee8023;   % 772: printChar.printCharPixelbg1:	sb      t5, 0(t4)                # imprime pixel com cor de fundo %
00000785 : fff30313;   % 773: printChar.endCharPixel1: addi    t1, t1, -1                	# j-- %
00000786 : fffe8e93;   % 774:     			addi    t4, t4, -1                	# t4 aponta um pixel para a esquerda %
00000787 : fddff06f;   % 775:     			j       printChar.forChar1J		# vollta novo pixel %
00000788 : fff28293;   % 777: printChar.endForChar1J: addi    t0, t0, -1 		# i-- %
00000789 : 148e8e93;   % 778:     			addi    t4, t4, 328           	# 2**12 + 8 %
0000078a : fc9ff06f;   % 779:     			j       printChar.forChar1I	# volta ao loop %
0000078b : 0043ae03;   % 781: printChar.endForChar1I:	lw      t3, 4(t2)           	# carrega a segunda word do char %
0000078c : 00400293;   % 782: 			li 	t0, 4			# i = 4 %
0000078d : 02028e63;   % 783: printChar.forChar2I:    beq     t0, zero, printChar.endForChar2I  # if(i == 0) end for i %
0000078e : 00800313;   % 784:     			addi    t1, zero, 8             # j = 8 %
0000078f : 02030463;   % 786: printChar.forChar2J:	beq	t1, zero, printChar.endForChar2J # if(j == 0) end for j %
00000790 : 001e7c93;   % 787:         		andi    s9, t3, 0x001	    		# pixel a ser impresso %
00000791 : 001e5e13;   % 788:         		srli    t3, t3, 1                 	# desloca para o proximo %
00000792 : 000c8663;   % 789:         		beq     s9, zero, printChar.printCharPixelbg2 # pixel eh fundo? %
00000793 : 01fe8023;   % 790:         		sb      t6, 0(t4)			# imprime cor frente %
00000794 : 0080006f;   % 791:         		j       printChar.endCharPixel2		# volta ao loop %
00000795 : 01ee8023;   % 793: printChar.printCharPixelbg2:	sb      t5, 0(t4)		# imprime cor de fundo %
00000796 : fff30313;   % 795: printChar.endCharPixel2:	addi    t1, t1, -1		# j-- %
00000797 : fffe8e93;   % 796:     				addi    t4, t4, -1              # t4 aponta um pixel para a esquerda %
00000798 : fddff06f;   % 797:     				j       printChar.forChar2J %
00000799 : fff28293;   % 799: printChar.endForChar2J:	addi	t0, t0, -1 		# i-- %
0000079a : 148e8e93;   % 800:     			addi    t4, t4, 328		# %
0000079b : fc9ff06f;   % 801:     			j       printChar.forChar2I	# volta ao loop %
0000079c : 00008067;   % 803: printChar.endForChar2I:	ret				# retorna %
0000079d : 00000013;   % 812: readChar: 		nop %
0000079e : ff2002b7;   % 816: readCharKDMMIO:		li 	t0, 0xFF200000			# Execucao com Polling do KD MMIO %
0000079f : 00028293;   % 816:  %
000007a0 : 0002a503;   % 818: loopReadCharKDMMIO:  	lw     	a0, 0(t0)   			# le o bit de flag do teclado %
000007a1 : 00157513;   % 819: 			andi 	a0, a0, 0x0001			# mascara bit 0 %
000007a2 : fe050ce3;   % 820: 			beqz    a0, loopReadCharKDMMIO  	# testa se uma tecla foi pressionada %
000007a3 : 0042a503;   % 821:    			lw 	a0, 4(t0)			# le o ascii da tecla pressionada %
000007a4 : 0800006f;   % 822: 			j fimreadChar				# fim Read Char %
000007a5 : ff2002b7;   % 829: readCharDE2:  	li      t0, 0xFF200100 			# Endereco buffer0 %
000007a6 : 10028293;   % 829:  %
000007a7 : 0002a303;   % 830:     		lw     	t1, 0(t0)				# conteudo inicial do buffer %
000007a8 : 0002a383;   % 832: loopReadChar:  	lw     	t2, 0(t0)   				# le buffer teclado %
000007a9 : 00639663;   % 833: 		bne     t2, t1, buffermodificadoChar    	# testa se o buffer foi modificado %
000007aa : 00700333;   % 835: atualizaBufferChar:  mv t1, t2			# atualiza o buffer com o novo valor %
000007ab : ff5ff06f;   % 836:     		j       loopReadChar		# loop de principal de leitura  %
000007ac : 0ff00f13;   % 838: buffermodificadoChar:	li t5, 0xFF %
000007ad : 008f1f13;   % 839: 	slli 	t5, t5, 8			# t5 = 0x0000FF00 %
000007ae : 01e3fe33;   % 840: 	and    	t3, t2, t5 			# mascara o 2o scancode %
000007af : 0000f237;   % 841: 	li 	tp, 0x0000F000 %
000007b0 : 00020213;   % 841:  %
000007b1 : 024e0063;   % 842: 	beq     t3, tp, teclasoltaChar		# eh 0xF0 no 2o scancode? tecla foi solta %
000007b2 : 0ff00213;   % 843: 	li	tp, 0x000000FF %
000007b3 : 0043fe33;   % 844: 	and	t3, t2, tp			# mascara 1o scancode	(essa podemos fazer diretamente) %
000007b4 : 01200213;   % 845: 	li	tp, 0x00000012 %
000007b5 : fc4e1ae3;   % 846:     	bne 	t3, tp, atualizaBufferChar	# nao eh o SHIFT que esta pressionado ? volta a ler  %
000007b6 : 0fc36417;   % 847: 	la      s0, LabelScanCodeShift		# se for SHIFT que esta pressionado atualiza o endereco da tabel %
000007b7 : 03e40413;   % 847:  %
000007b8 : fc9ff06f;   % 848:     	j       atualizaBufferChar		# volta a ler %
000007b9 : 0ff3fe13;   % 850: teclasoltaChar:		andi t3, t2, 0x00FF		# mascara o 1o scancode %
000007ba : 08000213;   % 851: 	li	tp, 0x00000080 %
000007bb : fbc24ee3;   % 852:   	bgt	t3, tp, atualizaBufferChar		# se o scancode for > 0x80 entao nao eh imprimivel! %
000007bc : 01200213;   % 853:   	li	tp, 0x00000012 %
000007bd : 004e1863;   % 854: 	bne 	t3, tp, naoehshiftChar			# nao foi o shift que foi solto? entao processa %
000007be : 0fc36417;   % 855: 	la 	s0, LabelScanCode			# shift foi solto atualiza o endereco da tabela %
000007bf : f9840413;   % 855:  %
000007c0 : fa9ff06f;   % 856: 	j 	atualizaBufferChar			# volta a ler %
000007c1 : 01c40e33;   % 858: naoehshiftChar:	   	add     t3, s0, t3              # endereco na tabela de scancode da tecla com ou sem shift %
000007c2 : 000e0503;   % 859:     	lb      a0, 0(t3)				# le o ascii do caracter para a0 %
000007c3 : f8050ee3;   % 860:     	beq     a0, zero, atualizaBufferChar		# se for caractere nao imprimivel volta a ler %
000007c4 : 00008067;   % 862: fimreadChar: 	ret			# retorna %
000007c5 : ff810113;   % 874: readString: 	addi 	sp, sp, -8			# reserva espaco na pilha %
000007c6 : 00812223;   % 875: 		sw 	s0, 4(sp)			# salva s0 %
000007c7 : 00112023;   % 876: 		sw 	ra, 0(sp)			# salva ra %
000007c8 : 00000693;   % 877: 		li 	a3, 0				# zera o contador de caracteres digitados %
000007c9 : 00a00933;   % 878: 		mv 	s2, a0				# salva o endereco inicial %
000007ca : 0fc36417;   % 879:     		la      s0, LabelScanCode      		# Endereco da tabela de scancode inicial para readChar %
000007cb : f6840413;   % 879:  %
000007cc : 04d58c63;   % 881: loopreadString: beq 	a1, a3, fimreadString   	# buffer cheio fim %
000007cd : ff810113;   % 883: 		addi 	sp, sp, -8 %
000007ce : 00112023;   % 884: 		sw 	ra, 0(sp)			# salva ra %
000007cf : 00a12223;   % 885: 		sw 	a0, 4(sp)			# salva a0 pois ele sera reescrito em readChar %
000007d0 : f35ff0ef;   % 886: 		jal 	readChar			# le um caracter do teclado (retorno em a0) %
000007d1 : 00a00fb3;   % 887: 		mv 	t6, a0				# t6 eh a letra lida em readChar %
000007d2 : 00012083;   % 888: 		lw 	ra, 0(sp) %
000007d3 : 00412503;   % 889: 		lw 	a0, 4(sp) %
000007d4 : 00810113;   % 890: 		addi 	sp, sp, 8 %
000007d5 : 00800213;   % 892: 		li 	tp, 0x08			 %
000007d6 : 004f9c63;   % 893: 		bne	t6, tp, PulaBackSpace		# Se nao for BACKSPACE %
000007d7 : fcd00ae3;   % 894: 		beq	zero, a3, loopreadString	# Se n�o tem nenhum caractere no buffer apenas volta a ler %
000007d8 : fff68693;   % 895: 		addi	a3, a3, -1			# diminui contador %
000007d9 : fff50513;   % 896: 		addi 	a0, a0, -1			# diminui endereco do buffer %
000007da : 00050023;   % 897: 		sb 	zero, 0(a0)			# coloca zero no caractere anterior %
000007db : fc5ff06f;   % 898: 		j loopreadString %
000007dc : 00a00213;   % 900: PulaBackSpace:	li	tp, 0x0A %
000007dd : 004f8a63;   % 901: 		beq 	t6, tp, fimreadString		# se for tecla ENTER fim %
000007de : 01f50023;   % 902: 		sb 	t6, 0(a0)			# grava no buffer %
000007df : 00168693;   % 903: 		addi 	a3, a3, 1			# incrementa contador %
000007e0 : 00150513;   % 904: 		addi 	a0, a0, 1			# incrementa endereco no buffer %
000007e1 : fadff06f;   % 905: 		j loopreadString			# volta a ler outro caractere %
000007e2 : 00050023;   % 907: fimreadString: 	sb 	zero, 0(a0)			# grava NULL no buffer %
000007e3 : fff50613;   % 908: 		addi 	a2, a0, -1			# Para que a2 tenha o endereco do ultimo caractere digitado %
000007e4 : 01200533;   % 909: 		mv	a0, s2				# a0 volta a ter o endereco inicial da string %
000007e5 : 00012083;   % 910: 		lw 	ra, 0(sp)			# recupera ra %
000007e6 : 00412403;   % 911: 		lw	s0, 4(sp)			# recupera s0 %
000007e7 : 00810113;   % 912: 		addi 	sp, sp, 8			# libera espaco %
000007e8 : 00008067;   % 913: 		ret					# retorna %
000007e9 : ffc10113;   % 922: readInt: 	addi 	sp,sp,-4		# reserva espaco na pilha %
000007ea : 00112023;   % 923: 	sw 	ra, 0(sp)			# salva ra %
000007eb : 0fc36517;   % 924: 	la 	a0, TempBuffer			# Endereco do buffer de string %
000007ec : ff050513;   % 924:  %
000007ed : 00a00593;   % 925: 	li 	a1, 10				# numero maximo de digitos %
000007ee : f5dff0ef;   % 926: 	jal 	readString			# le uma string de ate 10 digitos, a3 numero de digitos %
000007ef : 00c002b3;   % 927: 	mv 	t0, a2				# copia endereco do ultimo digito %
000007f0 : 00a00393;   % 928: 	li 	t2, 10				# dez %
000007f1 : 00100e13;   % 929: 	li 	t3, 1				# dezenas, centenas, etc %
000007f2 : 00000533;   % 930: 	mv 	a0, zero			# zera o numero %
000007f3 : 0c068e63;   % 932: loopReadInt: 	beq	a3,zero, fimReadInt	# Leu todos os digitos %
000007f4 : 00028303;   % 933: 	lb 	t1, (t0)			# le um digito %
000007f5 : 02d00213;   % 934: 	li	tp, 0x0000002D %
000007f6 : 0c430663;   % 935: 	beq 	t1, tp, ehnegReadInt		# = '-' %
000007f7 : 02b00213;   % 936: 	li	tp, 0x0000002B %
000007f8 : 0c430463;   % 937: 	beq 	t1, tp, ehposReadInt		# = '+' %
000007f9 : 03000213;   % 938: 	li	tp, 0x00000030 %
000007fa : 0a434c63;   % 939: 	blt 	t1, tp, naoehReadInt		# <'0' %
000007fb : 03900213;   % 940: 	li	tp, 0x00000039 %
000007fc : 0a624863;   % 941: 	bgt 	t1, tp, naoehReadInt		# >'9' %
000007fd : fd030313;   % 942: 	addi 	t1, t1, -48			# transforma ascii em numero %
000007fe : 30102c73;   % 943: <29> csrr s8, misa %
000007ff : 00cc5c13;   % 943: <30> srli s8, s8, 12 %
00000800 : 001c7c13;   % 943: <31> andi s8, s8, 0x001 %
00000801 : 020c1e63;   % 943: <32> bnez s8, readInt.mul1 %
00000802 : ff410113;   % 944: <45> addi 	sp, sp, -12 %
00000803 : 00a12023;   % 944: <46> sw	a0, 0(sp) %
00000804 : 00b12223;   % 944: <47> sw	a1, 4(sp) %
00000805 : 00112423;   % 944: <48> sw	ra, 8(sp) %
00000806 : 00600533;   % 944: <50> mv 	a0, t1 %
00000807 : 01c005b3;   % 944: <51> mv 	a1, t3 %
00000808 : 275000ef;   % 944: <52> jal 	__mulsi3 %
00000809 : 04051073;   % 944: <53> csrw	a0,uscratch %
0000080a : 00012503;   % 944: <55> lw	a0, 0(sp) %
0000080b : 00412583;   % 944: <56> lw	a1, 4(sp) %
0000080c : 00812083;   % 944: <57> lw	ra, 8(sp) %
0000080d : 00c10113;   % 944: <58> addi 	sp, sp, 12 %
0000080e : 04002373;   % 944: <59> csrr	t1,uscratch %
0000080f : 0080006f;   % 945: 	j readInt.mul1d %
00000810 : 03c30333;   % 946: readInt.mul1: 	mul 	t1, t1, t3			# multiplica por dezenas/centenas %
00000811 : 00650533;   % 947: readInt.mul1d:	add 	a0, a0, t1			# soma no numero %
00000812 : 30102c73;   % 948: <29> csrr s8, misa %
00000813 : 00cc5c13;   % 948: <30> srli s8, s8, 12 %
00000814 : 001c7c13;   % 948: <31> andi s8, s8, 0x001 %
00000815 : 020c1e63;   % 948: <32> bnez s8, readInt.mul2 %
00000816 : ff410113;   % 949: <45> addi 	sp, sp, -12 %
00000817 : 00a12023;   % 949: <46> sw	a0, 0(sp) %
00000818 : 00b12223;   % 949: <47> sw	a1, 4(sp) %
00000819 : 00112423;   % 949: <48> sw	ra, 8(sp) %
0000081a : 01c00533;   % 949: <50> mv 	a0, t3 %
0000081b : 007005b3;   % 949: <51> mv 	a1, t2 %
0000081c : 225000ef;   % 949: <52> jal 	__mulsi3 %
0000081d : 04051073;   % 949: <53> csrw	a0,uscratch %
0000081e : 00012503;   % 949: <55> lw	a0, 0(sp) %
0000081f : 00412583;   % 949: <56> lw	a1, 4(sp) %
00000820 : 00812083;   % 949: <57> lw	ra, 8(sp) %
00000821 : 00c10113;   % 949: <58> addi 	sp, sp, 12 %
00000822 : 04002e73;   % 949: <59> csrr	t3,uscratch %
00000823 : 0080006f;   % 950: 	j readInt.mul2d %
00000824 : 027e0e33;   % 951: readInt.mul2: 	mul 	t3, t3, t2			# proxima dezena/centena %
00000825 : fff28293;   % 952: readInt.mul2d:	addi 	t0, t0, -1			# busca o digito anterior %
00000826 : fff68693;   % 953: 	addi	a3, a3, -1			# reduz o contador de digitos  %
00000827 : f31ff06f;   % 954: 	j 	loopReadInt			# volta para buscar proximo digito %
00000828 : 0080006f;   % 957: 		j fimReadInt			# como nao esta implmentado apenas retorna %
00000829 : 40a00533;   % 959: ehnegReadInt:	sub a0,zero,a0			# se for negativo %
0000082a : 00012083;   % 963: fimReadInt:	lw 	ra, 0(sp)		# recupera ra %
0000082b : 00410113;   % 964: 		addi 	sp, sp, 4		# libera espaco %
0000082c : 00008067;   % 965: 		ret				# fim ReadInt %
0000082d : 10008c37;   % 985: <9> li s8, 0x10008000	# carrega tp %
0000082e : 000c0c13;   % 985:  %
0000082f : 01819863;   % 985: <10> bne gp, s8, midiOutDE2	# Na DE1 gp = 0 ! N�o tem segmento .extern %
00000830 : 01f00893;   % 987: 	li a7,31		# Chama o ecall normal %
00000831 : 00000073;   % 988: 	ecall %
00000832 : 0600006f;   % 989: 	j fimmidiOut %
00000833 : ff2002b7;   % 991: midiOutDE2:	li      t0, 0xFF200178 %
00000834 : 17828293;   % 991:  %
00000835 : 00000333;   % 992:     		add     t1, zero, zero %
00000836 : 00f67393;   % 997:    	 	andi    t2, a2, 0x0000000F %
00000837 : 01b39393;   % 998:     		slli    t2, t2, 27 %
00000838 : 00736333;   % 999:     		or      t1, t1, t2 %
00000839 : 07f6f393;   % 1002:     		andi    t2, a3, 0x0000007F %
0000083a : 01439393;   % 1003:     		slli    t2, t2, 20 %
0000083b : 00736333;   % 1004:     		or      t1, t1, t2 %
0000083c : 07f57393;   % 1007:     		andi    t2, a0, 0x0000007F %
0000083d : 00d39393;   % 1008:     		slli    t2, t2, 13 %
0000083e : 00736333;   % 1009:     		or      t1, t1, t2 %
0000083f : 1ff00e93;   % 1012: 		li 	t4, 0x1FF %
00000840 : 004e9e93;   % 1013: 		slli 	t4, t4, 4 %
00000841 : 00fe8e93;   % 1014: 		addi 	t4, t4, 0x00F			# t4 = 0x00001FFF %
00000842 : 01d5f3b3;   % 1015:     		and    	t2, a1, t4 %
00000843 : 00736333;   % 1016:     		or      t1, t1, t2 %
00000844 : 0040006f;   % 1019:     		j       SintMidOut %
00000845 : 0062a023;   % 1021: SintMidOut:	sw	t1, 0(t0) %
00000846 : ff2003b7;   % 1024: 	    		li      t2, 0xFF20017C %
00000847 : 17c38393;   % 1024:  %
00000848 : 0003ae03;   % 1025: Check_AUD_DACLRCK:     	lw      t3, 0(t2) %
00000849 : fe0e0ee3;   % 1026:     			beq     t3, zero, Check_AUD_DACLRCK %
0000084a : 00008067;   % 1028: fimmidiOut:    		ret %
0000084b : 10008c37;   % 1046: <9> li s8, 0x10008000	# carrega tp %
0000084c : 000c0c13;   % 1046:  %
0000084d : 01819863;   % 1046: <10> bne gp, s8, midiOutSyncDE2	# Na DE1 gp = 0 ! N�o tem segmento .extern %
0000084e : 02100893;   % 1048: 	li a7,33		# Chama o ecall normal %
0000084f : 00000073;   % 1049: 	ecall %
00000850 : 0780006f;   % 1050: 	j fimmidiOutSync %
00000851 : ff2002b7;   % 1052: midiOutSyncDE2:	li      t0, 0xFF200178 %
00000852 : 17828293;   % 1052:  %
00000853 : 00000333;   % 1053:     		add     t1, zero, zero %
00000854 : 08000337;   % 1056:     		lui    	t1, 0x08000 %
00000855 : 00431313;   % 1057: 		slli	t1,t1,4 %
00000856 : 00f67393;   % 1060:     		andi    t2, a2, 0x00F %
00000857 : 01b39393;   % 1061:     		slli    t2, t2, 27 %
00000858 : 00736333;   % 1062:     		or      t1, t1, t2 %
00000859 : 07f6f393;   % 1065:     		andi    t2, a3, 0x07F %
0000085a : 01439393;   % 1066:     		slli    t2, t2, 20 %
0000085b : 00736333;   % 1067:     		or      t1, t1, t2 %
0000085c : 07f57393;   % 1070:     		andi    t2, a0, 0x07F %
0000085d : 00d39393;   % 1071:     		slli    t2, t2, 13 %
0000085e : 00736333;   % 1072:     		or      t1, t1, t2 %
0000085f : 1ff00e93;   % 1075: 		li 	t4, 0x1FF %
00000860 : 004e9e93;   % 1076: 		slli 	t4, t4, 4 %
00000861 : 00fe8e93;   % 1077: 		addi 	t4, t4, 0x00F			# t4 = 0x00001FFF %
00000862 : 01d5f3b3;   % 1078:     		and    	t2, a1, t4 %
00000863 : 00736333;   % 1079:     		or      t1, t1, t2 %
00000864 : 0040006f;   % 1082:     		j       SintMidOutSync %
00000865 : 0062a023;   % 1084: SintMidOutSync:	sw	t1, 0(t0) %
00000866 : ff2003b7;   % 1087:     		li      t2, 0xFF20017C %
00000867 : 17c38393;   % 1087:  %
00000868 : ff200eb7;   % 1088:     		li      t4, 0xFF200180 %
00000869 : 180e8e93;   % 1088:  %
0000086a : 0003ae03;   % 1090: Check_AUD_DACLRCKSync:	lw      t3, 0(t2) %
0000086b : fe0e0ee3;   % 1091:     			beq     t3, zero, Check_AUD_DACLRCKSync %
0000086c : 000eaf03;   % 1093: Melody:     	lw      t5, 0(t4) %
0000086d : fe0f1ee3;   % 1094:     		bne     t5, zero, Melody %
0000086e : 00008067;   % 1096: fimmidiOutSync:	ret %
0000086f : ffc10113;   % 1106: printFloat:	addi 	sp, sp, -4 %
00000870 : 00112023;   % 1107: 		sw 	ra, 0(sp)				# salva ra %
00000871 : 0fc36417;   % 1108: 		la 	s0, TempBuffer %
00000872 : dd840413;   % 1108:  %
00000873 : 02b00293;   % 1111: 		li 	t0, '+'			# define sinal '+' %
00000874 : e00504d3;   % 1112: 		fmv.x.s s1, fa0			# recupera o numero float sem conversao %
00000875 : 01f4d493;   % 1113: 		srli	s1, s1, 31		# bit 31(sinal) em bit 0, numero eh negativo s1=1 %
00000876 : 00048463;   % 1114: 		beq 	s1, zero, ehposprintFloat	# eh positivo s1=0 %
00000877 : 02d00293;   % 1115: 		li 	t0, '-'				# define sinal '-' %
00000878 : 00540023;   % 1116: ehposprintFloat: sb 	t0, 0(s0)			# coloca sinal no buffer %
00000879 : 00140413;   % 1117: 		addi 	s0, s0, 1			# incrementa o endereco do buffer %
0000087a : e00502d3;   % 1120: 		 fmv.x.s t0, fa0			# recupera o numero float sem conversao %
0000087b : 7f800337;   % 1121: 		 lui	t1, 0x7F800 %
0000087c : 0062f2b3;   % 1122: 		 and 	t0, t0, t1   			# mascara com 0111 1111 1000 0000 0000 0000... %
0000087d : 00129293;   % 1123: 		 slli 	t0, t0, 1			# tira o sinal do numero %
0000087e : 0182d293;   % 1124: 		 srli 	t0, t0, 24			# recupera o expoente %
0000087f : e0050353;   % 1127: 		fmv.x.s t1, fa0				# recupera o numero float sem conversao %
00000880 : 008003b7;   % 1128: 		li 	t2, 0x007FFFFF			# t2 = 0x007FFFFF %
00000881 : fff38393;   % 1128:  %
00000882 : 00737333;   % 1129: 		and 	t1, t1, t2			# mascara com 0000 0000 0111 1111 1111... 		  %
00000883 : 14028c63;   % 1131: 		beq 	t0, zero, ehExp0printFloat	# Expoente = 0 %
00000884 : 0ff00213;   % 1132: 		li	tp, 0x000000FF			# TP = 255 %
00000885 : 16428c63;   % 1133: 		beq 	t0, tp, ehExp255printFloat	# Expoente = 255 %
00000886 : 20a52053;   % 1137: 		fabs.s 		ft0, fa0		# ft0 recebe o modulo  de x %
00000887 : 00100213;   % 1138: 		li		tp, 1 %
00000888 : d00270d3;   % 1139: 		fcvt.s.w 	ft1, tp			# ft1 recebe o numero 1.0 %
00000889 : 00a00213;   % 1140: 		li		tp, 10 %
0000088a : d0027353;   % 1141: 		fcvt.s.w 	ft6, tp			# ft6 recebe o numero 10.0 %
0000088b : 00200213;   % 1142: 		li		tp, 2 %
0000088c : d0027e53;   % 1143: 		fcvt.s.w 	ft8, tp %
0000088d : 19c0f3d3;   % 1144: 		fdiv.s		ft7, ft1, ft8		# ft7 recebe o numero 0.5 %
0000088e : a0101ed3;   % 1146: 		flt.s 	t4, ft0, ft1		# ft0 < 1.0 ? Se sim, E deve ser negativo %
0000088f : 000e9663;   % 1147: 		bnez	t4, menor1printFloat	# se a comparacao deu true (1), pula %
00000890 : 20630153;   % 1148: 		fmv.s 	ft2, ft6		# ft2  fator de multiplicacao = 10 %
00000891 : 02c0006f;   % 1149: 		j 	cont2printFloat		# vai para expoente positivo %
00000892 : 1860f153;   % 1150: menor1printFloat: fdiv.s ft2,ft1,ft6		# ft2 fator multiplicativo = 0.1 %
00000893 : 20000253;   % 1153: cont1printFloat: 	fmv.s 	ft4, ft0			# inicia com o numero x  %
00000894 : 201081d3;   % 1154: 		 	fmv.s 	ft3, ft1			# contador comeca em 1 %
00000895 : 18227253;   % 1155: loop1printFloat: 	fdiv.s 	ft4, ft4, ft2			# divide o numero pelo fator multiplicativo %
00000896 : a0120e53;   % 1156: 		 	fle.s 	t3, ft4, ft1			# o numero eh > que 1? entao fim %
00000897 : 000e0663;   % 1157: 		 	beq 	t3,zero, fimloop1printFloat %
00000898 : 0011f1d3;   % 1158: 		 	fadd.s 	ft3, ft3, ft1			# incrementa o contador %
00000899 : ff1ff06f;   % 1159: 		 	j 	loop1printFloat			# volta ao loop %
0000089a : 18227253;   % 1161: fimloop1printFloat: 	fdiv.s 	ft4, ft4, ft2			# ajusta o numero %
0000089b : 0200006f;   % 1162: 		 	j 	intprintFloat			# vai para imprimir a parte inteira %
0000089c : 20000253;   % 1165: cont2printFloat:	fmv.s 	 ft4, ft0			# inicia com o numero x  %
0000089d : d00071d3;   % 1166: 		 	fcvt.s.w ft3, zero			# contador comeca em 0 %
0000089e : a0621e53;   % 1167: loop2printFloat:  	flt.s 	 t3, ft4, ft6			# resultado eh < que 10? entao fim %
0000089f : 18227253;   % 1168: 			fdiv.s 	 ft4, ft4, ft2			# divide o numero pelo fator multiplicativo %
000008a0 : 000e1663;   % 1169: 			bne 	 t3, zero, intprintFloat %
000008a1 : 0011f1d3;   % 1170: 		 	fadd.s 	 ft3, ft3, ft1			# incrementa o contador %
000008a2 : ff1ff06f;   % 1171: 		 	j 	 loop2printFloat %
000008a3 : 10227253;   % 1177: intprintFloat:		fmul.s 		ft4, ft4, ft2		# ajusta o numero %
000008a4 : 08727253;   % 1178: 			fsub.s		ft4, ft4, ft7		# tira 0.5, dessa forma sempre ao converter estaremos fazendo floor %
000008a5 : c00272d3;   % 1179: 		  	fcvt.w.s	t0, ft4			# coloca floor de ft4 em t0 %
000008a6 : 00727253;   % 1180: 			fadd.s		ft4, ft4, ft7		# readiciona 0.5 %
000008a7 : 00029463;   % 1181: 			bnez		t0, pulaeh1print	# para corrigir multiplos inteiros de 10! %
000008a8 : 00100293;   % 1182: 			li 		t0, 1 %
000008a9 : 03028293;   % 1183: pulaeh1print:		addi 		t0, t0, 48		# converte para ascii			 %
000008aa : 00540023;   % 1184: 			sb 		t0, 0(s0)		# coloca no buffer %
000008ab : 00140413;   % 1185: 		  	addi 		s0, s0, 1		# incrementta o buffer %
000008ac : 02e00293;   % 1188: 		  	li 	t0, '.'				# carrega o '.' %
000008ad : 00540023;   % 1189: 		  	sb 	t0, 0(s0)			# coloca no buffer %
000008ae : 00140413;   % 1190: 		  	addi 	s0, s0, 1			# incrementa o buffer %
000008af : 00800313;   % 1193: 		  	li 		t1, 8				# contador de digitos  -  8 casas decimais %
000008b0 : 04030a63;   % 1194: loopfracprintFloat:  	beq 		t1, zero, fimfracprintFloat	# fim dos digitos? %
000008b1 : 08727253;   % 1195: 			fsub.s		ft4, ft4, ft7			# tira 0.5 %
000008b2 : c0027f53;   % 1196: 			fcvt.w.s 	t5, ft4				# floor de ft4 %
000008b3 : 00727253;   % 1197: 			fadd.s		ft4, ft4, ft7			# readiciona 0.5 %
000008b4 : d00f72d3;   % 1198: 			fcvt.s.w	ft5, t5				# reconverte em float so com a parte inteira %
000008b5 : 085272d3;   % 1199: 		  	fsub.s 		ft5, ft4, ft5			# parte fracionaria %
000008b6 : 1062f2d3;   % 1200: 		  	fmul.s 		ft5, ft5, ft6			# mult x 10 %
000008b7 : 0872f2d3;   % 1201: 			fsub.s		ft5, ft5, ft7			# tira 0.5 %
000008b8 : c002f2d3;   % 1202: 			fcvt.w.s	t0, ft5				# coloca floor de ft5 em 10 %
000008b9 : 03028293;   % 1203: 		  	addi 		t0, t0, 48			# converte para ascii %
000008ba : 03000213;   % 1205: 			li 		tp, 48 %
000008bb : 0042c663;   % 1206: 			blt		t0, tp, pulaprtFloat1	# testa se eh menor que '0' %
000008bc : 03900213;   % 1207: 			li		tp, 57 %
000008bd : 00525463;   % 1208: 			ble		t0, tp, pulaprtFloat2	# testa se eh menor ou igual que '9' %
000008be : 03000293;   % 1209: pulaprtFloat1:		li		t0, 48			# define como '0'		  			  	 %
000008bf : 00540023;   % 1211: pulaprtFloat2:	  	sb 		t0, 0(s0)			# coloca no buffer %
000008c0 : 00140413;   % 1212: 		  	addi 		s0, s0, 1			# incrementa endereco %
000008c1 : fff30313;   % 1213: 		  	addi 		t1, t1, -1			# decrementa contador %
000008c2 : 0072f2d3;   % 1214: 			fadd.s		ft5, ft5, ft7			# reincrementa 0.5 %
000008c3 : 20528253;   % 1215: 		  	fmv.s 		ft4, ft5			# coloca o numero em ft4 %
000008c4 : fb1ff06f;   % 1216: 		  	j 		loopfracprintFloat		# volta ao loop %
000008c5 : 04500293;   % 1219: fimfracprintFloat: 	li 	t0,'E'			# carrega 'E' %
000008c6 : 00540023;   % 1220: 			sb 	t0, 0(s0)		# coloca no buffer %
000008c7 : 00140413;   % 1221: 			addi 	s0, s0, 1		# incrementa endereco %
000008c8 : 02b00293;   % 1224: 		  	li 	t0, '+'				# carrega '+' %
000008c9 : 000e8463;   % 1225: 		  	beqz 	t4, expposprintFloat		# nao eh negativo? %
000008ca : 02d00293;   % 1226: 		  	li 	t0, '-'				# carrega '-' %
000008cb : 00540023;   % 1227: expposprintFloat: 	sb 	t0, 0(s0)			# coloca no buffer %
000008cc : 00140413;   % 1228: 		  	addi 	s0, s0, 1			#incrementa endereco %
000008cd : 00a00313;   % 1231: 			li 	t1, 10				# carrega 10	 %
000008ce : c001f253;   % 1232: 			fcvt.w.s  tp, ft3			# passa ft3 para t0 %
000008cf : 026242b3;   % 1233: 			div 	t0, tp, t1			# divide por 10 (dezena) %
000008d0 : 026263b3;   % 1234: 			rem	t2, tp, t1			# t0 = quociente, t2 = resto %
000008d1 : 03028293;   % 1235: 			addi 	t0, t0, 48			# converte para ascii %
000008d2 : 00540023;   % 1236: 			sb 	t0, 0(s0)			# coloca no buffer %
000008d3 : 03038393;   % 1237: 			addi 	t2, t2, 48			# converte para ascii %
000008d4 : 007400a3;   % 1238: 			sb 	t2, 1(s0)			# coloca no buffer %
000008d5 : 00040123;   % 1239: 			sb 	zero, 2(s0)			# insere \NULL da string %
000008d6 : 0fc36517;   % 1240: 			la 	a0, TempBuffer			# endereco do Buffer										 %
000008d7 : c4450513;   % 1240:  %
000008d8 : 0500006f;   % 1241: 	  		j 	fimprintFloat			# imprime a string %
000008d9 : 00030e63;   % 1243: ehExp0printFloat: 	beq 	t1, zero, eh0printFloat		# Verifica se eh zero %
000008da : 0fc36517;   % 1245: ehDesnormprintFloat: 	la 	a0, NumDesnormP			# string numero desnormalizado positivo %
000008db : e4750513;   % 1245:  %
000008dc : 04048063;   % 1246: 			beq 	s1, zero, fimprintFloat		# o sinal eh 1? entao eh negativo %
000008dd : 0fc36517;   % 1247: 		 	la 	a0, NumDesnormN			# string numero desnormalizado negativo %
000008de : e4450513;   % 1247:  %
000008df : 0340006f;   % 1248: 			j 	fimprintFloat			# imprime a string %
000008e0 : 0fc36517;   % 1250: eh0printFloat:		la 	a0, NumZero			# string do zero %
000008e1 : e4150513;   % 1250:  %
000008e2 : 0280006f;   % 1251: 			j 	fimprintFloat 	 		# imprime a string %
000008e3 : 00030863;   % 1253: ehExp255printFloat: 	beq 	t1, zero, ehInfprintFloat	# se mantissa eh zero entao eh Infinito %
000008e4 : 0fc36517;   % 1255: ehNaNprintfFloat:	la 	a0, NumNaN			# string do NaN %
000008e5 : e5050513;   % 1255:  %
000008e6 : 0180006f;   % 1256: 			j 	fimprintFloat			# imprime string %
000008e7 : 0fc36517;   % 1258: ehInfprintFloat:	la 	a0, NumInfP			# string do infinito positivo %
000008e8 : e3050513;   % 1258:  %
000008e9 : 00048663;   % 1259: 			beq 	s1, zero, fimprintFloat		# o sinal eh 1? entao eh negativo %
000008ea : 0fc36517;   % 1260: 			la 	a0, NumInfN			# string do infinito negativo %
000008eb : e2e50513;   % 1260:  %
000008ec : 941ff0ef;   % 1263: fimprintFloat:		jal 	printString			# imprime a string em a0 %
000008ed : 00012083;   % 1264: 			lw 	ra, 0(sp)			# recupera ra %
000008ee : 00410113;   % 1265: 			addi 	sp, sp, 4			# libera espaco %
000008ef : 00008067;   % 1266: 			ret					# retorna %
000008f0 : ffc10113;   % 1275: readFloat: addi sp, sp, -4			# aloca espaco %
000008f1 : 00112023;   % 1276: 	sw 	ra, 0(sp)			# salva ra %
000008f2 : 0fc36517;   % 1277: 	la 	a0, TempBuffer			# endereco do FloatBuffer %
000008f3 : bd450513;   % 1277:  %
000008f4 : 02000593;   % 1278: 	li 	a1, 32				# numero maximo de caracteres %
000008f5 : b41ff0ef;   % 1279: 	jal	readString			# le string, retorna a2 ultimo endereco e a3 numero de caracteres %
000008f6 : 00c00433;   % 1280: 	mv 	s0, a2				# ultimo endereco da string (antes do \0) %
000008f7 : 00d004b3;   % 1281: 	mv 	s1, a3				# numero de caracteres digitados %
000008f8 : 0fc36b97;   % 1282: 	la	s7, TempBuffer			# Endereco do primeiro caractere %
000008f9 : bbcb8b93;   % 1282:  %
000008fa : 017002b3;   % 1284: lePrimeiroreadFloat:	mv 	t0, s7		# Endereco de Inicio %
000008fb : 00028303;   % 1285: 	lb 	t1, 0(t0)				# le primeiro caractere %
000008fc : 06500213;   % 1286: 	li	tp, 'e'					# TP = 101 = 'e' %
000008fd : 02430863;   % 1287: 	beq 	t1, tp, insere0AreadFloat		# insere '0' antes %
000008fe : 04500213;   % 1288: 	li 	tp, 'E'					# TP = 69 = 'E' %
000008ff : 02430463;   % 1289: 	beq 	t1, tp, insere0AreadFloat		# insere '0' antes %
00000900 : 02e00213;   % 1290: 	li	tp, '.'					# TP = 46 = '.' %
00000901 : 02430063;   % 1291: 	beq 	t1, tp, insere0AreadFloat		#  insere '0' antes %
00000902 : 02b00213;   % 1292: 	li	tp, '+'					# TP = 43 = '+' %
00000903 : 00430863;   % 1293: 	beq 	t1, tp, pulaPrimreadChar		# pula o primeiro caractere %
00000904 : 02d00213;   % 1294: 	li	tp, '-'					# TP = 45 = '-' %
00000905 : 00430463;   % 1295: 	beq 	t1, tp, pulaPrimreadChar %
00000906 : 03c0006f;   % 1296: 	j leUltimoreadFloat %
00000907 : 001b8b93;   % 1298: pulaPrimreadChar: addi s7,s7,1			# incrementa o endereco inicial %
00000908 : fc9ff06f;   % 1299: 		  j lePrimeiroreadFloat		# volta a testar o novo primeiro caractere %
00000909 : 008002b3;   % 1301: insere0AreadFloat: mv t0, s0			# endereco do ultimo caractere %
0000090a : 00140413;   % 1302: 		   addi s0, s0, 1		# desloca o ultimo endereco para o proximo %
0000090b : 00148493;   % 1303: 	   	   addi s1, s1, 1		# incrementa o num. caracteres %
0000090c : 000400a3;   % 1304: 	   	   sb 	zero, 1(s0)		# \NULL do final de string %
0000090d : 01700f33;   % 1305: 	   	   mv t5, s7			# primeiro caractere %
0000090e : 01e28a63;   % 1306: insere0Aloop:	   beq 	t0, t5, saiinsere0AreadFloat	# chegou no inicio entao fim %
0000090f : 00028303;   % 1307: 		   lb 	t1, 0(t0)		# le caractere %
00000910 : 006280a3;   % 1308: 		   sb 	t1, 1(t0)		# escreve no proximo %
00000911 : fff28293;   % 1309: 		   addi t0, t0, -1		# decrementa endereco %
00000912 : ff1ff06f;   % 1310: 		   j insere0Aloop		# volta ao loop %
00000913 : 03000313;   % 1311: saiinsere0AreadFloat: li t1, '0'		# ascii '0' %
00000914 : 00628023;   % 1312: 		   sb t1, 0(t0)			# escreve '0' no primeiro caractere %
00000915 : 00040303;   % 1314: leUltimoreadFloat: lb  	t1, 0(s0)			# le ultimo caractere %
00000916 : 06500213;   % 1315: 		li	tp, 'e'				# TP = 101 = 'e' %
00000917 : 00430c63;   % 1316: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
00000918 : 04500213;   % 1317: 		li 	tp, 'E'				# TP = 69 = 'E' %
00000919 : 00430863;   % 1318: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
0000091a : 02e00213;   % 1319: 		li	tp, '.'				# TP = 46 = '.' %
0000091b : 00430463;   % 1320: 		beq 	t1, tp, insere0PreadFloat	# insere '0' depois %
0000091c : 0180006f;   % 1321: 		j 	inicioreadFloat %
0000091d : 00140413;   % 1323: insere0PreadFloat: addi	s0, s0, 1		# desloca o ultimo endereco para o proximo %
0000091e : 00148493;   % 1324: 	   	   addi	s1, s1, 1		# incrementa o num. caracteres %
0000091f : 03000313;   % 1325: 		   li 	t1,'0'			# ascii '0' %
00000920 : 00640023;   % 1326: 		   sb 	t1,0(s0)		# escreve '0' no ultimo %
00000921 : 000400a3;   % 1327: 		   sb 	zero,1(s0)		# \null do final de string %
00000922 : d0007553;   % 1329: inicioreadFloat:  fcvt.s.w 	fa0, zero	# fa0 Resultado inicialmente zero %
00000923 : 00a00293;   % 1330: 		li 	t0, 10			# inteiro 10	 %
00000924 : d002f353;   % 1331: 		fcvt.s.w 	ft6, t0		# ft6 contem sempre o numero cte 10.0000 %
00000925 : 00100293;   % 1332: 		li 	t0, 1			# inteiro 1 %
00000926 : d002f0d3;   % 1333: 		fcvt.s.w 	ft1, t0		# ft1 contem sempre o numero cte 1.0000	 %
00000927 : 00140993;   % 1336: procuraEreadFloat:	addi 	s3, s0, 1			# inicialmente nao tem 'e' ou 'E' na string (fora da string) %
00000928 : 017002b3;   % 1337: 			mv 	t0, s7				# endereco inicial %
00000929 : 02828263;   % 1338: loopEreadFloat: 	beq 	t0, s0, naotemEreadFloat	# sai se nao encontrou 'e' %
0000092a : 00028303;   % 1339: 			lb 	t1, 0(t0)			# le o caractere %
0000092b : 06500213;   % 1340: 			li	tp, 'e'				# TP = 101 = 'e' %
0000092c : 00430a63;   % 1341: 			beq 	t1, tp, ehEreadFloat		# tem 'e' %
0000092d : 04500213;   % 1342: 			li 	tp, 'E'				# TP = 69 = 'E' %
0000092e : 00430663;   % 1343: 			beq	t1, tp, ehEreadFloat		# tem 'E' %
0000092f : 00128293;   % 1344: 			addi 	t0, t0, 1			# incrementa endereco %
00000930 : fe5ff06f;   % 1345: 			j 	loopEreadFloat			# volta ao loop %
00000931 : 005009b3;   % 1346: ehEreadFloat: 		mv 	s3, t0				# endereco do 'e' ou 'E' na string %
00000932 : 01300933;   % 1350: procuraPontoreadFloat:	mv 	s2, s3				# local inicial do ponto na string (='e' se existir) ou fora da string	 %
00000933 : 017002b3;   % 1351: 			mv 	t0, s7				# endereco inicial %
00000934 : 00828e63;   % 1352: loopPontoreadFloat: 	beq 	t0, s0, naotemPontoreadFloat	# sai se nao encontrou '.' %
00000935 : 00028303;   % 1353: 			lb 	t1, 0(t0)			# le o caractere %
00000936 : 02e00213;   % 1354: 			li	tp, '.'				# TP = 46 = '.' %
00000937 : 00430663;   % 1355: 			beq 	t1, tp, ehPontoreadFloat	# tem '.' %
00000938 : 00128293;   % 1356: 			addi 	t0, t0, 1			# incrementa endereco %
00000939 : fedff06f;   % 1357: 			j 	loopPontoreadFloat		# volta ao loop %
0000093a : 00500933;   % 1358: ehPontoreadFloat: 	mv 	s2, t0				# endereco do '.' na string %
0000093b : d0007153;   % 1362: intreadFloat:		fcvt.s.w 	ft2, zero		# zera parte inteira %
0000093c : fff90293;   % 1363: 			addi 	t0, s2, -1			# endereco do caractere antes do ponto %
0000093d : 201081d3;   % 1364: 			fmv.s 	ft3, ft1			# ft3 contem unidade/dezenas/centenas		 %
0000093e : 01700f33;   % 1365: 			mv 	t5, s7				# Primeiro Endereco %
0000093f : 03e2ca63;   % 1366: loopintreadFloat: 	blt 	t0, t5, fimintreadFloat		# sai se o endereco for < inicio da string %
00000940 : 00028303;   % 1367: 			lb 	t1, 0(t0)			# le o caracter %
00000941 : 03000213;   % 1368: 			li	tp, '0'				# TP = 48 = '0' %
00000942 : 10434863;   % 1369: 			blt 	t1, tp, erroreadFloat		# nao eh caractere valido para numero %
00000943 : 03900213;   % 1370: 			li	tp, '9'				# TP = 57 = '9' %
00000944 : 10624463;   % 1371: 			bgt 	t1, tp, erroreadFloat		# nao eh caractere valido para numero %
00000945 : fd030313;   % 1372: 			addi 	t1, t1, -48			# converte ascii para decimal %
00000946 : d0037153;   % 1373: 			fcvt.s.w  ft2, t1			# digito lido em float %
00000947 : 10317153;   % 1375: 			fmul.s 	ft2,ft2,ft3			# multiplica por un/dezena/centena %
00000948 : 00257553;   % 1376: 			fadd.s 	fa0,fa0,ft2			# soma no resultado %
00000949 : 1061f1d3;   % 1377: 			fmul.s 	ft3,ft3,ft6			# proxima dezena/centena %
0000094a : fff28293;   % 1379: 			addi 	t0,t0,-1			# endereco anterior %
0000094b : fd1ff06f;   % 1380: 			j 	loopintreadFloat		# volta ao loop %
0000094c : d0007153;   % 1384: fracreadFloat:		fcvt.s.w 	ft2, zero		# zera parte fracionaria %
0000094d : 00190293;   % 1385: 			addi 	t0, s2, 1			# endereco depois do ponto %
0000094e : 1860f1d3;   % 1386: 			fdiv.s 	ft3, ft1, ft6			# ft3 inicial 0.1 %
0000094f : 0332da63;   % 1388: loopfracreadFloat: 	bge 	t0, s3, fimfracreadFloat	# endereco eh 'e' 'E' ou >ultimo %
00000950 : 00028303;   % 1389: 			lb 	t1, 0(t0)			# le o caracter %
00000951 : 03000213;   % 1390: 			li	tp, '0'				# TP = 48 = '0' %
00000952 : 0c434863;   % 1391: 			blt 	t1, tp, erroreadFloat		# nao eh valido %
00000953 : 03900213;   % 1392: 			li	tp, '9'				# TP = 57 = '9' %
00000954 : 0c624463;   % 1393: 			bgt 	t1, tp, erroreadFloat		# nao eh valido %
00000955 : fd030313;   % 1394: 			addi 	t1, t1, -48			# converte ascii para decimal %
00000956 : d0037153;   % 1395: 			fcvt.s.w 	ft2, t1			# digito lido em float		 %
00000957 : 10317153;   % 1397: 			fmul.s 	ft2, ft2, ft3			# multiplica por ezena/centena %
00000958 : 00257553;   % 1398: 			fadd.s 	fa0, fa0, ft2			# soma no resultado %
00000959 : 1861f1d3;   % 1399: 			fdiv.s 	ft3, ft3, ft6			# proxima frac un/dezena/centena %
0000095a : 00128293;   % 1401: 			addi 	t0, t0, 1			# proximo endereco %
0000095b : fd1ff06f;   % 1402: 			j 	loopfracreadFloat		# volta ao loop		 %
0000095c : d0007153;   % 1407: potreadFloat:		fcvt.s.w 	ft2, zero		# zera potencia %
0000095d : 00198293;   % 1408: 			addi 	t0, s3, 1			# endereco seguinte ao 'e' %
0000095e : 00000a13;   % 1409: 			li 	s4, 0				# sinal do expoente positivo %
0000095f : 00028303;   % 1410: 			lb 	t1, 0(t0)			# le o caractere seguinte ao 'e' %
00000960 : 02d00213;   % 1411: 			li	tp, '-'				# TP = 45 = '-' %
00000961 : 00430863;   % 1412: 			beq	t1, tp, potsinalnegreadFloat	# sinal do expoente esta escrito e eh positivo %
00000962 : 02b00213;   % 1413: 			li	tp, '+'				# TP = 43 = '+' %
00000963 : 00430663;   % 1414: 			beq 	t1, tp, potsinalposreadFloat	# sinal do expoente eh negativo %
00000964 : 00c0006f;   % 1415: 			j 	pulapotsinalreadFloat		# nao esta escrito o sinal do expoente %
00000965 : 00100a13;   % 1416: potsinalnegreadFloat:	li 	s4, 1				# s4=1 expoente negativo %
00000966 : 00128293;   % 1417: potsinalposreadFloat:	addi 	t0, t0, 1			# se tiver '-' ou '+' avanca para o proximo endereco %
00000967 : 00500ab3;   % 1418: pulapotsinalreadFloat:	mv 	s5, t0 				# Neste ponto s5 contem o endereco do primeiro digito da pot e s4 o sinal do expoente		 %
00000968 : 201081d3;   % 1420: 			fmv.s 	ft3, ft1			# ft3 un/dez/cen = 1 %
00000969 : 00000393;   % 1423: expreadFloat:		li 	t2, 0				# zera expoente %
0000096a : 008002b3;   % 1424: 			mv 	t0, s0				# endereco do ultimo caractere da string %
0000096b : 00a00e13;   % 1425: 			li 	t3, 10				# numero dez %
0000096c : 00100e93;   % 1426: 			li 	t4, 1				# und/dez/cent %
0000096d : 0352c063;   % 1428: loopexpreadFloat:	blt 	t0, s5, fimexpreadFloat		# ainda nao eh o endereco do primeiro digito? %
0000096e : 00028303;   % 1429: 			lb 	t1, 0(t0)			# le o caracter %
0000096f : fd030313;   % 1430: 			addi 	t1, t1, -48			# converte ascii para decimal %
00000970 : 03d30333;   % 1431: 			mul 	t1, t1, t4			# mul digito %
00000971 : 006383b3;   % 1432: 			add 	t2, t2, t1			# soma ao exp %
00000972 : 03ce8eb3;   % 1433: 			mul 	t4, t4, t3			# proxima casa decimal %
00000973 : fff28293;   % 1434: 			addi 	t0, t0, -1			# endereco anterior %
00000974 : fe5ff06f;   % 1435: 			j loopexpreadFloat			# volta ao loop %
00000975 : 20108153;   % 1439: 			fmv.s 	ft2, ft1			# numero 10^exp  inicial=1 %
00000976 : 206301d3;   % 1440: 			fmv.s 	ft3, ft6			# se o sinal for + ft3 eh 10 %
00000977 : 00000213;   % 1441: 			li	tp, 0x00000000			# TP = ZERO %
00000978 : 004a0463;   % 1442: 			beq 	s4, tp, sinalexpPosreadFloat	# se sinal exp positivo %
00000979 : 1860f1d3;   % 1443: 			fdiv.s 	ft3, ft1, ft6			# se o final for - ft3 eh 0.1 %
0000097a : 00000293;   % 1444: sinalexpPosreadFloat:	li 	t0, 0				# contador  %
0000097b : 00728863;   % 1445: sinalexpreadFloat: 	beq 	t0, t2, fimsinalexpreadFloat	# se chegou ao fim %
0000097c : 10317153;   % 1446: 			fmul.s 	ft2, ft2, ft3			# multiplica pelo fator 10 ou 0.1 %
0000097d : 00128293;   % 1447: 			addi 	t0, t0, 1			# incrementa o contador %
0000097e : ff5ff06f;   % 1448: 			j 	sinalexpreadFloat %
0000097f : 10257553;   % 1451: 		fmul.s 	fa0, fa0, ft2		# multiplicacao final! %
00000980 : 0fc36297;   % 1453: 		la 	t0, TempBuffer		# ajuste final do sinal do numero %
00000981 : 99c28293;   % 1453:  %
00000982 : 00028303;   % 1454: 		lb 	t1, 0(t0)		# le primeiro caractere %
00000983 : 02d00213;   % 1455: 		li	tp, '-'			# TP = 45 = '-' %
00000984 : 00431463;   % 1456: 		bne 	t1, tp, fimreadFloat	# nao eh '-' entao fim %
00000985 : 20a51553;   % 1457: 		fneg.s 	fa0, fa0		# nega o numero float %
00000986 : 00012083;   % 1460: fimreadFloat: 	lw 	ra, 0(sp)		# recupera ra %
00000987 : 00410113;   % 1461: 		addi 	sp, sp, 4		# libera espaco %
00000988 : 00008067;   % 1462: 		ret				# retorna %
00000989 : 10008c37;   % 1470: <9> li s8, 0x10008000	# carrega tp %
0000098a : 000c0c13;   % 1470:  %
0000098b : 01819863;   % 1470: <10> bne gp, s8, Time.DE1	# Na DE1 gp = 0 ! N�o tem segmento .extern %
0000098c : 01e00893;   % 1471: 	li 	a7, 30				# Chama o ecall do Rars %
0000098d : 00000073;   % 1472: 	ecall %
0000098e : 00008067;   % 1473: 	ret					# saida %
0000098f : c0102573;   % 1475: Time.DE1:	csrr a0, time			#  Le time LOW %
00000990 : c81025f3;   % 1476: 		csrr a1, timeh 			#  Le time HIGH %
00000991 : 00008067;   % 1477: 		ret %
00000992 : 10008c37;   % 1490: <9> li s8, 0x10008000	# carrega tp %
00000993 : 000c0c13;   % 1490:  %
00000994 : 01819863;   % 1490: <10> bne gp, s8, Sleep.DE1	# Na DE1 gp = 0 ! N�o tem segmento .extern %
00000995 : 02000893;   % 1491: 	li 	a7, 32				# Chama o ecall do Rars %
00000996 : 00000073;   % 1492: 	ecall %
00000997 : 00008067;   % 1493: 	ret					#Saida %
00000998 : c01022f3;   % 1495: Sleep.DE1:	csrr 	t0, time		# Le o tempo do sistema %
00000999 : 00a28333;   % 1496: 		add 	t1, t0, a0		# soma com o tempo solicitado %
0000099a : c01022f3;   % 1497: Sleep.Loop:	csrr	t0, time		# Le o tempo do sistema %
0000099b : fe62cee3;   % 1498: 		blt	t0, t1, Sleep.Loop	# t0<t1 ? %
0000099c : 00008067;   % 1499: 		ret %
0000099d : 10008c37;   % 1517: <9> li s8, 0x10008000	# carrega tp %
0000099e : 000c0c13;   % 1517:  %
0000099f : 01819863;   % 1517: <10> bne gp, s8, Random.DE1	# Na DE1 gp = 0 ! N�o tem segmento .extern %
000009a0 : 02900893;   % 1518: 	li 	a7,41			# Chama o ecall do Rars %
000009a1 : 00000073;   % 1519: 	ecall	 %
000009a2 : 00008067;   % 1520: 	ret				# saida %
000009a3 : ff2002b7;   % 1522: Random.DE1: 	li 	t0, 0xFF200514	# carrega endereco do LFSR %
000009a4 : 51428293;   % 1522:  %
000009a5 : 0002a503;   % 1523: 		lw 	a0, 0(t0)	# le a word em a0 %
000009a6 : 00008067;   % 1524: 		ret			# retorna %
000009a7 : 00058c63;   % 1534: clsCLS:	beq 	a1, zero, CLS.frame0 %
000009a8 : ff100337;   % 1535: 	li      t1, 0xFF100000              # Memoria VGA 1 %
000009a9 : 00030313;   % 1535:  %
000009aa : ff1133b7;   % 1536:    	li      t2, 0xFF112C00 %
000009ab : c0038393;   % 1536:  %
000009ac : 0140006f;   % 1537:    	j 	CLS.pula %
000009ad : ff000337;   % 1538: CLS.frame0: 	li      t1, 0xFF000000           # Memoria VGA 0 %
000009ae : 00030313;   % 1538:  %
000009af : ff0133b7;   % 1539:    	    	li      t2, 0xFF012C00   	 %
000009b0 : c0038393;   % 1539:  %
000009b1 : 0ff57513;   % 1540: CLS.pula:	andi    a0, a0, 0x00FF %
000009b2 : 00a002b3;   % 1543:  		mv 	t0, a0 %
000009b3 : 00851513;   % 1544:  		slli 	a0, a0, 8 %
000009b4 : 00a2e2b3;   % 1545:  		or 	t0, t0, a0 %
000009b5 : 00851513;   % 1546:  		slli 	a0, a0, 8 %
000009b6 : 00a2e2b3;   % 1547:  		or 	t0, t0, a0 %
000009b7 : 00851513;   % 1548:  		slli 	a0, a0, 8 %
000009b8 : 00a2e2b3;   % 1549:  		or 	t0, t0, a0 %
000009b9 : 00730863;   % 1551: CLS.for:	beq     t1, t2, CLS.fim %
000009ba : 00532023;   % 1552: 		sw      t0, 0(t1) %
000009bb : 00430313;   % 1553:     		addi    t1, t1, 4 %
000009bc : ff5ff06f;   % 1554:     		j       CLS.for %
000009bd : 00008067;   % 1555: CLS.fim:	ret %
000009be : ff000837;   % 1564: BRESENHAM: 	li	a6, 0xFF000000           	# Memoria VGA 0 %
000009bf : 00080813;   % 1564:  %
000009c0 : 00078663;   % 1565: 	   	beq	a5, zero, pulaBRES %
000009c1 : ff100837;   % 1566: 	   	li 	a6, 0xFF100000              # Memoria VGA 1 %
000009c2 : 00080813;   % 1566:  %
000009c3 : 14000893;   % 1568: pulaBRES: 	li 	a7, 320 %
000009c4 : 40b682b3;   % 1569: 	  	sub 	t0, a3, a1 %
000009c5 : 0002d463;   % 1570: 	  	bge 	t0, zero, PULAABRES %
000009c6 : 405002b3;   % 1571: 	  	sub 	t0, zero, t0 %
000009c7 : 40a60333;   % 1572: PULAABRES:	sub 	t1, a2, a0 %
000009c8 : 00035463;   % 1573: 	   	bge  	t1, zero, PULABBRES %
000009c9 : 40600333;   % 1574: 	   	sub  	t1, zero, t1	 %
000009ca : 0262d263;   % 1575: PULABBRES: 	bge  	t0, t1, PULACBRES %
000009cb : 00a65e63;   % 1576: 	   	ble  	a0, a2, PULAC1BRES %
000009cc : 00a007b3;   % 1577: 	   	mv 	a5, a0 %
000009cd : 00c00533;   % 1578: 	   	mv 	a0, a2 %
000009ce : 00f00633;   % 1579: 	   	mv 	a2, a5 %
000009cf : 00b007b3;   % 1580: 	   	mv	a5, a1 %
000009d0 : 00d005b3;   % 1581: 	   	mv 	a1, a3 %
000009d1 : 00f006b3;   % 1582: 	   	mv 	a3, a5 %
000009d2 : 0240006f;   % 1583: PULAC1BRES:	j PLOTLOWBRES %
000009d3 : 00b6de63;   % 1585: PULACBRES: 	ble  	a1, a3, PULAC2BRES %
000009d4 : 00a007b3;   % 1586: 	   	mv 	a5, a0 %
000009d5 : 00c00533;   % 1587: 	   	mv 	a0, a2 %
000009d6 : 00f00633;   % 1588: 	   	mv 	a2, a5 %
000009d7 : 00b007b3;   % 1589: 	   	mv 	a5, a1 %
000009d8 : 00d005b3;   % 1590: 	   	mv 	a1, a3 %
000009d9 : 00f006b3;   % 1591: 	   	mv 	a3, a5 %
000009da : 0a80006f;   % 1592: PULAC2BRES:	j PLOTHIGHBRES %
000009db : 40a602b3;   % 1594: PLOTLOWBRES:	sub 	t0, a2, a0		# dx=x1-x0 %
000009dc : 40b68333;   % 1595: 	 	sub 	t1, a3, a1		# dy y1-y0 %
000009dd : 00100393;   % 1596: 	 	li  	t2, 1			# yi=1 %
000009de : 00035663;   % 1597: 	 	bge 	t1, zero, PULA1BRES	# dy>=0 PULA %
000009df : fff00393;   % 1598: 	 	li  	t2, -1			# yi=-1 %
000009e0 : 40600333;   % 1599: 	 	sub 	t1, zero, t1		# dy=-dy %
000009e1 : 00131e13;   % 1600: PULA1BRES:	slli 	t3, t1, 1		# 2*dy %
000009e2 : 405e0e33;   % 1601: 		sub 	t3, t3, t0		# D=2*dy-dx %
000009e3 : 00b00eb3;   % 1602: 		mv 	t4, a1			# y=y0 %
000009e4 : 00a00f33;   % 1603: 		mv 	t5, a0			# x=x0 %
000009e5 : 30102c73;   % 1605: <29> csrr s8, misa %
000009e6 : 00cc5c13;   % 1605: <30> srli s8, s8, 12 %
000009e7 : 001c7c13;   % 1605: <31> andi s8, s8, 0x001 %
000009e8 : 020c1e63;   % 1605: <32> bnez s8, BRESENHAM.mul1 %
000009e9 : ff410113;   % 1606: <45> addi 	sp, sp, -12 %
000009ea : 00a12023;   % 1606: <46> sw	a0, 0(sp) %
000009eb : 00b12223;   % 1606: <47> sw	a1, 4(sp) %
000009ec : 00112423;   % 1606: <48> sw	ra, 8(sp) %
000009ed : 01d00533;   % 1606: <50> mv 	a0, t4 %
000009ee : 011005b3;   % 1606: <51> mv 	a1, a7 %
000009ef : 2d8000ef;   % 1606: <52> jal 	__mulsi3 %
000009f0 : 04051073;   % 1606: <53> csrw	a0,uscratch %
000009f1 : 00012503;   % 1606: <55> lw	a0, 0(sp) %
000009f2 : 00412583;   % 1606: <56> lw	a1, 4(sp) %
000009f3 : 00812083;   % 1606: <57> lw	ra, 8(sp) %
000009f4 : 00c10113;   % 1606: <58> addi 	sp, sp, 12 %
000009f5 : 04002ff3;   % 1606: <59> csrr	t6,uscratch %
000009f6 : 0080006f;   % 1607: 		j BRESENHAM.mul1d %
000009f7 : 031e8fb3;   % 1608: BRESENHAM.mul1:	mul 	t6, t4, a7		# y*320 %
000009f8 : 01ef8fb3;   % 1609: BRESENHAM.mul1d:add 	t6, t6, t5		# y*320+x %
000009f9 : 010f8fb3;   % 1610: 		add 	t6, t6, a6		# 0xFF000000+y*320+x %
000009fa : 00ef8023;   % 1611: 		sb 	a4, 0(t6)		# plot com cor a4 %
000009fb : 01c05863;   % 1613: 		ble 	t3, zero, PULA2BRES	# D<=0 %
000009fc : 007e8eb3;   % 1614: 		add 	t4, t4, t2		# y=y+yi %
000009fd : 00129f93;   % 1615: 		slli 	t6, t0, 1		# 2*dx %
000009fe : 41fe0e33;   % 1616: 		sub 	t3, t3, t6		# D=D-2dx %
000009ff : 00131f93;   % 1617: PULA2BRES:	slli 	t6, t1, 1		# 2*dy %
00000a00 : 01fe0e33;   % 1618: 		add 	t3, t3, t6		# D=D+2dx %
00000a01 : 001f0f13;   % 1619: 		addi	t5, t5, 1 %
00000a02 : f8cf16e3;   % 1620: 		bne 	t5, a2, LOOPx1BRES %
00000a03 : 00008067;   % 1621: 		ret %
00000a04 : 40a602b3;   % 1623: PLOTHIGHBRES: 	sub 	t0, a2, a0		# dx=x1-x0 %
00000a05 : 40b68333;   % 1624: 	 	sub 	t1, a3, a1		# dy y1-y0 %
00000a06 : 00100393;   % 1625: 	 	li 	t2, 1			# xi=1 %
00000a07 : 0002d663;   % 1626: 	 	bge 	t0, zero, PULA3BRES	# dy>=0 PULA %
00000a08 : fff00393;   % 1627: 	 	li 	t2, -1			# xi=-1 %
00000a09 : 405002b3;   % 1628: 	 	sub 	t0, zero, t0		# dx=-dx %
00000a0a : 00129e13;   % 1629: PULA3BRES:	slli 	t3, t0, 1		# 2*dx %
00000a0b : 406e0e33;   % 1630: 		sub 	t3, t3, t1		# D=2*dx-d1 %
00000a0c : 00a00eb3;   % 1631: 		mv 	t4, a0			# x=x0 %
00000a0d : 00b00f33;   % 1632: 		mv 	t5, a1			# y=y0 %
00000a0e : 30102c73;   % 1634: <29> csrr s8, misa %
00000a0f : 00cc5c13;   % 1634: <30> srli s8, s8, 12 %
00000a10 : 001c7c13;   % 1634: <31> andi s8, s8, 0x001 %
00000a11 : 020c1e63;   % 1634: <32> bnez s8, BRESENHAM.mul2 %
00000a12 : ff410113;   % 1635: <45> addi 	sp, sp, -12 %
00000a13 : 00a12023;   % 1635: <46> sw	a0, 0(sp) %
00000a14 : 00b12223;   % 1635: <47> sw	a1, 4(sp) %
00000a15 : 00112423;   % 1635: <48> sw	ra, 8(sp) %
00000a16 : 01e00533;   % 1635: <50> mv 	a0, t5 %
00000a17 : 011005b3;   % 1635: <51> mv 	a1, a7 %
00000a18 : 234000ef;   % 1635: <52> jal 	__mulsi3 %
00000a19 : 04051073;   % 1635: <53> csrw	a0,uscratch %
00000a1a : 00012503;   % 1635: <55> lw	a0, 0(sp) %
00000a1b : 00412583;   % 1635: <56> lw	a1, 4(sp) %
00000a1c : 00812083;   % 1635: <57> lw	ra, 8(sp) %
00000a1d : 00c10113;   % 1635: <58> addi 	sp, sp, 12 %
00000a1e : 04002ff3;   % 1635: <59> csrr	t6,uscratch %
00000a1f : 0080006f;   % 1636: 		j BRESENHAM.mul2d %
00000a20 : 031f0fb3;   % 1637: BRESENHAM.mul2:	mul 	t6, t5, a7		# y*320 %
00000a21 : 01df8fb3;   % 1638: BRESENHAM.mul2d:add 	t6, t6, t4		# y*320+x %
00000a22 : 010f8fb3;   % 1639: 		add 	t6, t6, a6		# 0xFF000000+y*320+x %
00000a23 : 00ef8023;   % 1640: 		sb 	a4, 0(t6)		# plot com cor a4 %
00000a24 : 01c05863;   % 1642: 		ble 	t3, zero, PULA4BRES	# D<=0 %
00000a25 : 007e8eb3;   % 1643: 		add 	t4, t4, t2		# x=x+xi %
00000a26 : 00131f93;   % 1644: 		slli 	t6, t1, 1		# 2*dy %
00000a27 : 41fe0e33;   % 1645: 		sub 	t3, t3, t6		# D=D-2dy %
00000a28 : 00129f93;   % 1646: PULA4BRES: 	slli 	t6, t0, 1		# 2*dy %
00000a29 : 01fe0e33;   % 1647: 		add 	t3, t3, t6		# D=D+2dx %
00000a2a : 001f0f13;   % 1648: 		addi 	t5, t5, 1 %
00000a2b : f8df16e3;   % 1649: 		bne 	t5, a3, LOOPx2BRES %
00000a2c : 00008067;   % 1650: 		ret		 %
00000a2d : ffc10113;   % 1665: printIntUnsigned:	addi 	sp, sp, -4		# Aloca espaco %
00000a2e : 00112023;   % 1666: 		sw 	ra, 0(sp)			# salva ra %
00000a2f : 0fc35297;   % 1667: 		la 	t0, TempBuffer			# carrega o Endereco do Buffer da String %
00000a30 : 6e028293;   % 1667:  %
00000a31 : 00a00393;   % 1669: 		li 	t2, 10				# carrega numero 10 %
00000a32 : 00000313;   % 1670: 		li 	t1, 0				# carrega numero de digitos com 0 %
00000a33 : 30102c73;   % 1672: <29> csrr s8, misa %
00000a34 : 00cc5c13;   % 1672: <30> srli s8, s8, 12 %
00000a35 : 001c7c13;   % 1672: <31> andi s8, s8, 0x001 %
00000a36 : 160c1463;   % 1672: <32> bnez s8, printIntUnsigned.pula1 %
00000a37 : ff010113;   % 1673: <65> addi 	sp, sp, -16 %
00000a38 : 00a12023;   % 1673: <66> sw	a0, 0(sp) %
00000a39 : 00e12223;   % 1673: <67> sw	a4, 4(sp) %
00000a3a : 00f12423;   % 1673: <68> sw	a5, 8(sp) %
00000a3b : 00112623;   % 1673: <69> sw	ra, 12(sp) %
00000a3c : 00a00533;   % 1673: <70> mv 	a0, a0 %
00000a3d : 00155713;   % 1673: <71> srli    a4,a0,1 %
00000a3e : 00255793;   % 1673: <72> srli    a5,a0,2 %
00000a3f : 00f707b3;   % 1673: <73> add     a5,a4,a5 %
00000a40 : 0047d713;   % 1673: <74> srli    a4,a5,4 %
00000a41 : 00f70733;   % 1673: <75> add     a4,a4,a5 %
00000a42 : 00875793;   % 1673: <76> srli    a5,a4,8 %
00000a43 : 00e78733;   % 1673: <77> add     a4,a5,a4 %
00000a44 : 01075793;   % 1673: <78> srli    a5,a4,16 %
00000a45 : 00e787b3;   % 1673: <79> add     a5,a5,a4 %
00000a46 : 0037d793;   % 1673: <80> srli    a5,a5,3 %
00000a47 : 00279713;   % 1673: <81> slli    a4,a5,2 %
00000a48 : 00f70733;   % 1673: <82> add     a4,a4,a5 %
00000a49 : 00171713;   % 1673: <83> slli    a4,a4,1 %
00000a4a : 40e50533;   % 1673: <84> sub     a0,a0,a4 %
00000a4b : 00a53513;   % 1673: <85> sltiu   a0,a0,10 %
00000a4c : 00154513;   % 1673: <86> xori    a0,a0,1 %
00000a4d : 00f50533;   % 1673: <87> add     a0,a0,a5 %
00000a4e : 04051073;   % 1673: <88> csrw	a0,uscratch %
00000a4f : 00012503;   % 1673: <89> lw	a0, 0(sp) %
00000a50 : 00412703;   % 1673: <90> lw	a4, 4(sp) %
00000a51 : 00812783;   % 1673: <91> lw	a5, 8(sp) %
00000a52 : 00c12083;   % 1673: <92> lw	ra, 12(sp) %
00000a53 : 01010113;   % 1673: <93> addi 	sp, sp, 16 %
00000a54 : 04002ef3;   % 1673: <94> csrr	t4,uscratch %
00000a55 : ff010113;   % 1674: <122> addi 	sp,sp,-16 %
00000a56 : 00a12023;   % 1674: <123> sw	a0,0(sp) %
00000a57 : 00b12223;   % 1674: <124> sw	a1,4(sp) %
00000a58 : 00c12423;   % 1674: <125> sw	a2,8(sp) %
00000a59 : 00d12623;   % 1674: <126> sw	a3,12(sp) %
00000a5a : 00a006b3;   % 1674: <128> mv 	a3,a0 %
00000a5b : 00a00613;   % 1674: <129> li 	a2,10 %
00000a5c : ff010113;   % 1674: <65> addi 	sp, sp, -16 %
00000a5d : 00a12023;   % 1674: <66> sw	a0, 0(sp) %
00000a5e : 00e12223;   % 1674: <67> sw	a4, 4(sp) %
00000a5f : 00f12423;   % 1674: <68> sw	a5, 8(sp) %
00000a60 : 00112623;   % 1674: <69> sw	ra, 12(sp) %
00000a61 : 00d00533;   % 1674: <70> mv 	a0, a3 %
00000a62 : 00155713;   % 1674: <71> srli    a4,a0,1 %
00000a63 : 00255793;   % 1674: <72> srli    a5,a0,2 %
00000a64 : 00f707b3;   % 1674: <73> add     a5,a4,a5 %
00000a65 : 0047d713;   % 1674: <74> srli    a4,a5,4 %
00000a66 : 00f70733;   % 1674: <75> add     a4,a4,a5 %
00000a67 : 00875793;   % 1674: <76> srli    a5,a4,8 %
00000a68 : 00e78733;   % 1674: <77> add     a4,a5,a4 %
00000a69 : 01075793;   % 1674: <78> srli    a5,a4,16 %
00000a6a : 00e787b3;   % 1674: <79> add     a5,a5,a4 %
00000a6b : 0037d793;   % 1674: <80> srli    a5,a5,3 %
00000a6c : 00279713;   % 1674: <81> slli    a4,a5,2 %
00000a6d : 00f70733;   % 1674: <82> add     a4,a4,a5 %
00000a6e : 00171713;   % 1674: <83> slli    a4,a4,1 %
00000a6f : 40e50533;   % 1674: <84> sub     a0,a0,a4 %
00000a70 : 00a53513;   % 1674: <85> sltiu   a0,a0,10 %
00000a71 : 00154513;   % 1674: <86> xori    a0,a0,1 %
00000a72 : 00f50533;   % 1674: <87> add     a0,a0,a5 %
00000a73 : 04051073;   % 1674: <88> csrw	a0,uscratch %
00000a74 : 00012503;   % 1674: <89> lw	a0, 0(sp) %
00000a75 : 00412703;   % 1674: <90> lw	a4, 4(sp) %
00000a76 : 00812783;   % 1674: <91> lw	a5, 8(sp) %
00000a77 : 00c12083;   % 1674: <92> lw	ra, 12(sp) %
00000a78 : 01010113;   % 1674: <93> addi 	sp, sp, 16 %
00000a79 : 04002573;   % 1674: <94> csrr	a0,uscratch %
00000a7a : ff410113;   % 1674: <45> addi 	sp, sp, -12 %
00000a7b : 00a12023;   % 1674: <46> sw	a0, 0(sp) %
00000a7c : 00b12223;   % 1674: <47> sw	a1, 4(sp) %
00000a7d : 00112423;   % 1674: <48> sw	ra, 8(sp) %
00000a7e : 00a00533;   % 1674: <50> mv 	a0, a0 %
00000a7f : 00c005b3;   % 1674: <51> mv 	a1, a2 %
00000a80 : 094000ef;   % 1674: <52> jal 	__mulsi3 %
00000a81 : 04051073;   % 1674: <53> csrw	a0,uscratch %
00000a82 : 00012503;   % 1674: <55> lw	a0, 0(sp) %
00000a83 : 00412583;   % 1674: <56> lw	a1, 4(sp) %
00000a84 : 00812083;   % 1674: <57> lw	ra, 8(sp) %
00000a85 : 00c10113;   % 1674: <58> addi 	sp, sp, 12 %
00000a86 : 040025f3;   % 1674: <59> csrr	a1,uscratch %
00000a87 : 40b68e33;   % 1674: <132> sub 	t3,a3,a1 %
00000a88 : 040e1073;   % 1674: <134> csrw	t3,uscratch %
00000a89 : 00012503;   % 1674: <135> lw	a0,0(sp) %
00000a8a : 00412583;   % 1674: <136> lw 	a1,4(sp) %
00000a8b : 00812603;   % 1674: <137> lw	a2,8(sp) %
00000a8c : 00c12683;   % 1674: <138> lw	a3,12(sp) %
00000a8d : 01010113;   % 1674: <139> addi 	sp,sp,16 %
00000a8e : 04002e73;   % 1674: <140> csrr	t3,uscratch %
00000a8f : 00c0006f;   % 1675: 			j	printIntUnsigned.pula1d %
00000a90 : 02755eb3;   % 1676: printIntUnsigned.pula1:	divu 	t4, a0, t2			# divide por 10 (quociente) %
00000a91 : 02757e33;   % 1677: 			remu 	t3, a0, t2			# resto %
00000a92 : ffc10113;   % 1678: printIntUnsigned.pula1d:addi 	sp, sp, -4			# aloca espaco na pilha %
00000a93 : 01c12023;   % 1679: 		sw 	t3, 0(sp)			# coloca resto na pilha %
00000a94 : 01d00533;   % 1680: 		mv 	a0, t4				# atualiza o numero com o quociente %
00000a95 : 00130313;   % 1681: 		addi 	t1, t1, 1			# incrementa o contador de digitos %
00000a96 : e6051ae3;   % 1682: 		bne 	a0, zero, printIntUnsigned.loop1# verifica se o numero eh zero %
00000a97 : 00012383;   % 1684: printIntUnsigned.loop2:	lw 	t2, 0(sp)		# le digito da pilha %
00000a98 : 00410113;   % 1685: 		addi 	sp, sp, 4			# libera espaco %
00000a99 : 03038393;   % 1686: 		addi 	t2, t2, 48			# converte o digito para ascii %
00000a9a : 00728023;   % 1687: 		sb 	t2, 0(t0)			# coloca caractere no buffer %
00000a9b : 00128293;   % 1688: 		addi 	t0, t0, 1			# incrementa endereco do buffer %
00000a9c : fff30313;   % 1689: 		addi 	t1, t1, -1			# decrementa contador de digitos %
00000a9d : fe0314e3;   % 1690: 		bne 	t1, zero, printIntUnsigned.loop2# eh o ultimo? %
00000a9e : 00028023;   % 1691: 		sb 	zero, 0(t0)			# insere \NULL na string %
00000a9f : 0fc35517;   % 1693: 		la 	a0, TempBuffer			# Endereco do buffer da srting %
00000aa0 : 52050513;   % 1693:  %
00000aa1 : a6cff0ef;   % 1694: 		jal 	printString			# chama o print string %
00000aa2 : 00012083;   % 1696: 		lw 	ra, 0(sp)			# recupera a %
00000aa3 : 00410113;   % 1697: 		addi 	sp, sp, 4			# libera espaco %
00000aa4 : 00008067;   % 1698: printIntUnsigned.fim:	ret %
00000aa5 : ff410113;   % 1711: __mulsi3:	addi 	sp,sp,-12 %
00000aa6 : 00b12023;   % 1712: 		sw 	a1,0(sp) %
00000aa7 : 00e12223;   % 1713: 		sw 	a4,4(sp) %
00000aa8 : 00f12423;   % 1714: 		sw	a5,8(sp) %
00000aa9 : 00a007b3;   % 1716: 	 	mv      a5,a0 %
00000aaa : 00000513;   % 1717:         	li      a0,0 %
00000aab : 00078e63;   % 1718: mulsi3.L4: 	beqz    a5,mulsi3.L1 %
00000aac : 0017f713;   % 1719:         	andi    a4,a5,1 %
00000aad : 00070463;   % 1720:         	beqz    a4,mulsi3.L3 %
00000aae : 00b50533;   % 1721:         	add     a0,a0,a1 %
00000aaf : 0017d793;   % 1722: mulsi3.L3: 	srli    a5,a5,1 %
00000ab0 : 00159593;   % 1723:         	slli    a1,a1,1 %
00000ab1 : fe9ff06f;   % 1724:         	j       mulsi3.L4 %
00000ab2 : 00012583;   % 1726: mulsi3.L1: 	lw 	a1,0(sp) %
00000ab3 : 00412703;   % 1727: 		lw	a4,4(sp) %
00000ab4 : 00812783;   % 1728: 		lw	a5,8(sp) %
00000ab5 : 00c10113;   % 1729: 		addi 	sp,sp,12 %
00000ab6 : 00008067;   % 1730: 		ret %
00000ab7 : ff010113;   % 1734: __udivsi3:	addi 	sp,sp,-16 %
00000ab8 : 00b12023;   % 1735: 		sw 	a1,0(sp) %
00000ab9 : 00d12223;   % 1736: 		sw	a3,4(sp) %
00000aba : 00e12423;   % 1737: 		sw 	a4,8(sp) %
00000abb : 00f12623;   % 1738: 		sw	a5,12(sp) %
00000abc : 00a00733;   % 1740:  		mv      a4,a0 %
00000abd : 00155693;   % 1741:         	srli    a3,a0,1 %
00000abe : 00100793;   % 1742:         	li      a5,1 %
00000abf : 00b6e863;   % 1743: udivsi3.L3:    	bltu    a3,a1,udivsi3.L6 %
00000ac0 : 00179793;   % 1744:         	slli    a5,a5,1 %
00000ac1 : 00159593;   % 1745:         	slli    a1,a1,1 %
00000ac2 : ff5ff06f;   % 1746:         	j       udivsi3.L3 %
00000ac3 : 00000513;   % 1747: udivsi3.L6:    	li      a0,0 %
00000ac4 : 00078e63;   % 1748: udivsi3.L2:   	beqz    a5,udivsi3.L1 %
00000ac5 : 00b76663;   % 1749:         	bltu    a4,a1,udivsi3.L5 %
00000ac6 : 40b70733;   % 1750:         	sub     a4,a4,a1 %
00000ac7 : 00f50533;   % 1751:         	add     a0,a0,a5 %
00000ac8 : 0017d793;   % 1752: udivsi3.L5:    	srli    a5,a5,1 %
00000ac9 : 0015d593;   % 1753:         	srli    a1,a1,1 %
00000aca : fe9ff06f;   % 1754:         	j       udivsi3.L2 %
00000acb : 00012583;   % 1756: udivsi3.L1: 	lw 	a1,0(sp) %
00000acc : 00412683;   % 1757: 		lw	a3,4(sp) %
00000acd : 00812703;   % 1758: 		lw	a4,8(sp) %
00000ace : 00c12783;   % 1759: 		lw	a5,12(sp) %
00000acf : 01010113;   % 1760: 		addi 	sp,sp,16 %
00000ad0 : 00008067;   % 1761:     		ret %
00000ad1 : ff410113;   % 1764: __umodsi3:	addi	sp, sp, -12 %
00000ad2 : 00512023;   % 1765: 		sw 	t0, 0(sp) %
00000ad3 : 00612223;   % 1766: 		sw 	t1, 4(sp) %
00000ad4 : 00112423;   % 1767: 		sw 	ra, 8(sp) %
00000ad5 : 00a002b3;   % 1768: 	 	mv 	t0, a0		# dividendo %
00000ad6 : 00b00333;   % 1769: 		mv 	t1, a1		# divisor %
00000ad7 : f81ff0ef;   % 1770: 		jal 	__udivsi3 %
00000ad8 : 006005b3;   % 1771: 		mv 	a1, t1		# quociente * divisor %
00000ad9 : f31ff0ef;   % 1772: 		jal 	__mulsi3 %
00000ada : 40a28533;   % 1773: 		sub 	a0, t0, a0	# dividendo-quociente*divisor %
00000adb : 00012283;   % 1774: 		lw 	t0, 0(sp) %
00000adc : 00412303;   % 1775: 		lw 	t1, 4(sp) %
00000add : 00812083;   % 1776: 		lw 	ra, 8(sp) %
00000ade : 00c10113;   % 1777: 		addi 	sp, sp, 12 %
00000adf : 00008067;   % 1778: 		ret %
00000ae0 : ff010113;   % 1781: __divsi3:	addi	sp, sp, -16 %
00000ae1 : 00512023;   % 1782: 		sw 	t0, 0(sp) %
00000ae2 : 00612223;   % 1783: 		sw 	t1, 4(sp) %
00000ae3 : 00712423;   % 1784: 		sw 	t2, 8(sp) %
00000ae4 : 00112623;   % 1785: 		sw 	ra, 12(sp) %
00000ae5 : 41f55293;   % 1786: 		srai	t0,a0,31	# indica se a0 � pos(0) ou neg (2^32-1) %
00000ae6 : 41f5d313;   % 1787: 		srai 	t1,a1,31	# indica se a1 � pos(0) ou neg (2^32-1) %
00000ae7 : 0062c3b3;   % 1788: 		xor	t2,t0,t1	# indica se deve(!=0) ou n�o(==0) inverter o sinal do resultado %
00000ae8 : 00028463;   % 1789: 		beqz 	t0,divsi3.pula1 %
00000ae9 : 40a00533;   % 1790: 		neg	a0,a0		# nega %
00000aea : 00030463;   % 1791: divsi3.pula1:	beqz 	t1,divsi3.pula2 %
00000aeb : 40b005b3;   % 1792: 		neg	a1,a1		# nega %
00000aec : f2dff0ef;   % 1793: divsi3.pula2:	jal 	__udivsi3	# divis�o unsigned %
00000aed : 00038463;   % 1794: 		beqz	t2, divsi3.pula3	 %
00000aee : 40a00533;   % 1795: 		neg	a0,a0		# nega %
00000aef : 00012283;   % 1796: divsi3.pula3:	lw 	t0, 0(sp) %
00000af0 : 00412303;   % 1797: 		lw 	t1, 4(sp) %
00000af1 : 00812383;   % 1798: 		lw 	t2, 8(sp) %
00000af2 : 00c12083;   % 1799: 		lw 	ra, 12(sp) %
00000af3 : 01010113;   % 1800: 		addi 	sp, sp, 16 %
00000af4 : 00008067;   % 1801: 		ret %
00000af5 : ff410113;   % 1804: __modsi3:	addi	sp, sp, -12 %
00000af6 : 00512023;   % 1805: 		sw 	t0, 0(sp) %
00000af7 : 00612223;   % 1806: 		sw 	t1, 4(sp) %
00000af8 : 00112423;   % 1807: 		sw 	ra, 8(sp) %
00000af9 : 41f55293;   % 1808: 		srai	t0,a0,31	# indica se a0 � pos(0) ou neg (2^32-1) %
00000afa : 41f5d313;   % 1809: 		srai 	t1,a1,31	# indica se a1 � pos(0) ou neg (2^32-1) %
00000afb : 00028463;   % 1810: 		beqz 	t0,modsi3.pula1 %
00000afc : 40a00533;   % 1811: 		neg	a0,a0		# nega %
00000afd : 00030463;   % 1812: modsi3.pula1:	beqz 	t1,modsi3.pula2 %
00000afe : 40b005b3;   % 1813: 		neg	a1,a1		# nega %
00000aff : f49ff0ef;   % 1814: modsi3.pula2:	jal 	__umodsi3	# resto unsigned %
00000b00 : 00028463;   % 1815: 		beqz	t0, modsi3.pula3	# sinal do dividendo	 %
00000b01 : 40a00533;   % 1816: 		neg	a0,a0		# nega %
00000b02 : 00012283;   % 1817: modsi3.pula3:	lw 	t0, 0(sp) %
00000b03 : 00412303;   % 1818: 		lw 	t1, 4(sp) %
00000b04 : 00812083;   % 1819: 		lw 	ra, 8(sp) %
00000b05 : 00c10113;   % 1820: 		addi 	sp, sp, 12 %
00000b06 : 00008067;   % 1821: 		ret																				 %
END;
